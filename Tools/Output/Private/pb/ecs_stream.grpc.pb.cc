// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ecs_stream.proto

#include "ecs_stream.pb.h"
#include "ecs_stream.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ecsstream {

static const char* ECSStreamService_method_names[] = {
  "/ecsstream.ECSStreamService/SubscribeToStreamLatest",
};

std::unique_ptr< ECSStreamService::Stub> ECSStreamService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ECSStreamService::Stub> stub(new ECSStreamService::Stub(channel, options));
  return stub;
}

ECSStreamService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubscribeToStreamLatest_(ECSStreamService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::ecsstream::ECSStreamBlockBundleReply>* ECSStreamService::Stub::SubscribeToStreamLatestRaw(::grpc::ClientContext* context, const ::ecsstream::ECSStreamBlockBundleRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::ecsstream::ECSStreamBlockBundleReply>::Create(channel_.get(), rpcmethod_SubscribeToStreamLatest_, context, request);
}

void ECSStreamService::Stub::async::SubscribeToStreamLatest(::grpc::ClientContext* context, const ::ecsstream::ECSStreamBlockBundleRequest* request, ::grpc::ClientReadReactor< ::ecsstream::ECSStreamBlockBundleReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ecsstream::ECSStreamBlockBundleReply>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeToStreamLatest_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ecsstream::ECSStreamBlockBundleReply>* ECSStreamService::Stub::AsyncSubscribeToStreamLatestRaw(::grpc::ClientContext* context, const ::ecsstream::ECSStreamBlockBundleRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ecsstream::ECSStreamBlockBundleReply>::Create(channel_.get(), cq, rpcmethod_SubscribeToStreamLatest_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ecsstream::ECSStreamBlockBundleReply>* ECSStreamService::Stub::PrepareAsyncSubscribeToStreamLatestRaw(::grpc::ClientContext* context, const ::ecsstream::ECSStreamBlockBundleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ecsstream::ECSStreamBlockBundleReply>::Create(channel_.get(), cq, rpcmethod_SubscribeToStreamLatest_, context, request, false, nullptr);
}

ECSStreamService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSStreamService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ECSStreamService::Service, ::ecsstream::ECSStreamBlockBundleRequest, ::ecsstream::ECSStreamBlockBundleReply>(
          [](ECSStreamService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecsstream::ECSStreamBlockBundleRequest* req,
             ::grpc::ServerWriter<::ecsstream::ECSStreamBlockBundleReply>* writer) {
               return service->SubscribeToStreamLatest(ctx, req, writer);
             }, this)));
}

ECSStreamService::Service::~Service() {
}

::grpc::Status ECSStreamService::Service::SubscribeToStreamLatest(::grpc::ServerContext* context, const ::ecsstream::ECSStreamBlockBundleRequest* request, ::grpc::ServerWriter< ::ecsstream::ECSStreamBlockBundleReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ecsstream

