// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: faucet.proto

#include "faucet.pb.h"
#include "faucet.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace faucet {

static const char* FaucetService_method_names[] = {
  "/faucet.FaucetService/Drip",
  "/faucet.FaucetService/DripDev",
  "/faucet.FaucetService/DripVerifyTweet",
  "/faucet.FaucetService/TimeUntilDrip",
  "/faucet.FaucetService/GetLinkedTwitters",
  "/faucet.FaucetService/GetLinkedTwitterForAddress",
  "/faucet.FaucetService/GetLinkedAddressForTwitter",
  "/faucet.FaucetService/SetLinkedTwitter",
};

std::unique_ptr< FaucetService::Stub> FaucetService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FaucetService::Stub> stub(new FaucetService::Stub(channel, options));
  return stub;
}

FaucetService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Drip_(FaucetService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DripDev_(FaucetService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DripVerifyTweet_(FaucetService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TimeUntilDrip_(FaucetService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLinkedTwitters_(FaucetService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLinkedTwitterForAddress_(FaucetService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLinkedAddressForTwitter_(FaucetService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLinkedTwitter_(FaucetService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FaucetService::Stub::Drip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::faucet::DripResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::faucet::DripRequest, ::faucet::DripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Drip_, context, request, response);
}

void FaucetService::Stub::async::Drip(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::faucet::DripRequest, ::faucet::DripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Drip_, context, request, response, std::move(f));
}

void FaucetService::Stub::async::Drip(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Drip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>* FaucetService::Stub::PrepareAsyncDripRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::faucet::DripResponse, ::faucet::DripRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Drip_, context, request);
}

::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>* FaucetService::Stub::AsyncDripRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDripRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FaucetService::Stub::DripDev(::grpc::ClientContext* context, const ::faucet::DripDevRequest& request, ::faucet::DripResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::faucet::DripDevRequest, ::faucet::DripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DripDev_, context, request, response);
}

void FaucetService::Stub::async::DripDev(::grpc::ClientContext* context, const ::faucet::DripDevRequest* request, ::faucet::DripResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::faucet::DripDevRequest, ::faucet::DripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DripDev_, context, request, response, std::move(f));
}

void FaucetService::Stub::async::DripDev(::grpc::ClientContext* context, const ::faucet::DripDevRequest* request, ::faucet::DripResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DripDev_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>* FaucetService::Stub::PrepareAsyncDripDevRaw(::grpc::ClientContext* context, const ::faucet::DripDevRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::faucet::DripResponse, ::faucet::DripDevRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DripDev_, context, request);
}

::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>* FaucetService::Stub::AsyncDripDevRaw(::grpc::ClientContext* context, const ::faucet::DripDevRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDripDevRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FaucetService::Stub::DripVerifyTweet(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::faucet::DripResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::faucet::DripRequest, ::faucet::DripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DripVerifyTweet_, context, request, response);
}

void FaucetService::Stub::async::DripVerifyTweet(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::faucet::DripRequest, ::faucet::DripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DripVerifyTweet_, context, request, response, std::move(f));
}

void FaucetService::Stub::async::DripVerifyTweet(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DripVerifyTweet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>* FaucetService::Stub::PrepareAsyncDripVerifyTweetRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::faucet::DripResponse, ::faucet::DripRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DripVerifyTweet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>* FaucetService::Stub::AsyncDripVerifyTweetRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDripVerifyTweetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FaucetService::Stub::TimeUntilDrip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::faucet::TimeUntilDripResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::faucet::DripRequest, ::faucet::TimeUntilDripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TimeUntilDrip_, context, request, response);
}

void FaucetService::Stub::async::TimeUntilDrip(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::TimeUntilDripResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::faucet::DripRequest, ::faucet::TimeUntilDripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TimeUntilDrip_, context, request, response, std::move(f));
}

void FaucetService::Stub::async::TimeUntilDrip(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::TimeUntilDripResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TimeUntilDrip_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::faucet::TimeUntilDripResponse>* FaucetService::Stub::PrepareAsyncTimeUntilDripRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::faucet::TimeUntilDripResponse, ::faucet::DripRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TimeUntilDrip_, context, request);
}

::grpc::ClientAsyncResponseReader< ::faucet::TimeUntilDripResponse>* FaucetService::Stub::AsyncTimeUntilDripRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTimeUntilDripRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FaucetService::Stub::GetLinkedTwitters(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest& request, ::faucet::GetLinkedTwittersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::faucet::GetLinkedTwittersRequest, ::faucet::GetLinkedTwittersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLinkedTwitters_, context, request, response);
}

void FaucetService::Stub::async::GetLinkedTwitters(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest* request, ::faucet::GetLinkedTwittersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::faucet::GetLinkedTwittersRequest, ::faucet::GetLinkedTwittersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLinkedTwitters_, context, request, response, std::move(f));
}

void FaucetService::Stub::async::GetLinkedTwitters(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest* request, ::faucet::GetLinkedTwittersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLinkedTwitters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::faucet::GetLinkedTwittersResponse>* FaucetService::Stub::PrepareAsyncGetLinkedTwittersRaw(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::faucet::GetLinkedTwittersResponse, ::faucet::GetLinkedTwittersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLinkedTwitters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::faucet::GetLinkedTwittersResponse>* FaucetService::Stub::AsyncGetLinkedTwittersRaw(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLinkedTwittersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FaucetService::Stub::GetLinkedTwitterForAddress(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest& request, ::faucet::LinkedTwitterForAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::faucet::LinkedTwitterForAddressRequest, ::faucet::LinkedTwitterForAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLinkedTwitterForAddress_, context, request, response);
}

void FaucetService::Stub::async::GetLinkedTwitterForAddress(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest* request, ::faucet::LinkedTwitterForAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::faucet::LinkedTwitterForAddressRequest, ::faucet::LinkedTwitterForAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLinkedTwitterForAddress_, context, request, response, std::move(f));
}

void FaucetService::Stub::async::GetLinkedTwitterForAddress(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest* request, ::faucet::LinkedTwitterForAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLinkedTwitterForAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::faucet::LinkedTwitterForAddressResponse>* FaucetService::Stub::PrepareAsyncGetLinkedTwitterForAddressRaw(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::faucet::LinkedTwitterForAddressResponse, ::faucet::LinkedTwitterForAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLinkedTwitterForAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::faucet::LinkedTwitterForAddressResponse>* FaucetService::Stub::AsyncGetLinkedTwitterForAddressRaw(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLinkedTwitterForAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FaucetService::Stub::GetLinkedAddressForTwitter(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest& request, ::faucet::LinkedAddressForTwitterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::faucet::LinkedAddressForTwitterRequest, ::faucet::LinkedAddressForTwitterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLinkedAddressForTwitter_, context, request, response);
}

void FaucetService::Stub::async::GetLinkedAddressForTwitter(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest* request, ::faucet::LinkedAddressForTwitterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::faucet::LinkedAddressForTwitterRequest, ::faucet::LinkedAddressForTwitterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLinkedAddressForTwitter_, context, request, response, std::move(f));
}

void FaucetService::Stub::async::GetLinkedAddressForTwitter(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest* request, ::faucet::LinkedAddressForTwitterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLinkedAddressForTwitter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::faucet::LinkedAddressForTwitterResponse>* FaucetService::Stub::PrepareAsyncGetLinkedAddressForTwitterRaw(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::faucet::LinkedAddressForTwitterResponse, ::faucet::LinkedAddressForTwitterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLinkedAddressForTwitter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::faucet::LinkedAddressForTwitterResponse>* FaucetService::Stub::AsyncGetLinkedAddressForTwitterRaw(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLinkedAddressForTwitterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FaucetService::Stub::SetLinkedTwitter(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest& request, ::faucet::SetLinkedTwitterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::faucet::SetLinkedTwitterRequest, ::faucet::SetLinkedTwitterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLinkedTwitter_, context, request, response);
}

void FaucetService::Stub::async::SetLinkedTwitter(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest* request, ::faucet::SetLinkedTwitterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::faucet::SetLinkedTwitterRequest, ::faucet::SetLinkedTwitterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLinkedTwitter_, context, request, response, std::move(f));
}

void FaucetService::Stub::async::SetLinkedTwitter(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest* request, ::faucet::SetLinkedTwitterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLinkedTwitter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::faucet::SetLinkedTwitterResponse>* FaucetService::Stub::PrepareAsyncSetLinkedTwitterRaw(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::faucet::SetLinkedTwitterResponse, ::faucet::SetLinkedTwitterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLinkedTwitter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::faucet::SetLinkedTwitterResponse>* FaucetService::Stub::AsyncSetLinkedTwitterRaw(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLinkedTwitterRaw(context, request, cq);
  result->StartCall();
  return result;
}

FaucetService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaucetService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaucetService::Service, ::faucet::DripRequest, ::faucet::DripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FaucetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::faucet::DripRequest* req,
             ::faucet::DripResponse* resp) {
               return service->Drip(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaucetService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaucetService::Service, ::faucet::DripDevRequest, ::faucet::DripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FaucetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::faucet::DripDevRequest* req,
             ::faucet::DripResponse* resp) {
               return service->DripDev(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaucetService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaucetService::Service, ::faucet::DripRequest, ::faucet::DripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FaucetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::faucet::DripRequest* req,
             ::faucet::DripResponse* resp) {
               return service->DripVerifyTweet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaucetService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaucetService::Service, ::faucet::DripRequest, ::faucet::TimeUntilDripResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FaucetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::faucet::DripRequest* req,
             ::faucet::TimeUntilDripResponse* resp) {
               return service->TimeUntilDrip(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaucetService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaucetService::Service, ::faucet::GetLinkedTwittersRequest, ::faucet::GetLinkedTwittersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FaucetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::faucet::GetLinkedTwittersRequest* req,
             ::faucet::GetLinkedTwittersResponse* resp) {
               return service->GetLinkedTwitters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaucetService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaucetService::Service, ::faucet::LinkedTwitterForAddressRequest, ::faucet::LinkedTwitterForAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FaucetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::faucet::LinkedTwitterForAddressRequest* req,
             ::faucet::LinkedTwitterForAddressResponse* resp) {
               return service->GetLinkedTwitterForAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaucetService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaucetService::Service, ::faucet::LinkedAddressForTwitterRequest, ::faucet::LinkedAddressForTwitterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FaucetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::faucet::LinkedAddressForTwitterRequest* req,
             ::faucet::LinkedAddressForTwitterResponse* resp) {
               return service->GetLinkedAddressForTwitter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaucetService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaucetService::Service, ::faucet::SetLinkedTwitterRequest, ::faucet::SetLinkedTwitterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FaucetService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::faucet::SetLinkedTwitterRequest* req,
             ::faucet::SetLinkedTwitterResponse* resp) {
               return service->SetLinkedTwitter(ctx, req, resp);
             }, this)));
}

FaucetService::Service::~Service() {
}

::grpc::Status FaucetService::Service::Drip(::grpc::ServerContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaucetService::Service::DripDev(::grpc::ServerContext* context, const ::faucet::DripDevRequest* request, ::faucet::DripResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaucetService::Service::DripVerifyTweet(::grpc::ServerContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaucetService::Service::TimeUntilDrip(::grpc::ServerContext* context, const ::faucet::DripRequest* request, ::faucet::TimeUntilDripResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaucetService::Service::GetLinkedTwitters(::grpc::ServerContext* context, const ::faucet::GetLinkedTwittersRequest* request, ::faucet::GetLinkedTwittersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaucetService::Service::GetLinkedTwitterForAddress(::grpc::ServerContext* context, const ::faucet::LinkedTwitterForAddressRequest* request, ::faucet::LinkedTwitterForAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaucetService::Service::GetLinkedAddressForTwitter(::grpc::ServerContext* context, const ::faucet::LinkedAddressForTwitterRequest* request, ::faucet::LinkedAddressForTwitterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaucetService::Service::SetLinkedTwitter(::grpc::ServerContext* context, const ::faucet::SetLinkedTwitterRequest* request, ::faucet::SetLinkedTwitterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace faucet

