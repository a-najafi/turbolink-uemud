//Generated by TurboLink CodeGenerator, do not edit!
#include "SFaucet/FaucetMessage.h"
#include "TurboLinkGrpcContext.h"
#include "faucet.pb.h"

void GRPC_TO_TURBOLINK(const ::faucet::LinkedTwitterPair* in, FGrpcFaucetLinkedTwitterPair* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetLinkedTwitterPair* in, ::faucet::LinkedTwitterPair* out);

void GRPC_TO_TURBOLINK(const ::faucet::FaucetStore* in, FGrpcFaucetFaucetStore* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetFaucetStore* in, ::faucet::FaucetStore* out);

void GRPC_TO_TURBOLINK(const ::faucet::DripRequest* in, FGrpcFaucetDripRequest* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetDripRequest* in, ::faucet::DripRequest* out);

void GRPC_TO_TURBOLINK(const ::faucet::DripDevRequest* in, FGrpcFaucetDripDevRequest* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetDripDevRequest* in, ::faucet::DripDevRequest* out);

void GRPC_TO_TURBOLINK(const ::faucet::DripResponse* in, FGrpcFaucetDripResponse* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetDripResponse* in, ::faucet::DripResponse* out);

void GRPC_TO_TURBOLINK(const ::faucet::TimeUntilDripResponse* in, FGrpcFaucetTimeUntilDripResponse* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetTimeUntilDripResponse* in, ::faucet::TimeUntilDripResponse* out);

void GRPC_TO_TURBOLINK(const ::faucet::GetLinkedTwittersRequest* in, FGrpcFaucetGetLinkedTwittersRequest* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetGetLinkedTwittersRequest* in, ::faucet::GetLinkedTwittersRequest* out);

void GRPC_TO_TURBOLINK(const ::faucet::GetLinkedTwittersResponse* in, FGrpcFaucetGetLinkedTwittersResponse* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetGetLinkedTwittersResponse* in, ::faucet::GetLinkedTwittersResponse* out);

void GRPC_TO_TURBOLINK(const ::faucet::LinkedTwitterForAddressRequest* in, FGrpcFaucetLinkedTwitterForAddressRequest* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetLinkedTwitterForAddressRequest* in, ::faucet::LinkedTwitterForAddressRequest* out);

void GRPC_TO_TURBOLINK(const ::faucet::LinkedTwitterForAddressResponse* in, FGrpcFaucetLinkedTwitterForAddressResponse* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetLinkedTwitterForAddressResponse* in, ::faucet::LinkedTwitterForAddressResponse* out);

void GRPC_TO_TURBOLINK(const ::faucet::LinkedAddressForTwitterRequest* in, FGrpcFaucetLinkedAddressForTwitterRequest* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetLinkedAddressForTwitterRequest* in, ::faucet::LinkedAddressForTwitterRequest* out);

void GRPC_TO_TURBOLINK(const ::faucet::LinkedAddressForTwitterResponse* in, FGrpcFaucetLinkedAddressForTwitterResponse* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetLinkedAddressForTwitterResponse* in, ::faucet::LinkedAddressForTwitterResponse* out);

void GRPC_TO_TURBOLINK(const ::faucet::SetLinkedTwitterRequest* in, FGrpcFaucetSetLinkedTwitterRequest* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetSetLinkedTwitterRequest* in, ::faucet::SetLinkedTwitterRequest* out);

void GRPC_TO_TURBOLINK(const ::faucet::SetLinkedTwitterResponse* in, FGrpcFaucetSetLinkedTwitterResponse* out);
void TURBOLINK_TO_GRPC(const FGrpcFaucetSetLinkedTwitterResponse* in, ::faucet::SetLinkedTwitterResponse* out);

typedef grpc::ClientAsyncResponseReader<::faucet::DripResponse> FaucetService_Drip_ReaderWriter;
typedef grpc::ClientAsyncResponseReader<::faucet::DripResponse> FaucetService_DripDev_ReaderWriter;
typedef grpc::ClientAsyncResponseReader<::faucet::DripResponse> FaucetService_DripVerifyTweet_ReaderWriter;
typedef grpc::ClientAsyncResponseReader<::faucet::TimeUntilDripResponse> FaucetService_TimeUntilDrip_ReaderWriter;
typedef grpc::ClientAsyncResponseReader<::faucet::GetLinkedTwittersResponse> FaucetService_GetLinkedTwitters_ReaderWriter;
typedef grpc::ClientAsyncResponseReader<::faucet::LinkedTwitterForAddressResponse> FaucetService_GetLinkedTwitterForAddress_ReaderWriter;
typedef grpc::ClientAsyncResponseReader<::faucet::LinkedAddressForTwitterResponse> FaucetService_GetLinkedAddressForTwitter_ReaderWriter;
typedef grpc::ClientAsyncResponseReader<::faucet::SetLinkedTwitterResponse> FaucetService_SetLinkedTwitter_ReaderWriter;
