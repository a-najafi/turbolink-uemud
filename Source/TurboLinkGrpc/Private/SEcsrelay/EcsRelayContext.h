//Generated by TurboLink CodeGenerator, do not edit!
#pragma once
#include "TurboLinkGrpcContext.h"
#include "SEcsrelay/EcsRelayMessage.h"
#include "SEcsrelay/EcsRelayMarshaling.h"
class GrpcContext_ECSRelayService_Authenticate : public GrpcContext_Ping_Pong<ECSRelayService_Authenticate_ReaderWriter, ::ecsrelay::Identity>
{
	friend class UECSRelayServiceClient;
	typedef GrpcContext_Ping_Pong<ECSRelayService_Authenticate_ReaderWriter, ::ecsrelay::Identity> Super;

private:
	void Call(const FGrpcEcsrelaySignature& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_ECSRelayService_Authenticate(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_ECSRelayService_Revoke : public GrpcContext_Ping_Pong<ECSRelayService_Revoke_ReaderWriter, ::ecsrelay::Identity>
{
	friend class UECSRelayServiceClient;
	typedef GrpcContext_Ping_Pong<ECSRelayService_Revoke_ReaderWriter, ::ecsrelay::Identity> Super;

private:
	void Call(const FGrpcEcsrelaySignature& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_ECSRelayService_Revoke(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_ECSRelayService_Ping : public GrpcContext_Ping_Pong<ECSRelayService_Ping_ReaderWriter, ::ecsrelay::Identity>
{
	friend class UECSRelayServiceClient;
	typedef GrpcContext_Ping_Pong<ECSRelayService_Ping_ReaderWriter, ::ecsrelay::Identity> Super;

private:
	void Call(const FGrpcEcsrelaySignature& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_ECSRelayService_Ping(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_ECSRelayService_CountAuthenticated : public GrpcContext_Ping_Pong<ECSRelayService_CountAuthenticated_ReaderWriter, ::ecsrelay::CountIdentitiesResponse>
{
	friend class UECSRelayServiceClient;
	typedef GrpcContext_Ping_Pong<ECSRelayService_CountAuthenticated_ReaderWriter, ::ecsrelay::CountIdentitiesResponse> Super;

private:
	void Call(const FGrpcEcsrelayCountIdentitiesRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_ECSRelayService_CountAuthenticated(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_ECSRelayService_CountConnected : public GrpcContext_Ping_Pong<ECSRelayService_CountConnected_ReaderWriter, ::ecsrelay::CountIdentitiesResponse>
{
	friend class UECSRelayServiceClient;
	typedef GrpcContext_Ping_Pong<ECSRelayService_CountConnected_ReaderWriter, ::ecsrelay::CountIdentitiesResponse> Super;

private:
	void Call(const FGrpcEcsrelayCountIdentitiesRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_ECSRelayService_CountConnected(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_ECSRelayService_Subscribe : public GrpcContext_Ping_Pong<ECSRelayService_Subscribe_ReaderWriter, ::ecsrelay::Subscription>
{
	friend class UECSRelayServiceClient;
	typedef GrpcContext_Ping_Pong<ECSRelayService_Subscribe_ReaderWriter, ::ecsrelay::Subscription> Super;

private:
	void Call(const FGrpcEcsrelaySubscriptionRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_ECSRelayService_Subscribe(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_ECSRelayService_Unsubscribe : public GrpcContext_Ping_Pong<ECSRelayService_Unsubscribe_ReaderWriter, ::ecsrelay::Subscription>
{
	friend class UECSRelayServiceClient;
	typedef GrpcContext_Ping_Pong<ECSRelayService_Unsubscribe_ReaderWriter, ::ecsrelay::Subscription> Super;

private:
	void Call(const FGrpcEcsrelaySubscriptionRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_ECSRelayService_Unsubscribe(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_ECSRelayService_OpenStream : public GrpcContext_Ping_Stream<ECSRelayService_OpenStream_ReaderWriter, ::ecsrelay::Message>
{
	friend class UECSRelayServiceClient;
	typedef GrpcContext_Ping_Stream<ECSRelayService_OpenStream_ReaderWriter, ::ecsrelay::Message> Super;

private:
	void Call(const FGrpcEcsrelaySignature& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_ECSRelayService_OpenStream(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_ECSRelayService_PushStream : public GrpcContext_Stream_Stream<ECSRelayService_PushStream_ReaderWriter, ::ecsrelay::PushResponse, ::ecsrelay::PushRequest>
{
	friend class UECSRelayServiceClient;
	typedef GrpcContext_Stream_Stream<ECSRelayService_PushStream_ReaderWriter, ::ecsrelay::PushResponse, ::ecsrelay::PushRequest> Super;

private:
	void Init();
	void Call(const FGrpcEcsrelayPushRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_ECSRelayService_PushStream(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_ECSRelayService_Push : public GrpcContext_Ping_Pong<ECSRelayService_Push_ReaderWriter, ::ecsrelay::PushResponse>
{
	friend class UECSRelayServiceClient;
	typedef GrpcContext_Ping_Pong<ECSRelayService_Push_ReaderWriter, ::ecsrelay::PushResponse> Super;

private:
	void Call(const FGrpcEcsrelayPushRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_ECSRelayService_Push(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_ECSRelayService_MinBalanceForPush : public GrpcContext_Ping_Pong<ECSRelayService_MinBalanceForPush_ReaderWriter, ::ecsrelay::BalanceResponse>
{
	friend class UECSRelayServiceClient;
	typedef GrpcContext_Ping_Pong<ECSRelayService_MinBalanceForPush_ReaderWriter, ::ecsrelay::BalanceResponse> Super;

private:
	void Call(const FGrpcEcsrelayBalanceRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_ECSRelayService_MinBalanceForPush(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

