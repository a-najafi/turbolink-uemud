// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ecs_relay.proto
#ifndef GRPC_ecs_5frelay_2eproto__INCLUDED
#define GRPC_ecs_5frelay_2eproto__INCLUDED

#include "ecs_relay.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ecsrelay {

// The Relay Service definition.
class ECSRelayService final {
 public:
  static constexpr char const* service_full_name() {
    return "ecsrelay.ECSRelayService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::ecsrelay::Identity* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>> AsyncAuthenticate(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>>(AsyncAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>> PrepareAsyncAuthenticate(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>>(PrepareAsyncAuthenticateRaw(context, request, cq));
    }
    virtual ::grpc::Status Revoke(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::ecsrelay::Identity* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>> AsyncRevoke(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>>(AsyncRevokeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>> PrepareAsyncRevoke(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>>(PrepareAsyncRevokeRaw(context, request, cq));
    }
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::ecsrelay::Identity* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>> AsyncPing(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>> PrepareAsyncPing(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>>(PrepareAsyncPingRaw(context, request, cq));
    }
    virtual ::grpc::Status CountAuthenticated(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::ecsrelay::CountIdentitiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::CountIdentitiesResponse>> AsyncCountAuthenticated(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::CountIdentitiesResponse>>(AsyncCountAuthenticatedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::CountIdentitiesResponse>> PrepareAsyncCountAuthenticated(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::CountIdentitiesResponse>>(PrepareAsyncCountAuthenticatedRaw(context, request, cq));
    }
    virtual ::grpc::Status CountConnected(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::ecsrelay::CountIdentitiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::CountIdentitiesResponse>> AsyncCountConnected(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::CountIdentitiesResponse>>(AsyncCountConnectedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::CountIdentitiesResponse>> PrepareAsyncCountConnected(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::CountIdentitiesResponse>>(PrepareAsyncCountConnectedRaw(context, request, cq));
    }
    virtual ::grpc::Status Subscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::ecsrelay::Subscription* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Subscription>> AsyncSubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Subscription>>(AsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Subscription>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Subscription>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    virtual ::grpc::Status Unsubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::ecsrelay::Subscription* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Subscription>> AsyncUnsubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Subscription>>(AsyncUnsubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Subscription>> PrepareAsyncUnsubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Subscription>>(PrepareAsyncUnsubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ecsrelay::Message>> OpenStream(::grpc::ClientContext* context, const ::ecsrelay::Signature& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ecsrelay::Message>>(OpenStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ecsrelay::Message>> AsyncOpenStream(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ecsrelay::Message>>(AsyncOpenStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ecsrelay::Message>> PrepareAsyncOpenStream(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ecsrelay::Message>>(PrepareAsyncOpenStreamRaw(context, request, cq));
    }
    // Push a stream of messages to be relayed.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>> PushStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>>(PushStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>> AsyncPushStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>>(AsyncPushStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>> PrepareAsyncPushStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>>(PrepareAsyncPushStreamRaw(context, cq));
    }
    // Push a single message to be relayed.
    virtual ::grpc::Status Push(::grpc::ClientContext* context, const ::ecsrelay::PushRequest& request, ::ecsrelay::PushResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::PushResponse>> AsyncPush(::grpc::ClientContext* context, const ::ecsrelay::PushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::PushResponse>>(AsyncPushRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::PushResponse>> PrepareAsyncPush(::grpc::ClientContext* context, const ::ecsrelay::PushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::PushResponse>>(PrepareAsyncPushRaw(context, request, cq));
    }
    // Minimum balance an account must have to be able to push.
    virtual ::grpc::Status MinBalanceForPush(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest& request, ::ecsrelay::BalanceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::BalanceResponse>> AsyncMinBalanceForPush(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::BalanceResponse>>(AsyncMinBalanceForPushRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::BalanceResponse>> PrepareAsyncMinBalanceForPush(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::BalanceResponse>>(PrepareAsyncMinBalanceForPushRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Authenticate(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Authenticate(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Revoke(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Revoke(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CountAuthenticated(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CountAuthenticated(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CountConnected(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CountConnected(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Subscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Subscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Unsubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Unsubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OpenStream(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::grpc::ClientReadReactor< ::ecsrelay::Message>* reactor) = 0;
      // Push a stream of messages to be relayed.
      virtual void PushStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ecsrelay::PushRequest,::ecsrelay::PushResponse>* reactor) = 0;
      // Push a single message to be relayed.
      virtual void Push(::grpc::ClientContext* context, const ::ecsrelay::PushRequest* request, ::ecsrelay::PushResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Push(::grpc::ClientContext* context, const ::ecsrelay::PushRequest* request, ::ecsrelay::PushResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Minimum balance an account must have to be able to push.
      virtual void MinBalanceForPush(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest* request, ::ecsrelay::BalanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MinBalanceForPush(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest* request, ::ecsrelay::BalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>* PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>* AsyncRevokeRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>* PrepareAsyncRevokeRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>* AsyncPingRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Identity>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::CountIdentitiesResponse>* AsyncCountAuthenticatedRaw(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::CountIdentitiesResponse>* PrepareAsyncCountAuthenticatedRaw(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::CountIdentitiesResponse>* AsyncCountConnectedRaw(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::CountIdentitiesResponse>* PrepareAsyncCountConnectedRaw(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Subscription>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Subscription>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Subscription>* AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::Subscription>* PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ecsrelay::Message>* OpenStreamRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ecsrelay::Message>* AsyncOpenStreamRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ecsrelay::Message>* PrepareAsyncOpenStreamRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>* PushStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>* AsyncPushStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>* PrepareAsyncPushStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::PushResponse>* AsyncPushRaw(::grpc::ClientContext* context, const ::ecsrelay::PushRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::PushResponse>* PrepareAsyncPushRaw(::grpc::ClientContext* context, const ::ecsrelay::PushRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::BalanceResponse>* AsyncMinBalanceForPushRaw(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecsrelay::BalanceResponse>* PrepareAsyncMinBalanceForPushRaw(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Authenticate(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::ecsrelay::Identity* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>> AsyncAuthenticate(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>>(AsyncAuthenticateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>> PrepareAsyncAuthenticate(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>>(PrepareAsyncAuthenticateRaw(context, request, cq));
    }
    ::grpc::Status Revoke(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::ecsrelay::Identity* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>> AsyncRevoke(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>>(AsyncRevokeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>> PrepareAsyncRevoke(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>>(PrepareAsyncRevokeRaw(context, request, cq));
    }
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::ecsrelay::Identity* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>> AsyncPing(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>> PrepareAsyncPing(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status CountAuthenticated(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::ecsrelay::CountIdentitiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>> AsyncCountAuthenticated(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>>(AsyncCountAuthenticatedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>> PrepareAsyncCountAuthenticated(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>>(PrepareAsyncCountAuthenticatedRaw(context, request, cq));
    }
    ::grpc::Status CountConnected(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::ecsrelay::CountIdentitiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>> AsyncCountConnected(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>>(AsyncCountConnectedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>> PrepareAsyncCountConnected(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>>(PrepareAsyncCountConnectedRaw(context, request, cq));
    }
    ::grpc::Status Subscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::ecsrelay::Subscription* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>> AsyncSubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>>(AsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    ::grpc::Status Unsubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::ecsrelay::Subscription* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>> AsyncUnsubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>>(AsyncUnsubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>> PrepareAsyncUnsubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>>(PrepareAsyncUnsubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ecsrelay::Message>> OpenStream(::grpc::ClientContext* context, const ::ecsrelay::Signature& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ecsrelay::Message>>(OpenStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ecsrelay::Message>> AsyncOpenStream(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ecsrelay::Message>>(AsyncOpenStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ecsrelay::Message>> PrepareAsyncOpenStream(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ecsrelay::Message>>(PrepareAsyncOpenStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>> PushStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>>(PushStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>> AsyncPushStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>>(AsyncPushStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>> PrepareAsyncPushStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>>(PrepareAsyncPushStreamRaw(context, cq));
    }
    ::grpc::Status Push(::grpc::ClientContext* context, const ::ecsrelay::PushRequest& request, ::ecsrelay::PushResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::PushResponse>> AsyncPush(::grpc::ClientContext* context, const ::ecsrelay::PushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::PushResponse>>(AsyncPushRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::PushResponse>> PrepareAsyncPush(::grpc::ClientContext* context, const ::ecsrelay::PushRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::PushResponse>>(PrepareAsyncPushRaw(context, request, cq));
    }
    ::grpc::Status MinBalanceForPush(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest& request, ::ecsrelay::BalanceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::BalanceResponse>> AsyncMinBalanceForPush(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::BalanceResponse>>(AsyncMinBalanceForPushRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::BalanceResponse>> PrepareAsyncMinBalanceForPush(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecsrelay::BalanceResponse>>(PrepareAsyncMinBalanceForPushRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Authenticate(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, std::function<void(::grpc::Status)>) override;
      void Authenticate(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Revoke(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, std::function<void(::grpc::Status)>) override;
      void Revoke(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Ping(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CountAuthenticated(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response, std::function<void(::grpc::Status)>) override;
      void CountAuthenticated(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CountConnected(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response, std::function<void(::grpc::Status)>) override;
      void CountConnected(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Subscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response, std::function<void(::grpc::Status)>) override;
      void Subscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Unsubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response, std::function<void(::grpc::Status)>) override;
      void Unsubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OpenStream(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::grpc::ClientReadReactor< ::ecsrelay::Message>* reactor) override;
      void PushStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ecsrelay::PushRequest,::ecsrelay::PushResponse>* reactor) override;
      void Push(::grpc::ClientContext* context, const ::ecsrelay::PushRequest* request, ::ecsrelay::PushResponse* response, std::function<void(::grpc::Status)>) override;
      void Push(::grpc::ClientContext* context, const ::ecsrelay::PushRequest* request, ::ecsrelay::PushResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MinBalanceForPush(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest* request, ::ecsrelay::BalanceResponse* response, std::function<void(::grpc::Status)>) override;
      void MinBalanceForPush(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest* request, ::ecsrelay::BalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>* AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>* PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>* AsyncRevokeRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>* PrepareAsyncRevokeRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>* AsyncPingRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>* AsyncCountAuthenticatedRaw(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>* PrepareAsyncCountAuthenticatedRaw(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>* AsyncCountConnectedRaw(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>* PrepareAsyncCountConnectedRaw(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>* AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>* PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ecsrelay::Message>* OpenStreamRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request) override;
    ::grpc::ClientAsyncReader< ::ecsrelay::Message>* AsyncOpenStreamRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ecsrelay::Message>* PrepareAsyncOpenStreamRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>* PushStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>* AsyncPushStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>* PrepareAsyncPushStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::PushResponse>* AsyncPushRaw(::grpc::ClientContext* context, const ::ecsrelay::PushRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::PushResponse>* PrepareAsyncPushRaw(::grpc::ClientContext* context, const ::ecsrelay::PushRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::BalanceResponse>* AsyncMinBalanceForPushRaw(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecsrelay::BalanceResponse>* PrepareAsyncMinBalanceForPushRaw(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Authenticate_;
    const ::grpc::internal::RpcMethod rpcmethod_Revoke_;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_CountAuthenticated_;
    const ::grpc::internal::RpcMethod rpcmethod_CountConnected_;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_Unsubscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_OpenStream_;
    const ::grpc::internal::RpcMethod rpcmethod_PushStream_;
    const ::grpc::internal::RpcMethod rpcmethod_Push_;
    const ::grpc::internal::RpcMethod rpcmethod_MinBalanceForPush_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Authenticate(::grpc::ServerContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response);
    virtual ::grpc::Status Revoke(::grpc::ServerContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response);
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response);
    virtual ::grpc::Status CountAuthenticated(::grpc::ServerContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response);
    virtual ::grpc::Status CountConnected(::grpc::ServerContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response);
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response);
    virtual ::grpc::Status Unsubscribe(::grpc::ServerContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response);
    virtual ::grpc::Status OpenStream(::grpc::ServerContext* context, const ::ecsrelay::Signature* request, ::grpc::ServerWriter< ::ecsrelay::Message>* writer);
    // Push a stream of messages to be relayed.
    virtual ::grpc::Status PushStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ecsrelay::PushResponse, ::ecsrelay::PushRequest>* stream);
    // Push a single message to be relayed.
    virtual ::grpc::Status Push(::grpc::ServerContext* context, const ::ecsrelay::PushRequest* request, ::ecsrelay::PushResponse* response);
    // Minimum balance an account must have to be able to push.
    virtual ::grpc::Status MinBalanceForPush(::grpc::ServerContext* context, const ::ecsrelay::BalanceRequest* request, ::ecsrelay::BalanceResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Authenticate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::ecsrelay::Signature* request, ::grpc::ServerAsyncResponseWriter< ::ecsrelay::Identity>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Revoke : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Revoke() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Revoke() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Revoke(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRevoke(::grpc::ServerContext* context, ::ecsrelay::Signature* request, ::grpc::ServerAsyncResponseWriter< ::ecsrelay::Identity>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::ecsrelay::Signature* request, ::grpc::ServerAsyncResponseWriter< ::ecsrelay::Identity>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CountAuthenticated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CountAuthenticated() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CountAuthenticated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountAuthenticated(::grpc::ServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCountAuthenticated(::grpc::ServerContext* context, ::ecsrelay::CountIdentitiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ecsrelay::CountIdentitiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CountConnected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CountConnected() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CountConnected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountConnected(::grpc::ServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCountConnected(::grpc::ServerContext* context, ::ecsrelay::CountIdentitiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ecsrelay::CountIdentitiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::ecsrelay::SubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::ecsrelay::Subscription>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnsubscribe(::grpc::ServerContext* context, ::ecsrelay::SubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::ecsrelay::Subscription>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OpenStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OpenStream() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_OpenStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenStream(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::grpc::ServerWriter< ::ecsrelay::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenStream(::grpc::ServerContext* context, ::ecsrelay::Signature* request, ::grpc::ServerAsyncWriter< ::ecsrelay::Message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushStream() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PushStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ecsrelay::PushResponse, ::ecsrelay::PushRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::ecsrelay::PushResponse, ::ecsrelay::PushRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Push() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Push(::grpc::ServerContext* /*context*/, const ::ecsrelay::PushRequest* /*request*/, ::ecsrelay::PushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPush(::grpc::ServerContext* context, ::ecsrelay::PushRequest* request, ::grpc::ServerAsyncResponseWriter< ::ecsrelay::PushResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MinBalanceForPush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MinBalanceForPush() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_MinBalanceForPush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MinBalanceForPush(::grpc::ServerContext* /*context*/, const ::ecsrelay::BalanceRequest* /*request*/, ::ecsrelay::BalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMinBalanceForPush(::grpc::ServerContext* context, ::ecsrelay::BalanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::ecsrelay::BalanceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Authenticate<WithAsyncMethod_Revoke<WithAsyncMethod_Ping<WithAsyncMethod_CountAuthenticated<WithAsyncMethod_CountConnected<WithAsyncMethod_Subscribe<WithAsyncMethod_Unsubscribe<WithAsyncMethod_OpenStream<WithAsyncMethod_PushStream<WithAsyncMethod_Push<WithAsyncMethod_MinBalanceForPush<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Authenticate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ecsrelay::Signature, ::ecsrelay::Identity>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response) { return this->Authenticate(context, request, response); }));}
    void SetMessageAllocatorFor_Authenticate(
        ::grpc::MessageAllocator< ::ecsrelay::Signature, ::ecsrelay::Identity>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ecsrelay::Signature, ::ecsrelay::Identity>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Authenticate(
      ::grpc::CallbackServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Revoke : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Revoke() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ecsrelay::Signature, ::ecsrelay::Identity>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response) { return this->Revoke(context, request, response); }));}
    void SetMessageAllocatorFor_Revoke(
        ::grpc::MessageAllocator< ::ecsrelay::Signature, ::ecsrelay::Identity>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ecsrelay::Signature, ::ecsrelay::Identity>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Revoke() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Revoke(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Revoke(
      ::grpc::CallbackServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ecsrelay::Signature, ::ecsrelay::Identity>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::MessageAllocator< ::ecsrelay::Signature, ::ecsrelay::Identity>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ecsrelay::Signature, ::ecsrelay::Identity>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CountAuthenticated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CountAuthenticated() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response) { return this->CountAuthenticated(context, request, response); }));}
    void SetMessageAllocatorFor_CountAuthenticated(
        ::grpc::MessageAllocator< ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CountAuthenticated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountAuthenticated(::grpc::ServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CountAuthenticated(
      ::grpc::CallbackServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CountConnected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CountConnected() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response) { return this->CountConnected(context, request, response); }));}
    void SetMessageAllocatorFor_CountConnected(
        ::grpc::MessageAllocator< ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CountConnected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountConnected(::grpc::ServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CountConnected(
      ::grpc::CallbackServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response) { return this->Subscribe(context, request, response); }));}
    void SetMessageAllocatorFor_Subscribe(
        ::grpc::MessageAllocator< ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response) { return this->Unsubscribe(context, request, response); }));}
    void SetMessageAllocatorFor_Unsubscribe(
        ::grpc::MessageAllocator< ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Unsubscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OpenStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OpenStream() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::ecsrelay::Signature, ::ecsrelay::Message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ecsrelay::Signature* request) { return this->OpenStream(context, request); }));
    }
    ~WithCallbackMethod_OpenStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenStream(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::grpc::ServerWriter< ::ecsrelay::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::ecsrelay::Message>* OpenStream(
      ::grpc::CallbackServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PushStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushStream() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->PushStream(context); }));
    }
    ~WithCallbackMethod_PushStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ecsrelay::PushResponse, ::ecsrelay::PushRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>* PushStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Push() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ecsrelay::PushRequest* request, ::ecsrelay::PushResponse* response) { return this->Push(context, request, response); }));}
    void SetMessageAllocatorFor_Push(
        ::grpc::MessageAllocator< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Push(::grpc::ServerContext* /*context*/, const ::ecsrelay::PushRequest* /*request*/, ::ecsrelay::PushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Push(
      ::grpc::CallbackServerContext* /*context*/, const ::ecsrelay::PushRequest* /*request*/, ::ecsrelay::PushResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MinBalanceForPush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MinBalanceForPush() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::ecsrelay::BalanceRequest, ::ecsrelay::BalanceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ecsrelay::BalanceRequest* request, ::ecsrelay::BalanceResponse* response) { return this->MinBalanceForPush(context, request, response); }));}
    void SetMessageAllocatorFor_MinBalanceForPush(
        ::grpc::MessageAllocator< ::ecsrelay::BalanceRequest, ::ecsrelay::BalanceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ecsrelay::BalanceRequest, ::ecsrelay::BalanceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MinBalanceForPush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MinBalanceForPush(::grpc::ServerContext* /*context*/, const ::ecsrelay::BalanceRequest* /*request*/, ::ecsrelay::BalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MinBalanceForPush(
      ::grpc::CallbackServerContext* /*context*/, const ::ecsrelay::BalanceRequest* /*request*/, ::ecsrelay::BalanceResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Authenticate<WithCallbackMethod_Revoke<WithCallbackMethod_Ping<WithCallbackMethod_CountAuthenticated<WithCallbackMethod_CountConnected<WithCallbackMethod_Subscribe<WithCallbackMethod_Unsubscribe<WithCallbackMethod_OpenStream<WithCallbackMethod_PushStream<WithCallbackMethod_Push<WithCallbackMethod_MinBalanceForPush<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Authenticate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Revoke : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Revoke() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Revoke() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Revoke(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CountAuthenticated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CountAuthenticated() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CountAuthenticated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountAuthenticated(::grpc::ServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CountConnected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CountConnected() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CountConnected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountConnected(::grpc::ServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OpenStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OpenStream() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_OpenStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenStream(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::grpc::ServerWriter< ::ecsrelay::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushStream() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PushStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ecsrelay::PushResponse, ::ecsrelay::PushRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Push() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Push(::grpc::ServerContext* /*context*/, const ::ecsrelay::PushRequest* /*request*/, ::ecsrelay::PushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MinBalanceForPush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MinBalanceForPush() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_MinBalanceForPush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MinBalanceForPush(::grpc::ServerContext* /*context*/, const ::ecsrelay::BalanceRequest* /*request*/, ::ecsrelay::BalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Authenticate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthenticate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Revoke : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Revoke() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Revoke() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Revoke(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRevoke(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CountAuthenticated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CountAuthenticated() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CountAuthenticated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountAuthenticated(::grpc::ServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCountAuthenticated(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CountConnected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CountConnected() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CountConnected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountConnected(::grpc::ServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCountConnected(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnsubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OpenStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OpenStream() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_OpenStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenStream(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::grpc::ServerWriter< ::ecsrelay::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOpenStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushStream() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_PushStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ecsrelay::PushResponse, ::ecsrelay::PushRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Push() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Push(::grpc::ServerContext* /*context*/, const ::ecsrelay::PushRequest* /*request*/, ::ecsrelay::PushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPush(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MinBalanceForPush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MinBalanceForPush() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_MinBalanceForPush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MinBalanceForPush(::grpc::ServerContext* /*context*/, const ::ecsrelay::BalanceRequest* /*request*/, ::ecsrelay::BalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMinBalanceForPush(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Authenticate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Authenticate(context, request, response); }));
    }
    ~WithRawCallbackMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Authenticate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Revoke : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Revoke() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Revoke(context, request, response); }));
    }
    ~WithRawCallbackMethod_Revoke() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Revoke(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Revoke(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~WithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CountAuthenticated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CountAuthenticated() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CountAuthenticated(context, request, response); }));
    }
    ~WithRawCallbackMethod_CountAuthenticated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountAuthenticated(::grpc::ServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CountAuthenticated(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CountConnected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CountConnected() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CountConnected(context, request, response); }));
    }
    ~WithRawCallbackMethod_CountConnected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CountConnected(::grpc::ServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CountConnected(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Subscribe(context, request, response); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Unsubscribe(context, request, response); }));
    }
    ~WithRawCallbackMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Unsubscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OpenStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OpenStream() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->OpenStream(context, request); }));
    }
    ~WithRawCallbackMethod_OpenStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OpenStream(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::grpc::ServerWriter< ::ecsrelay::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* OpenStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushStream() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->PushStream(context); }));
    }
    ~WithRawCallbackMethod_PushStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ecsrelay::PushResponse, ::ecsrelay::PushRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* PushStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Push() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Push(context, request, response); }));
    }
    ~WithRawCallbackMethod_Push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Push(::grpc::ServerContext* /*context*/, const ::ecsrelay::PushRequest* /*request*/, ::ecsrelay::PushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Push(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MinBalanceForPush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MinBalanceForPush() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MinBalanceForPush(context, request, response); }));
    }
    ~WithRawCallbackMethod_MinBalanceForPush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MinBalanceForPush(::grpc::ServerContext* /*context*/, const ::ecsrelay::BalanceRequest* /*request*/, ::ecsrelay::BalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MinBalanceForPush(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Authenticate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Authenticate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ecsrelay::Signature, ::ecsrelay::Identity>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ecsrelay::Signature, ::ecsrelay::Identity>* streamer) {
                       return this->StreamedAuthenticate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Authenticate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Authenticate(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthenticate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ecsrelay::Signature,::ecsrelay::Identity>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Revoke : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Revoke() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ecsrelay::Signature, ::ecsrelay::Identity>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ecsrelay::Signature, ::ecsrelay::Identity>* streamer) {
                       return this->StreamedRevoke(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Revoke() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Revoke(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRevoke(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ecsrelay::Signature,::ecsrelay::Identity>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ecsrelay::Signature, ::ecsrelay::Identity>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ecsrelay::Signature, ::ecsrelay::Identity>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::ecsrelay::Identity* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ecsrelay::Signature,::ecsrelay::Identity>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CountAuthenticated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CountAuthenticated() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse>* streamer) {
                       return this->StreamedCountAuthenticated(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CountAuthenticated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CountAuthenticated(::grpc::ServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCountAuthenticated(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ecsrelay::CountIdentitiesRequest,::ecsrelay::CountIdentitiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CountConnected : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CountConnected() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse>* streamer) {
                       return this->StreamedCountConnected(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CountConnected() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CountConnected(::grpc::ServerContext* /*context*/, const ::ecsrelay::CountIdentitiesRequest* /*request*/, ::ecsrelay::CountIdentitiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCountConnected(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ecsrelay::CountIdentitiesRequest,::ecsrelay::CountIdentitiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ecsrelay::SubscriptionRequest,::ecsrelay::Subscription>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription>* streamer) {
                       return this->StreamedUnsubscribe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::ecsrelay::SubscriptionRequest* /*request*/, ::ecsrelay::Subscription* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnsubscribe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ecsrelay::SubscriptionRequest,::ecsrelay::Subscription>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Push : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Push() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>* streamer) {
                       return this->StreamedPush(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Push() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Push(::grpc::ServerContext* /*context*/, const ::ecsrelay::PushRequest* /*request*/, ::ecsrelay::PushResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPush(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ecsrelay::PushRequest,::ecsrelay::PushResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MinBalanceForPush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MinBalanceForPush() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ecsrelay::BalanceRequest, ::ecsrelay::BalanceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ecsrelay::BalanceRequest, ::ecsrelay::BalanceResponse>* streamer) {
                       return this->StreamedMinBalanceForPush(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MinBalanceForPush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MinBalanceForPush(::grpc::ServerContext* /*context*/, const ::ecsrelay::BalanceRequest* /*request*/, ::ecsrelay::BalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMinBalanceForPush(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ecsrelay::BalanceRequest,::ecsrelay::BalanceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Authenticate<WithStreamedUnaryMethod_Revoke<WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_CountAuthenticated<WithStreamedUnaryMethod_CountConnected<WithStreamedUnaryMethod_Subscribe<WithStreamedUnaryMethod_Unsubscribe<WithStreamedUnaryMethod_Push<WithStreamedUnaryMethod_MinBalanceForPush<Service > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_OpenStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_OpenStream() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::ecsrelay::Signature, ::ecsrelay::Message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::ecsrelay::Signature, ::ecsrelay::Message>* streamer) {
                       return this->StreamedOpenStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_OpenStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OpenStream(::grpc::ServerContext* /*context*/, const ::ecsrelay::Signature* /*request*/, ::grpc::ServerWriter< ::ecsrelay::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedOpenStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::ecsrelay::Signature,::ecsrelay::Message>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_OpenStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Authenticate<WithStreamedUnaryMethod_Revoke<WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_CountAuthenticated<WithStreamedUnaryMethod_CountConnected<WithStreamedUnaryMethod_Subscribe<WithStreamedUnaryMethod_Unsubscribe<WithSplitStreamingMethod_OpenStream<WithStreamedUnaryMethod_Push<WithStreamedUnaryMethod_MinBalanceForPush<Service > > > > > > > > > > StreamedService;
};

}  // namespace ecsrelay


#endif  // GRPC_ecs_5frelay_2eproto__INCLUDED
