// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mode.proto
#ifndef GRPC_mode_2eproto__INCLUDED
#define GRPC_mode_2eproto__INCLUDED

#include "mode.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mode {

// ////////////////////////
//                      //
// Service definitions. //
//                      //
// ////////////////////////
//
class QueryLayer final {
 public:
  static constexpr char const* service_full_name() {
    return "mode.QueryLayer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get state endpoint.
    virtual ::grpc::Status GetState(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::mode::QueryLayerStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mode::QueryLayerStateResponse>> AsyncGetState(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mode::QueryLayerStateResponse>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mode::QueryLayerStateResponse>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mode::QueryLayerStateResponse>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    // Stream state endpoint.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mode::QueryLayerStateStreamResponse>> StreamState(::grpc::ClientContext* context, const ::mode::StateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mode::QueryLayerStateStreamResponse>>(StreamStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mode::QueryLayerStateStreamResponse>> AsyncStreamState(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mode::QueryLayerStateStreamResponse>>(AsyncStreamStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mode::QueryLayerStateStreamResponse>> PrepareAsyncStreamState(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mode::QueryLayerStateStreamResponse>>(PrepareAsyncStreamStateRaw(context, request, cq));
    }
    // Get state from single table endpoint.
    virtual ::grpc::Status Single__GetState(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::mode::QueryLayerStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mode::QueryLayerStateResponse>> AsyncSingle__GetState(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mode::QueryLayerStateResponse>>(AsyncSingle__GetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mode::QueryLayerStateResponse>> PrepareAsyncSingle__GetState(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mode::QueryLayerStateResponse>>(PrepareAsyncSingle__GetStateRaw(context, request, cq));
    }
    // Stream state from single table endpoint.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mode::QueryLayerStateStreamResponse>> Single__StreamState(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mode::QueryLayerStateStreamResponse>>(Single__StreamStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mode::QueryLayerStateStreamResponse>> AsyncSingle__StreamState(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mode::QueryLayerStateStreamResponse>>(AsyncSingle__StreamStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mode::QueryLayerStateStreamResponse>> PrepareAsyncSingle__StreamState(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mode::QueryLayerStateStreamResponse>>(PrepareAsyncSingle__StreamStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Get state endpoint.
      virtual void GetState(::grpc::ClientContext* context, const ::mode::StateRequest* request, ::mode::QueryLayerStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetState(::grpc::ClientContext* context, const ::mode::StateRequest* request, ::mode::QueryLayerStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stream state endpoint.
      virtual void StreamState(::grpc::ClientContext* context, const ::mode::StateRequest* request, ::grpc::ClientReadReactor< ::mode::QueryLayerStateStreamResponse>* reactor) = 0;
      // Get state from single table endpoint.
      virtual void Single__GetState(::grpc::ClientContext* context, const ::mode::Single__StateRequest* request, ::mode::QueryLayerStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Single__GetState(::grpc::ClientContext* context, const ::mode::Single__StateRequest* request, ::mode::QueryLayerStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stream state from single table endpoint.
      virtual void Single__StreamState(::grpc::ClientContext* context, const ::mode::Single__StateRequest* request, ::grpc::ClientReadReactor< ::mode::QueryLayerStateStreamResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mode::QueryLayerStateResponse>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mode::QueryLayerStateResponse>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mode::QueryLayerStateStreamResponse>* StreamStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mode::QueryLayerStateStreamResponse>* AsyncStreamStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mode::QueryLayerStateStreamResponse>* PrepareAsyncStreamStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mode::QueryLayerStateResponse>* AsyncSingle__GetStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mode::QueryLayerStateResponse>* PrepareAsyncSingle__GetStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mode::QueryLayerStateStreamResponse>* Single__StreamStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mode::QueryLayerStateStreamResponse>* AsyncSingle__StreamStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mode::QueryLayerStateStreamResponse>* PrepareAsyncSingle__StreamStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetState(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::mode::QueryLayerStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>> AsyncGetState(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mode::QueryLayerStateStreamResponse>> StreamState(::grpc::ClientContext* context, const ::mode::StateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mode::QueryLayerStateStreamResponse>>(StreamStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>> AsyncStreamState(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>>(AsyncStreamStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>> PrepareAsyncStreamState(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>>(PrepareAsyncStreamStateRaw(context, request, cq));
    }
    ::grpc::Status Single__GetState(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::mode::QueryLayerStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>> AsyncSingle__GetState(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>>(AsyncSingle__GetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>> PrepareAsyncSingle__GetState(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>>(PrepareAsyncSingle__GetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mode::QueryLayerStateStreamResponse>> Single__StreamState(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mode::QueryLayerStateStreamResponse>>(Single__StreamStateRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>> AsyncSingle__StreamState(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>>(AsyncSingle__StreamStateRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>> PrepareAsyncSingle__StreamState(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>>(PrepareAsyncSingle__StreamStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetState(::grpc::ClientContext* context, const ::mode::StateRequest* request, ::mode::QueryLayerStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetState(::grpc::ClientContext* context, const ::mode::StateRequest* request, ::mode::QueryLayerStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamState(::grpc::ClientContext* context, const ::mode::StateRequest* request, ::grpc::ClientReadReactor< ::mode::QueryLayerStateStreamResponse>* reactor) override;
      void Single__GetState(::grpc::ClientContext* context, const ::mode::Single__StateRequest* request, ::mode::QueryLayerStateResponse* response, std::function<void(::grpc::Status)>) override;
      void Single__GetState(::grpc::ClientContext* context, const ::mode::Single__StateRequest* request, ::mode::QueryLayerStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Single__StreamState(::grpc::ClientContext* context, const ::mode::Single__StateRequest* request, ::grpc::ClientReadReactor< ::mode::QueryLayerStateStreamResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mode::QueryLayerStateStreamResponse>* StreamStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request) override;
    ::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>* AsyncStreamStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>* PrepareAsyncStreamStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>* AsyncSingle__GetStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>* PrepareAsyncSingle__GetStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mode::QueryLayerStateStreamResponse>* Single__StreamStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request) override;
    ::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>* AsyncSingle__StreamStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>* PrepareAsyncSingle__StreamStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetState_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamState_;
    const ::grpc::internal::RpcMethod rpcmethod_Single__GetState_;
    const ::grpc::internal::RpcMethod rpcmethod_Single__StreamState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get state endpoint.
    virtual ::grpc::Status GetState(::grpc::ServerContext* context, const ::mode::StateRequest* request, ::mode::QueryLayerStateResponse* response);
    // Stream state endpoint.
    virtual ::grpc::Status StreamState(::grpc::ServerContext* context, const ::mode::StateRequest* request, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* writer);
    // Get state from single table endpoint.
    virtual ::grpc::Status Single__GetState(::grpc::ServerContext* context, const ::mode::Single__StateRequest* request, ::mode::QueryLayerStateResponse* response);
    // Stream state from single table endpoint.
    virtual ::grpc::Status Single__StreamState(::grpc::ServerContext* context, const ::mode::Single__StateRequest* request, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetState() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::mode::StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::mode::StateRequest* request, ::grpc::ServerAsyncResponseWriter< ::mode::QueryLayerStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamState() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamState(::grpc::ServerContext* /*context*/, const ::mode::StateRequest* /*request*/, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamState(::grpc::ServerContext* context, ::mode::StateRequest* request, ::grpc::ServerAsyncWriter< ::mode::QueryLayerStateStreamResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Single__GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Single__GetState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Single__GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Single__GetState(::grpc::ServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSingle__GetState(::grpc::ServerContext* context, ::mode::Single__StateRequest* request, ::grpc::ServerAsyncResponseWriter< ::mode::QueryLayerStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Single__StreamState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Single__StreamState() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Single__StreamState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Single__StreamState(::grpc::ServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSingle__StreamState(::grpc::ServerContext* context, ::mode::Single__StateRequest* request, ::grpc::ServerAsyncWriter< ::mode::QueryLayerStateStreamResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetState<WithAsyncMethod_StreamState<WithAsyncMethod_Single__GetState<WithAsyncMethod_Single__StreamState<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetState() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mode::StateRequest, ::mode::QueryLayerStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mode::StateRequest* request, ::mode::QueryLayerStateResponse* response) { return this->GetState(context, request, response); }));}
    void SetMessageAllocatorFor_GetState(
        ::grpc::MessageAllocator< ::mode::StateRequest, ::mode::QueryLayerStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mode::StateRequest, ::mode::QueryLayerStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::mode::StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetState(
      ::grpc::CallbackServerContext* /*context*/, const ::mode::StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamState() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mode::StateRequest, ::mode::QueryLayerStateStreamResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mode::StateRequest* request) { return this->StreamState(context, request); }));
    }
    ~WithCallbackMethod_StreamState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamState(::grpc::ServerContext* /*context*/, const ::mode::StateRequest* /*request*/, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mode::QueryLayerStateStreamResponse>* StreamState(
      ::grpc::CallbackServerContext* /*context*/, const ::mode::StateRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Single__GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Single__GetState() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mode::Single__StateRequest, ::mode::QueryLayerStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mode::Single__StateRequest* request, ::mode::QueryLayerStateResponse* response) { return this->Single__GetState(context, request, response); }));}
    void SetMessageAllocatorFor_Single__GetState(
        ::grpc::MessageAllocator< ::mode::Single__StateRequest, ::mode::QueryLayerStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mode::Single__StateRequest, ::mode::QueryLayerStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Single__GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Single__GetState(::grpc::ServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Single__GetState(
      ::grpc::CallbackServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Single__StreamState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Single__StreamState() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mode::Single__StateRequest, ::mode::QueryLayerStateStreamResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mode::Single__StateRequest* request) { return this->Single__StreamState(context, request); }));
    }
    ~WithCallbackMethod_Single__StreamState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Single__StreamState(::grpc::ServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mode::QueryLayerStateStreamResponse>* Single__StreamState(
      ::grpc::CallbackServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetState<WithCallbackMethod_StreamState<WithCallbackMethod_Single__GetState<WithCallbackMethod_Single__StreamState<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetState() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::mode::StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamState() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamState(::grpc::ServerContext* /*context*/, const ::mode::StateRequest* /*request*/, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Single__GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Single__GetState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Single__GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Single__GetState(::grpc::ServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Single__StreamState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Single__StreamState() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Single__StreamState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Single__StreamState(::grpc::ServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetState() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::mode::StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamState() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamState(::grpc::ServerContext* /*context*/, const ::mode::StateRequest* /*request*/, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Single__GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Single__GetState() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Single__GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Single__GetState(::grpc::ServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSingle__GetState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Single__StreamState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Single__StreamState() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Single__StreamState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Single__StreamState(::grpc::ServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSingle__StreamState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetState() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::mode::StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamState() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamState(context, request); }));
    }
    ~WithRawCallbackMethod_StreamState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamState(::grpc::ServerContext* /*context*/, const ::mode::StateRequest* /*request*/, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Single__GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Single__GetState() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Single__GetState(context, request, response); }));
    }
    ~WithRawCallbackMethod_Single__GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Single__GetState(::grpc::ServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Single__GetState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Single__StreamState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Single__StreamState() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Single__StreamState(context, request); }));
    }
    ~WithRawCallbackMethod_Single__StreamState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Single__StreamState(::grpc::ServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Single__StreamState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetState() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mode::StateRequest, ::mode::QueryLayerStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mode::StateRequest, ::mode::QueryLayerStateResponse>* streamer) {
                       return this->StreamedGetState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::mode::StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mode::StateRequest,::mode::QueryLayerStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Single__GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Single__GetState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mode::Single__StateRequest, ::mode::QueryLayerStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mode::Single__StateRequest, ::mode::QueryLayerStateResponse>* streamer) {
                       return this->StreamedSingle__GetState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Single__GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Single__GetState(::grpc::ServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/, ::mode::QueryLayerStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSingle__GetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mode::Single__StateRequest,::mode::QueryLayerStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetState<WithStreamedUnaryMethod_Single__GetState<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamState() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mode::StateRequest, ::mode::QueryLayerStateStreamResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mode::StateRequest, ::mode::QueryLayerStateStreamResponse>* streamer) {
                       return this->StreamedStreamState(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamState(::grpc::ServerContext* /*context*/, const ::mode::StateRequest* /*request*/, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamState(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mode::StateRequest,::mode::QueryLayerStateStreamResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Single__StreamState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Single__StreamState() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mode::Single__StateRequest, ::mode::QueryLayerStateStreamResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mode::Single__StateRequest, ::mode::QueryLayerStateStreamResponse>* streamer) {
                       return this->StreamedSingle__StreamState(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Single__StreamState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Single__StreamState(::grpc::ServerContext* /*context*/, const ::mode::Single__StateRequest* /*request*/, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSingle__StreamState(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mode::Single__StateRequest,::mode::QueryLayerStateStreamResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamState<WithSplitStreamingMethod_Single__StreamState<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetState<WithSplitStreamingMethod_StreamState<WithStreamedUnaryMethod_Single__GetState<WithSplitStreamingMethod_Single__StreamState<Service > > > > StreamedService;
};

}  // namespace mode


#endif  // GRPC_mode_2eproto__INCLUDED
