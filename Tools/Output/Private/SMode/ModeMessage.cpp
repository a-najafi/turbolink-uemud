//Generated by TurboLink CodeGenerator, do not edit!
#include "SMode/ModeMessage.h"
#include "SMode/ModeMarshaling.h"
#include "google/protobuf/util/json_util.h"

DEFINE_JSON_FUNCTIONS(FGrpcModeRow, ::mode::Row)
DEFINE_JSON_FUNCTIONS(FGrpcModeGenericTable, ::mode::GenericTable)
DEFINE_JSON_FUNCTIONS(FGrpcModeQueryLayerResponse, ::mode::QueryLayerResponse)
DEFINE_JSON_FUNCTIONS(FGrpcModeQueryLayerStateResponse, ::mode::QueryLayerStateResponse)
DEFINE_JSON_FUNCTIONS(FGrpcModeQueryLayerStateStreamResponse, ::mode::QueryLayerStateStreamResponse)
DEFINE_JSON_FUNCTIONS(FGrpcModeNamespace, ::mode::Namespace)
DEFINE_JSON_FUNCTIONS(FGrpcModeStateRequest, ::mode::StateRequest)
DEFINE_JSON_FUNCTIONS(FGrpcModeSingle__StateRequest, ::mode::Single__StateRequest)
DEFINE_JSON_FUNCTIONS(FGrpcModeFindRequest, ::mode::FindRequest)
DEFINE_JSON_FUNCTIONS(FGrpcModeFindAllRequest, ::mode::FindAllRequest)
DEFINE_JSON_FUNCTIONS(FGrpcModeJoinRequest, ::mode::JoinRequest)
DEFINE_JSON_FUNCTIONS(FGrpcModeDeleteRequest, ::mode::DeleteRequest)
DEFINE_JSON_FUNCTIONS(FGrpcModeUpdateRequest, ::mode::UpdateRequest)
DEFINE_JSON_FUNCTIONS(FGrpcModeInsertRequest, ::mode::InsertRequest)
DEFINE_JSON_FUNCTIONS(FGrpcModeCreateRequest, ::mode::CreateRequest)
DEFINE_JSON_FUNCTIONS(FGrpcModeFindRequestOptions, ::mode::FindRequestOptions)
DEFINE_JSON_FUNCTIONS(FGrpcModeField, ::mode::Field)
DEFINE_JSON_FUNCTIONS(FGrpcModeFieldPair, ::mode::FieldPair)
DEFINE_JSON_FUNCTIONS(FGrpcModeProjectedField, ::mode::ProjectedField)
DEFINE_JSON_FUNCTIONS(FGrpcModeFilter, ::mode::Filter)

FGrpcModeSingle__StateRequest UGrpcModeSingle__StateRequestHelperLibrary::MakeSingle__StateRequest( 
    FGrpcModeNamespace Namespace, FString Table, TArray<FGrpcModeFilter> Filter, 
    TArray<FGrpcModeProjectedField> Project 
)
{
    FGrpcModeSingle__StateRequest Single__StateRequest;
    Single__StateRequest.Namespace = Namespace;
    Single__StateRequest.Table = Table;
    for (const auto& element : Filter)
    {
        Single__StateRequest.Filter.Add(MakeShareable(new FGrpcModeFilter(element)));
    }
    for (const auto& element : Project)
    {
        Single__StateRequest.Project.Add(MakeShareable(new FGrpcModeProjectedField(element)));
    }

    return Single__StateRequest;
}

void UGrpcModeSingle__StateRequestHelperLibrary::BreakSingle__StateRequest(const FGrpcModeSingle__StateRequest& Single__StateRequest,  
    FGrpcModeNamespace& Namespace, FString& Table, TArray<FGrpcModeFilter>& Filter, 
    TArray<FGrpcModeProjectedField>& Project 
)
{
    Namespace = Single__StateRequest.Namespace;
    Table = Single__StateRequest.Table;
    for (auto& element : Single__StateRequest.Filter)
    {
        Filter.Add(*(element.Get()));
    }
    for (auto& element : Single__StateRequest.Project)
    {
        Project.Add(*(element.Get()));
    }
}

FGrpcModeFindRequest UGrpcModeFindRequestHelperLibrary::MakeFindRequest( 
    FString From, TArray<FGrpcModeFilter> Filter, TArray<FGrpcModeProjectedField> Project, 
    FGrpcModeNamespace Namespace, FGrpcModeFindRequestOptions Options 
)
{
    FGrpcModeFindRequest FindRequest;
    FindRequest.From = From;
    for (const auto& element : Filter)
    {
        FindRequest.Filter.Add(MakeShareable(new FGrpcModeFilter(element)));
    }
    for (const auto& element : Project)
    {
        FindRequest.Project.Add(MakeShareable(new FGrpcModeProjectedField(element)));
    }
    FindRequest.Namespace = Namespace;
    FindRequest.Options = MakeShareable(new FGrpcModeFindRequestOptions(Options));

    return FindRequest;
}

void UGrpcModeFindRequestHelperLibrary::BreakFindRequest(const FGrpcModeFindRequest& FindRequest,  
    FString& From, TArray<FGrpcModeFilter>& Filter, TArray<FGrpcModeProjectedField>& Project, 
    FGrpcModeNamespace& Namespace, FGrpcModeFindRequestOptions& Options 
)
{
    From = FindRequest.From;
    for (auto& element : FindRequest.Filter)
    {
        Filter.Add(*(element.Get()));
    }
    for (auto& element : FindRequest.Project)
    {
        Project.Add(*(element.Get()));
    }
    Namespace = FindRequest.Namespace;
    if(FindRequest.Options.Get()) 
    {
        Options = *(FindRequest.Options.Get());
    }
}

FGrpcModeFindAllRequest UGrpcModeFindAllRequestHelperLibrary::MakeFindAllRequest( 
    TArray<FString> Tables, FGrpcModeNamespace Namespace, FGrpcModeFindRequestOptions Options 
)
{
    FGrpcModeFindAllRequest FindAllRequest;
    FindAllRequest.Tables = Tables;
    FindAllRequest.Namespace = Namespace;
    FindAllRequest.Options = MakeShareable(new FGrpcModeFindRequestOptions(Options));

    return FindAllRequest;
}

void UGrpcModeFindAllRequestHelperLibrary::BreakFindAllRequest(const FGrpcModeFindAllRequest& FindAllRequest,  
    TArray<FString>& Tables, FGrpcModeNamespace& Namespace, FGrpcModeFindRequestOptions& Options 
)
{
    Tables = FindAllRequest.Tables;
    Namespace = FindAllRequest.Namespace;
    if(FindAllRequest.Options.Get()) 
    {
        Options = *(FindAllRequest.Options.Get());
    }
}

FGrpcModeJoinRequest UGrpcModeJoinRequestHelperLibrary::MakeJoinRequest( 
    FGrpcModeFieldPair On, TArray<FGrpcModeFindRequest> Children, FGrpcModeNamespace Namespace 
)
{
    FGrpcModeJoinRequest JoinRequest;
    JoinRequest.On = MakeShareable(new FGrpcModeFieldPair(On));
    JoinRequest.Children = Children;
    JoinRequest.Namespace = Namespace;

    return JoinRequest;
}

void UGrpcModeJoinRequestHelperLibrary::BreakJoinRequest(const FGrpcModeJoinRequest& JoinRequest,  
    FGrpcModeFieldPair& On, TArray<FGrpcModeFindRequest>& Children, FGrpcModeNamespace& Namespace 
)
{
    if(JoinRequest.On.Get()) 
    {
        On = *(JoinRequest.On.Get());
    }
    Children = JoinRequest.Children;
    Namespace = JoinRequest.Namespace;
}

FGrpcModeDeleteRequest UGrpcModeDeleteRequestHelperLibrary::MakeDeleteRequest( 
    FString From, TArray<FGrpcModeFilter> Filter 
)
{
    FGrpcModeDeleteRequest DeleteRequest;
    DeleteRequest.From = From;
    for (const auto& element : Filter)
    {
        DeleteRequest.Filter.Add(MakeShareable(new FGrpcModeFilter(element)));
    }

    return DeleteRequest;
}

void UGrpcModeDeleteRequestHelperLibrary::BreakDeleteRequest(const FGrpcModeDeleteRequest& DeleteRequest,  
    FString& From, TArray<FGrpcModeFilter>& Filter 
)
{
    From = DeleteRequest.From;
    for (auto& element : DeleteRequest.Filter)
    {
        Filter.Add(*(element.Get()));
    }
}

FGrpcModeUpdateRequest UGrpcModeUpdateRequestHelperLibrary::MakeUpdateRequest( 
    FString Target, TArray<FGrpcModeFilter> Filter, TMap<FString, FString> Row 
)
{
    FGrpcModeUpdateRequest UpdateRequest;
    UpdateRequest.Target = Target;
    for (const auto& element : Filter)
    {
        UpdateRequest.Filter.Add(MakeShareable(new FGrpcModeFilter(element)));
    }
    UpdateRequest.Row = Row;

    return UpdateRequest;
}

void UGrpcModeUpdateRequestHelperLibrary::BreakUpdateRequest(const FGrpcModeUpdateRequest& UpdateRequest,  
    FString& Target, TArray<FGrpcModeFilter>& Filter, TMap<FString, FString>& Row 
)
{
    Target = UpdateRequest.Target;
    for (auto& element : UpdateRequest.Filter)
    {
        Filter.Add(*(element.Get()));
    }
    Row = UpdateRequest.Row;
}

FGrpcModeProjectedField_rename UGrpcModeProjectedField_renameHelperLibrary::Make_rename(EGrpcModeProjectedField_rename _renameCase, 
    FString Rename 
)
{
    FGrpcModeProjectedField_rename _rename;
    _rename._renameCase = _renameCase;
    _rename.Rename = Rename;

    return _rename;
}

void UGrpcModeProjectedField_renameHelperLibrary::Break_rename(const FGrpcModeProjectedField_rename& _rename, EGrpcModeProjectedField_rename& _renameCase, 
    FString& Rename 
)
{
    _renameCase = _rename._renameCase;
    Rename = _rename.Rename;
}

