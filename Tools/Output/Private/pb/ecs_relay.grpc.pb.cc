// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ecs_relay.proto

#include "ecs_relay.pb.h"
#include "ecs_relay.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ecsrelay {

static const char* ECSRelayService_method_names[] = {
  "/ecsrelay.ECSRelayService/Authenticate",
  "/ecsrelay.ECSRelayService/Revoke",
  "/ecsrelay.ECSRelayService/Ping",
  "/ecsrelay.ECSRelayService/CountAuthenticated",
  "/ecsrelay.ECSRelayService/CountConnected",
  "/ecsrelay.ECSRelayService/Subscribe",
  "/ecsrelay.ECSRelayService/Unsubscribe",
  "/ecsrelay.ECSRelayService/OpenStream",
  "/ecsrelay.ECSRelayService/PushStream",
  "/ecsrelay.ECSRelayService/Push",
  "/ecsrelay.ECSRelayService/MinBalanceForPush",
};

std::unique_ptr< ECSRelayService::Stub> ECSRelayService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ECSRelayService::Stub> stub(new ECSRelayService::Stub(channel, options));
  return stub;
}

ECSRelayService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Authenticate_(ECSRelayService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Revoke_(ECSRelayService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ping_(ECSRelayService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CountAuthenticated_(ECSRelayService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CountConnected_(ECSRelayService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subscribe_(ECSRelayService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unsubscribe_(ECSRelayService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenStream_(ECSRelayService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PushStream_(ECSRelayService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Push_(ECSRelayService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MinBalanceForPush_(ECSRelayService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ECSRelayService::Stub::Authenticate(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::ecsrelay::Identity* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ecsrelay::Signature, ::ecsrelay::Identity, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Authenticate_, context, request, response);
}

void ECSRelayService::Stub::async::Authenticate(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ecsrelay::Signature, ::ecsrelay::Identity, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, std::move(f));
}

void ECSRelayService::Stub::async::Authenticate(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Authenticate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>* ECSRelayService::Stub::PrepareAsyncAuthenticateRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ecsrelay::Identity, ::ecsrelay::Signature, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Authenticate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>* ECSRelayService::Stub::AsyncAuthenticateRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuthenticateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ECSRelayService::Stub::Revoke(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::ecsrelay::Identity* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ecsrelay::Signature, ::ecsrelay::Identity, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Revoke_, context, request, response);
}

void ECSRelayService::Stub::async::Revoke(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ecsrelay::Signature, ::ecsrelay::Identity, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Revoke_, context, request, response, std::move(f));
}

void ECSRelayService::Stub::async::Revoke(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Revoke_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>* ECSRelayService::Stub::PrepareAsyncRevokeRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ecsrelay::Identity, ::ecsrelay::Signature, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Revoke_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>* ECSRelayService::Stub::AsyncRevokeRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRevokeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ECSRelayService::Stub::Ping(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::ecsrelay::Identity* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ecsrelay::Signature, ::ecsrelay::Identity, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void ECSRelayService::Stub::async::Ping(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ecsrelay::Signature, ::ecsrelay::Identity, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void ECSRelayService::Stub::async::Ping(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>* ECSRelayService::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ecsrelay::Identity, ::ecsrelay::Signature, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::Identity>* ECSRelayService::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ECSRelayService::Stub::CountAuthenticated(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::ecsrelay::CountIdentitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CountAuthenticated_, context, request, response);
}

void ECSRelayService::Stub::async::CountAuthenticated(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CountAuthenticated_, context, request, response, std::move(f));
}

void ECSRelayService::Stub::async::CountAuthenticated(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CountAuthenticated_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>* ECSRelayService::Stub::PrepareAsyncCountAuthenticatedRaw(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ecsrelay::CountIdentitiesResponse, ::ecsrelay::CountIdentitiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CountAuthenticated_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>* ECSRelayService::Stub::AsyncCountAuthenticatedRaw(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCountAuthenticatedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ECSRelayService::Stub::CountConnected(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::ecsrelay::CountIdentitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CountConnected_, context, request, response);
}

void ECSRelayService::Stub::async::CountConnected(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CountConnected_, context, request, response, std::move(f));
}

void ECSRelayService::Stub::async::CountConnected(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CountConnected_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>* ECSRelayService::Stub::PrepareAsyncCountConnectedRaw(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ecsrelay::CountIdentitiesResponse, ::ecsrelay::CountIdentitiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CountConnected_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::CountIdentitiesResponse>* ECSRelayService::Stub::AsyncCountConnectedRaw(::grpc::ClientContext* context, const ::ecsrelay::CountIdentitiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCountConnectedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ECSRelayService::Stub::Subscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::ecsrelay::Subscription* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Subscribe_, context, request, response);
}

void ECSRelayService::Stub::async::Subscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, response, std::move(f));
}

void ECSRelayService::Stub::async::Subscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>* ECSRelayService::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ecsrelay::Subscription, ::ecsrelay::SubscriptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Subscribe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>* ECSRelayService::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubscribeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ECSRelayService::Stub::Unsubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::ecsrelay::Subscription* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Unsubscribe_, context, request, response);
}

void ECSRelayService::Stub::async::Unsubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unsubscribe_, context, request, response, std::move(f));
}

void ECSRelayService::Stub::async::Unsubscribe(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unsubscribe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>* ECSRelayService::Stub::PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ecsrelay::Subscription, ::ecsrelay::SubscriptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Unsubscribe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::Subscription>* ECSRelayService::Stub::AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::ecsrelay::SubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnsubscribeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::ecsrelay::Message>* ECSRelayService::Stub::OpenStreamRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request) {
  return ::grpc::internal::ClientReaderFactory< ::ecsrelay::Message>::Create(channel_.get(), rpcmethod_OpenStream_, context, request);
}

void ECSRelayService::Stub::async::OpenStream(::grpc::ClientContext* context, const ::ecsrelay::Signature* request, ::grpc::ClientReadReactor< ::ecsrelay::Message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ecsrelay::Message>::Create(stub_->channel_.get(), stub_->rpcmethod_OpenStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ecsrelay::Message>* ECSRelayService::Stub::AsyncOpenStreamRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ecsrelay::Message>::Create(channel_.get(), cq, rpcmethod_OpenStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ecsrelay::Message>* ECSRelayService::Stub::PrepareAsyncOpenStreamRaw(::grpc::ClientContext* context, const ::ecsrelay::Signature& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ecsrelay::Message>::Create(channel_.get(), cq, rpcmethod_OpenStream_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>* ECSRelayService::Stub::PushStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>::Create(channel_.get(), rpcmethod_PushStream_, context);
}

void ECSRelayService::Stub::async::PushStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::ecsrelay::PushRequest,::ecsrelay::PushResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::ecsrelay::PushRequest,::ecsrelay::PushResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_PushStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>* ECSRelayService::Stub::AsyncPushStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>::Create(channel_.get(), cq, rpcmethod_PushStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>* ECSRelayService::Stub::PrepareAsyncPushStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>::Create(channel_.get(), cq, rpcmethod_PushStream_, context, false, nullptr);
}

::grpc::Status ECSRelayService::Stub::Push(::grpc::ClientContext* context, const ::ecsrelay::PushRequest& request, ::ecsrelay::PushResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Push_, context, request, response);
}

void ECSRelayService::Stub::async::Push(::grpc::ClientContext* context, const ::ecsrelay::PushRequest* request, ::ecsrelay::PushResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ecsrelay::PushRequest, ::ecsrelay::PushResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Push_, context, request, response, std::move(f));
}

void ECSRelayService::Stub::async::Push(::grpc::ClientContext* context, const ::ecsrelay::PushRequest* request, ::ecsrelay::PushResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Push_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::PushResponse>* ECSRelayService::Stub::PrepareAsyncPushRaw(::grpc::ClientContext* context, const ::ecsrelay::PushRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ecsrelay::PushResponse, ::ecsrelay::PushRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Push_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::PushResponse>* ECSRelayService::Stub::AsyncPushRaw(::grpc::ClientContext* context, const ::ecsrelay::PushRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ECSRelayService::Stub::MinBalanceForPush(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest& request, ::ecsrelay::BalanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ecsrelay::BalanceRequest, ::ecsrelay::BalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MinBalanceForPush_, context, request, response);
}

void ECSRelayService::Stub::async::MinBalanceForPush(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest* request, ::ecsrelay::BalanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ecsrelay::BalanceRequest, ::ecsrelay::BalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MinBalanceForPush_, context, request, response, std::move(f));
}

void ECSRelayService::Stub::async::MinBalanceForPush(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest* request, ::ecsrelay::BalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MinBalanceForPush_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::BalanceResponse>* ECSRelayService::Stub::PrepareAsyncMinBalanceForPushRaw(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ecsrelay::BalanceResponse, ::ecsrelay::BalanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MinBalanceForPush_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ecsrelay::BalanceResponse>* ECSRelayService::Stub::AsyncMinBalanceForPushRaw(::grpc::ClientContext* context, const ::ecsrelay::BalanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMinBalanceForPushRaw(context, request, cq);
  result->StartCall();
  return result;
}

ECSRelayService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSRelayService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ECSRelayService::Service, ::ecsrelay::Signature, ::ecsrelay::Identity, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ECSRelayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecsrelay::Signature* req,
             ::ecsrelay::Identity* resp) {
               return service->Authenticate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSRelayService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ECSRelayService::Service, ::ecsrelay::Signature, ::ecsrelay::Identity, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ECSRelayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecsrelay::Signature* req,
             ::ecsrelay::Identity* resp) {
               return service->Revoke(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSRelayService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ECSRelayService::Service, ::ecsrelay::Signature, ::ecsrelay::Identity, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ECSRelayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecsrelay::Signature* req,
             ::ecsrelay::Identity* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSRelayService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ECSRelayService::Service, ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ECSRelayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecsrelay::CountIdentitiesRequest* req,
             ::ecsrelay::CountIdentitiesResponse* resp) {
               return service->CountAuthenticated(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSRelayService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ECSRelayService::Service, ::ecsrelay::CountIdentitiesRequest, ::ecsrelay::CountIdentitiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ECSRelayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecsrelay::CountIdentitiesRequest* req,
             ::ecsrelay::CountIdentitiesResponse* resp) {
               return service->CountConnected(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSRelayService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ECSRelayService::Service, ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ECSRelayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecsrelay::SubscriptionRequest* req,
             ::ecsrelay::Subscription* resp) {
               return service->Subscribe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSRelayService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ECSRelayService::Service, ::ecsrelay::SubscriptionRequest, ::ecsrelay::Subscription, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ECSRelayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecsrelay::SubscriptionRequest* req,
             ::ecsrelay::Subscription* resp) {
               return service->Unsubscribe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSRelayService_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ECSRelayService::Service, ::ecsrelay::Signature, ::ecsrelay::Message>(
          [](ECSRelayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecsrelay::Signature* req,
             ::grpc::ServerWriter<::ecsrelay::Message>* writer) {
               return service->OpenStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSRelayService_method_names[8],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ECSRelayService::Service, ::ecsrelay::PushRequest, ::ecsrelay::PushResponse>(
          [](ECSRelayService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::ecsrelay::PushResponse,
             ::ecsrelay::PushRequest>* stream) {
               return service->PushStream(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSRelayService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ECSRelayService::Service, ::ecsrelay::PushRequest, ::ecsrelay::PushResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ECSRelayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecsrelay::PushRequest* req,
             ::ecsrelay::PushResponse* resp) {
               return service->Push(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSRelayService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ECSRelayService::Service, ::ecsrelay::BalanceRequest, ::ecsrelay::BalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ECSRelayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecsrelay::BalanceRequest* req,
             ::ecsrelay::BalanceResponse* resp) {
               return service->MinBalanceForPush(ctx, req, resp);
             }, this)));
}

ECSRelayService::Service::~Service() {
}

::grpc::Status ECSRelayService::Service::Authenticate(::grpc::ServerContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSRelayService::Service::Revoke(::grpc::ServerContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSRelayService::Service::Ping(::grpc::ServerContext* context, const ::ecsrelay::Signature* request, ::ecsrelay::Identity* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSRelayService::Service::CountAuthenticated(::grpc::ServerContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSRelayService::Service::CountConnected(::grpc::ServerContext* context, const ::ecsrelay::CountIdentitiesRequest* request, ::ecsrelay::CountIdentitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSRelayService::Service::Subscribe(::grpc::ServerContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSRelayService::Service::Unsubscribe(::grpc::ServerContext* context, const ::ecsrelay::SubscriptionRequest* request, ::ecsrelay::Subscription* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSRelayService::Service::OpenStream(::grpc::ServerContext* context, const ::ecsrelay::Signature* request, ::grpc::ServerWriter< ::ecsrelay::Message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSRelayService::Service::PushStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ecsrelay::PushResponse, ::ecsrelay::PushRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSRelayService::Service::Push(::grpc::ServerContext* context, const ::ecsrelay::PushRequest* request, ::ecsrelay::PushResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSRelayService::Service::MinBalanceForPush(::grpc::ServerContext* context, const ::ecsrelay::BalanceRequest* request, ::ecsrelay::BalanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ecsrelay

