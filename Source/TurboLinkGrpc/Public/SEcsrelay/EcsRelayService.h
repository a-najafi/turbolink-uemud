//Generated by TurboLink CodeGenerator, do not edit!
#pragma once
#include "TurboLinkGrpcService.h"
#include "SEcsrelay/EcsRelayClient.h"
#include "EcsRelayService.generated.h"

class UTurboLinkGrpcManager;

UCLASS(ClassGroup = TurboLink, BlueprintType)
class TURBOLINKGRPC_API UECSRelayService : public UGrpcService
{
	GENERATED_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = TurboLink)
	virtual void Connect() override;
	
	UFUNCTION(BlueprintCallable, Category = TurboLink)
	virtual EGrpcServiceState GetServiceState() const override;

	UFUNCTION(BlueprintCallable, Category = TurboLink)
	UECSRelayServiceClient* MakeClient();

private:
	virtual void Shutdown() override;

	UPROPERTY()
	UECSRelayServiceClient* InnerClient; 
public:
	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcEcsrelayIdentity& Response)> FAuthenticateResponseLambda;
	void CallAuthenticate(const FGrpcEcsrelaySignature& Request, FAuthenticateResponseLambda ResponseLambda);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcEcsrelayIdentity& Response)> FRevokeResponseLambda;
	void CallRevoke(const FGrpcEcsrelaySignature& Request, FRevokeResponseLambda ResponseLambda);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcEcsrelayIdentity& Response)> FPingResponseLambda;
	void CallPing(const FGrpcEcsrelaySignature& Request, FPingResponseLambda ResponseLambda);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcEcsrelayCountIdentitiesResponse& Response)> FCountAuthenticatedResponseLambda;
	void CallCountAuthenticated(const FGrpcEcsrelayCountIdentitiesRequest& Request, FCountAuthenticatedResponseLambda ResponseLambda);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcEcsrelayCountIdentitiesResponse& Response)> FCountConnectedResponseLambda;
	void CallCountConnected(const FGrpcEcsrelayCountIdentitiesRequest& Request, FCountConnectedResponseLambda ResponseLambda);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcEcsrelaySubscription& Response)> FSubscribeResponseLambda;
	void CallSubscribe(const FGrpcEcsrelaySubscriptionRequest& Request, FSubscribeResponseLambda ResponseLambda);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcEcsrelaySubscription& Response)> FUnsubscribeResponseLambda;
	void CallUnsubscribe(const FGrpcEcsrelaySubscriptionRequest& Request, FUnsubscribeResponseLambda ResponseLambda);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcEcsrelayMessage& Response)> FOpenStreamResponseLambda;
	typedef TFunction<void()> FOpenStreamFinishLambda;
	void CallOpenStream(const FGrpcEcsrelaySignature& Request, FOpenStreamResponseLambda ResponseLambda, FOpenStreamFinishLambda FinishLambda);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcEcsrelayPushResponse& Response)> FPushResponseLambda;
	void CallPush(const FGrpcEcsrelayPushRequest& Request, FPushResponseLambda ResponseLambda);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcEcsrelayBalanceResponse& Response)> FMinBalanceForPushResponseLambda;
	void CallMinBalanceForPush(const FGrpcEcsrelayBalanceRequest& Request, FMinBalanceForPushResponseLambda ResponseLambda);

public:
	class Private;
	Private* const d = nullptr;

public:
	UECSRelayService();
	virtual ~UECSRelayService();
};

