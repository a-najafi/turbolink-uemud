//Generated by TurboLink CodeGenerator, do not edit!
#include "SFaucet/FaucetService.h"
#include "SFaucet/FaucetClient.h"
#include "FaucetService_Private.h"
#include "FaucetMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UFaucetService::UFaucetService()
	: d(new UFaucetService::Private())
{
}

UFaucetService::~UFaucetService()
{
	delete d;
}

void UFaucetService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("FaucetService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to FaucetService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = faucet::FaucetService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UFaucetService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UFaucetServiceClient* UFaucetService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UFaucetServiceClient>();
	return client;
}

void UFaucetService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UFaucetService::CallDrip(const FGrpcFaucetDripRequest& Request, FDripResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UFaucetServiceDripLambdaWrapper* lambdaWrapper = NewObject<UFaucetServiceDripLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitDrip();
	InnerClient->OnDripResponse.AddUniqueDynamic(lambdaWrapper, &UFaucetServiceDripLambdaWrapper::OnResponse);
	InnerClient->Drip(lambdaWrapper->Handle, Request);
}

void UFaucetService::CallDripDev(const FGrpcFaucetDripDevRequest& Request, FDripDevResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UFaucetServiceDripDevLambdaWrapper* lambdaWrapper = NewObject<UFaucetServiceDripDevLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitDripDev();
	InnerClient->OnDripDevResponse.AddUniqueDynamic(lambdaWrapper, &UFaucetServiceDripDevLambdaWrapper::OnResponse);
	InnerClient->DripDev(lambdaWrapper->Handle, Request);
}

void UFaucetService::CallDripVerifyTweet(const FGrpcFaucetDripRequest& Request, FDripVerifyTweetResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UFaucetServiceDripVerifyTweetLambdaWrapper* lambdaWrapper = NewObject<UFaucetServiceDripVerifyTweetLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitDripVerifyTweet();
	InnerClient->OnDripVerifyTweetResponse.AddUniqueDynamic(lambdaWrapper, &UFaucetServiceDripVerifyTweetLambdaWrapper::OnResponse);
	InnerClient->DripVerifyTweet(lambdaWrapper->Handle, Request);
}

void UFaucetService::CallTimeUntilDrip(const FGrpcFaucetDripRequest& Request, FTimeUntilDripResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UFaucetServiceTimeUntilDripLambdaWrapper* lambdaWrapper = NewObject<UFaucetServiceTimeUntilDripLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitTimeUntilDrip();
	InnerClient->OnTimeUntilDripResponse.AddUniqueDynamic(lambdaWrapper, &UFaucetServiceTimeUntilDripLambdaWrapper::OnResponse);
	InnerClient->TimeUntilDrip(lambdaWrapper->Handle, Request);
}

void UFaucetService::CallGetLinkedTwitters(const FGrpcFaucetGetLinkedTwittersRequest& Request, FGetLinkedTwittersResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UFaucetServiceGetLinkedTwittersLambdaWrapper* lambdaWrapper = NewObject<UFaucetServiceGetLinkedTwittersLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetLinkedTwitters();
	InnerClient->OnGetLinkedTwittersResponse.AddUniqueDynamic(lambdaWrapper, &UFaucetServiceGetLinkedTwittersLambdaWrapper::OnResponse);
	InnerClient->GetLinkedTwitters(lambdaWrapper->Handle, Request);
}

void UFaucetService::CallGetLinkedTwitterForAddress(const FGrpcFaucetLinkedTwitterForAddressRequest& Request, FGetLinkedTwitterForAddressResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UFaucetServiceGetLinkedTwitterForAddressLambdaWrapper* lambdaWrapper = NewObject<UFaucetServiceGetLinkedTwitterForAddressLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetLinkedTwitterForAddress();
	InnerClient->OnGetLinkedTwitterForAddressResponse.AddUniqueDynamic(lambdaWrapper, &UFaucetServiceGetLinkedTwitterForAddressLambdaWrapper::OnResponse);
	InnerClient->GetLinkedTwitterForAddress(lambdaWrapper->Handle, Request);
}

void UFaucetService::CallGetLinkedAddressForTwitter(const FGrpcFaucetLinkedAddressForTwitterRequest& Request, FGetLinkedAddressForTwitterResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UFaucetServiceGetLinkedAddressForTwitterLambdaWrapper* lambdaWrapper = NewObject<UFaucetServiceGetLinkedAddressForTwitterLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetLinkedAddressForTwitter();
	InnerClient->OnGetLinkedAddressForTwitterResponse.AddUniqueDynamic(lambdaWrapper, &UFaucetServiceGetLinkedAddressForTwitterLambdaWrapper::OnResponse);
	InnerClient->GetLinkedAddressForTwitter(lambdaWrapper->Handle, Request);
}

void UFaucetService::CallSetLinkedTwitter(const FGrpcFaucetSetLinkedTwitterRequest& Request, FSetLinkedTwitterResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UFaucetServiceSetLinkedTwitterLambdaWrapper* lambdaWrapper = NewObject<UFaucetServiceSetLinkedTwitterLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitSetLinkedTwitter();
	InnerClient->OnSetLinkedTwitterResponse.AddUniqueDynamic(lambdaWrapper, &UFaucetServiceSetLinkedTwitterLambdaWrapper::OnResponse);
	InnerClient->SetLinkedTwitter(lambdaWrapper->Handle, Request);
}
