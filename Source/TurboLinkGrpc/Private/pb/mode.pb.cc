#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mode.proto

#include "mode.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace mode {
constexpr Row::Row(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct RowDefaultTypeInternal {
  constexpr RowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RowDefaultTypeInternal() {}
  union {
    Row _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RowDefaultTypeInternal _Row_default_instance_;
constexpr GenericTable::GenericTable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cols_()
  , rows_()
  , types_(){}
struct GenericTableDefaultTypeInternal {
  constexpr GenericTableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenericTableDefaultTypeInternal() {}
  union {
    GenericTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenericTableDefaultTypeInternal _GenericTable_default_instance_;
constexpr QueryLayerResponse_TablesEntry_DoNotUse::QueryLayerResponse_TablesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct QueryLayerResponse_TablesEntry_DoNotUseDefaultTypeInternal {
  constexpr QueryLayerResponse_TablesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryLayerResponse_TablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    QueryLayerResponse_TablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryLayerResponse_TablesEntry_DoNotUseDefaultTypeInternal _QueryLayerResponse_TablesEntry_DoNotUse_default_instance_;
constexpr QueryLayerResponse::QueryLayerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tables_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct QueryLayerResponseDefaultTypeInternal {
  constexpr QueryLayerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryLayerResponseDefaultTypeInternal() {}
  union {
    QueryLayerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryLayerResponseDefaultTypeInternal _QueryLayerResponse_default_instance_;
constexpr QueryLayerStateResponse_ChainTablesEntry_DoNotUse::QueryLayerStateResponse_ChainTablesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct QueryLayerStateResponse_ChainTablesEntry_DoNotUseDefaultTypeInternal {
  constexpr QueryLayerStateResponse_ChainTablesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryLayerStateResponse_ChainTablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    QueryLayerStateResponse_ChainTablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryLayerStateResponse_ChainTablesEntry_DoNotUseDefaultTypeInternal _QueryLayerStateResponse_ChainTablesEntry_DoNotUse_default_instance_;
constexpr QueryLayerStateResponse_WorldTablesEntry_DoNotUse::QueryLayerStateResponse_WorldTablesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct QueryLayerStateResponse_WorldTablesEntry_DoNotUseDefaultTypeInternal {
  constexpr QueryLayerStateResponse_WorldTablesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryLayerStateResponse_WorldTablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    QueryLayerStateResponse_WorldTablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryLayerStateResponse_WorldTablesEntry_DoNotUseDefaultTypeInternal _QueryLayerStateResponse_WorldTablesEntry_DoNotUse_default_instance_;
constexpr QueryLayerStateResponse::QueryLayerStateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chaintables_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , worldtables_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct QueryLayerStateResponseDefaultTypeInternal {
  constexpr QueryLayerStateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryLayerStateResponseDefaultTypeInternal() {}
  union {
    QueryLayerStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryLayerStateResponseDefaultTypeInternal _QueryLayerStateResponse_default_instance_;
constexpr QueryLayerStateStreamResponse::QueryLayerStateStreamResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inserted_(nullptr)
  , updated_(nullptr)
  , deleted_(nullptr){}
struct QueryLayerStateStreamResponseDefaultTypeInternal {
  constexpr QueryLayerStateStreamResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryLayerStateStreamResponseDefaultTypeInternal() {}
  union {
    QueryLayerStateStreamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryLayerStateStreamResponseDefaultTypeInternal _QueryLayerStateStreamResponse_default_instance_;
constexpr Namespace::Namespace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chainid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , worldaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NamespaceDefaultTypeInternal {
  constexpr NamespaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamespaceDefaultTypeInternal() {}
  union {
    Namespace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamespaceDefaultTypeInternal _Namespace_default_instance_;
constexpr StateRequest::StateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldtables_()
  , chaintables_()
  , namespace__(nullptr){}
struct StateRequestDefaultTypeInternal {
  constexpr StateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StateRequestDefaultTypeInternal() {}
  union {
    StateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StateRequestDefaultTypeInternal _StateRequest_default_instance_;
constexpr Single__StateRequest::Single__StateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_()
  , project_()
  , table_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(nullptr){}
struct Single__StateRequestDefaultTypeInternal {
  constexpr Single__StateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Single__StateRequestDefaultTypeInternal() {}
  union {
    Single__StateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Single__StateRequestDefaultTypeInternal _Single__StateRequest_default_instance_;
constexpr FindRequest::FindRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_()
  , project_()
  , from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(nullptr)
  , options_(nullptr){}
struct FindRequestDefaultTypeInternal {
  constexpr FindRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindRequestDefaultTypeInternal() {}
  union {
    FindRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindRequestDefaultTypeInternal _FindRequest_default_instance_;
constexpr FindAllRequest::FindAllRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tables_()
  , namespace__(nullptr)
  , options_(nullptr){}
struct FindAllRequestDefaultTypeInternal {
  constexpr FindAllRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindAllRequestDefaultTypeInternal() {}
  union {
    FindAllRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindAllRequestDefaultTypeInternal _FindAllRequest_default_instance_;
constexpr JoinRequest::JoinRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : children_()
  , on_(nullptr)
  , namespace__(nullptr){}
struct JoinRequestDefaultTypeInternal {
  constexpr JoinRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinRequestDefaultTypeInternal() {}
  union {
    JoinRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinRequestDefaultTypeInternal _JoinRequest_default_instance_;
constexpr DeleteRequest::DeleteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_()
  , from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteRequestDefaultTypeInternal {
  constexpr DeleteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteRequestDefaultTypeInternal() {}
  union {
    DeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
constexpr UpdateRequest_RowEntry_DoNotUse::UpdateRequest_RowEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UpdateRequest_RowEntry_DoNotUseDefaultTypeInternal {
  constexpr UpdateRequest_RowEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateRequest_RowEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UpdateRequest_RowEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateRequest_RowEntry_DoNotUseDefaultTypeInternal _UpdateRequest_RowEntry_DoNotUse_default_instance_;
constexpr UpdateRequest::UpdateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_()
  , row_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , target_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateRequestDefaultTypeInternal {
  constexpr UpdateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateRequestDefaultTypeInternal() {}
  union {
    UpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
constexpr InsertRequest_RowEntry_DoNotUse::InsertRequest_RowEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct InsertRequest_RowEntry_DoNotUseDefaultTypeInternal {
  constexpr InsertRequest_RowEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertRequest_RowEntry_DoNotUseDefaultTypeInternal() {}
  union {
    InsertRequest_RowEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertRequest_RowEntry_DoNotUseDefaultTypeInternal _InsertRequest_RowEntry_DoNotUse_default_instance_;
constexpr InsertRequest::InsertRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , into_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InsertRequestDefaultTypeInternal {
  constexpr InsertRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertRequestDefaultTypeInternal() {}
  union {
    InsertRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
constexpr CreateRequest::CreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateRequestDefaultTypeInternal {
  constexpr CreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRequestDefaultTypeInternal() {}
  union {
    CreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
constexpr FindRequestOptions::FindRequestOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compressed_(false)
  , group_(false)
  , negate_(false){}
struct FindRequestOptionsDefaultTypeInternal {
  constexpr FindRequestOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FindRequestOptionsDefaultTypeInternal() {}
  union {
    FindRequestOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FindRequestOptionsDefaultTypeInternal _FindRequestOptions_default_instance_;
constexpr Field::Field(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_field_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FieldDefaultTypeInternal {
  constexpr FieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldDefaultTypeInternal() {}
  union {
    Field _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldDefaultTypeInternal _Field_default_instance_;
constexpr FieldPair::FieldPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field1_(nullptr)
  , field2_(nullptr){}
struct FieldPairDefaultTypeInternal {
  constexpr FieldPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldPairDefaultTypeInternal() {}
  union {
    FieldPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldPairDefaultTypeInternal _FieldPair_default_instance_;
constexpr ProjectedField::ProjectedField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , field_(nullptr){}
struct ProjectedFieldDefaultTypeInternal {
  constexpr ProjectedFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProjectedFieldDefaultTypeInternal() {}
  union {
    ProjectedField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProjectedFieldDefaultTypeInternal _ProjectedField_default_instance_;
constexpr Filter::Filter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : operator__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , function_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , field_(nullptr){}
struct FilterDefaultTypeInternal {
  constexpr FilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilterDefaultTypeInternal() {}
  union {
    Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilterDefaultTypeInternal _Filter_default_instance_;
}  // namespace mode
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mode_2eproto[25];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mode_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mode_2eproto = nullptr;

const uint32_t TableStruct_mode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::Row, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::GenericTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::GenericTable, cols_),
  PROTOBUF_FIELD_OFFSET(::mode::GenericTable, rows_),
  PROTOBUF_FIELD_OFFSET(::mode::GenericTable, types_),
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerResponse_TablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerResponse_TablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerResponse_TablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerResponse_TablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerResponse, tables_),
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateResponse_ChainTablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateResponse_ChainTablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateResponse_ChainTablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateResponse_ChainTablesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateResponse_WorldTablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateResponse_WorldTablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateResponse_WorldTablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateResponse_WorldTablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateResponse, chaintables_),
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateResponse, worldtables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateStreamResponse, inserted_),
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateStreamResponse, updated_),
  PROTOBUF_FIELD_OFFSET(::mode::QueryLayerStateStreamResponse, deleted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::Namespace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::Namespace, chainid_),
  PROTOBUF_FIELD_OFFSET(::mode::Namespace, worldaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::StateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::StateRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::mode::StateRequest, worldtables_),
  PROTOBUF_FIELD_OFFSET(::mode::StateRequest, chaintables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::Single__StateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::Single__StateRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::mode::Single__StateRequest, table_),
  PROTOBUF_FIELD_OFFSET(::mode::Single__StateRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::mode::Single__StateRequest, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::FindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::FindRequest, from_),
  PROTOBUF_FIELD_OFFSET(::mode::FindRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::mode::FindRequest, project_),
  PROTOBUF_FIELD_OFFSET(::mode::FindRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::mode::FindRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::FindAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::FindAllRequest, tables_),
  PROTOBUF_FIELD_OFFSET(::mode::FindAllRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::mode::FindAllRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::JoinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::JoinRequest, on_),
  PROTOBUF_FIELD_OFFSET(::mode::JoinRequest, children_),
  PROTOBUF_FIELD_OFFSET(::mode::JoinRequest, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::DeleteRequest, from_),
  PROTOBUF_FIELD_OFFSET(::mode::DeleteRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::mode::UpdateRequest_RowEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mode::UpdateRequest_RowEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::UpdateRequest_RowEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mode::UpdateRequest_RowEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::UpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::UpdateRequest, target_),
  PROTOBUF_FIELD_OFFSET(::mode::UpdateRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::mode::UpdateRequest, row_),
  PROTOBUF_FIELD_OFFSET(::mode::InsertRequest_RowEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mode::InsertRequest_RowEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::InsertRequest_RowEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::mode::InsertRequest_RowEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::InsertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::InsertRequest, into_),
  PROTOBUF_FIELD_OFFSET(::mode::InsertRequest, row_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::CreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::CreateRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::FindRequestOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::FindRequestOptions, compressed_),
  PROTOBUF_FIELD_OFFSET(::mode::FindRequestOptions, group_),
  PROTOBUF_FIELD_OFFSET(::mode::FindRequestOptions, negate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::Field, table_name_),
  PROTOBUF_FIELD_OFFSET(::mode::Field, table_field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::FieldPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::FieldPair, field1_),
  PROTOBUF_FIELD_OFFSET(::mode::FieldPair, field2_),
  PROTOBUF_FIELD_OFFSET(::mode::ProjectedField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mode::ProjectedField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::ProjectedField, field_),
  PROTOBUF_FIELD_OFFSET(::mode::ProjectedField, rename_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mode::Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mode::Filter, field_),
  PROTOBUF_FIELD_OFFSET(::mode::Filter, operator__),
  PROTOBUF_FIELD_OFFSET(::mode::Filter, value_),
  PROTOBUF_FIELD_OFFSET(::mode::Filter, function_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mode::Row)},
  { 7, -1, -1, sizeof(::mode::GenericTable)},
  { 16, 24, -1, sizeof(::mode::QueryLayerResponse_TablesEntry_DoNotUse)},
  { 26, -1, -1, sizeof(::mode::QueryLayerResponse)},
  { 33, 41, -1, sizeof(::mode::QueryLayerStateResponse_ChainTablesEntry_DoNotUse)},
  { 43, 51, -1, sizeof(::mode::QueryLayerStateResponse_WorldTablesEntry_DoNotUse)},
  { 53, -1, -1, sizeof(::mode::QueryLayerStateResponse)},
  { 61, -1, -1, sizeof(::mode::QueryLayerStateStreamResponse)},
  { 70, -1, -1, sizeof(::mode::Namespace)},
  { 78, -1, -1, sizeof(::mode::StateRequest)},
  { 87, -1, -1, sizeof(::mode::Single__StateRequest)},
  { 97, -1, -1, sizeof(::mode::FindRequest)},
  { 108, -1, -1, sizeof(::mode::FindAllRequest)},
  { 117, -1, -1, sizeof(::mode::JoinRequest)},
  { 126, -1, -1, sizeof(::mode::DeleteRequest)},
  { 134, 142, -1, sizeof(::mode::UpdateRequest_RowEntry_DoNotUse)},
  { 144, -1, -1, sizeof(::mode::UpdateRequest)},
  { 153, 161, -1, sizeof(::mode::InsertRequest_RowEntry_DoNotUse)},
  { 163, -1, -1, sizeof(::mode::InsertRequest)},
  { 171, -1, -1, sizeof(::mode::CreateRequest)},
  { 178, -1, -1, sizeof(::mode::FindRequestOptions)},
  { 187, -1, -1, sizeof(::mode::Field)},
  { 195, -1, -1, sizeof(::mode::FieldPair)},
  { 203, 211, -1, sizeof(::mode::ProjectedField)},
  { 213, -1, -1, sizeof(::mode::Filter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_Row_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_GenericTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_QueryLayerResponse_TablesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_QueryLayerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_QueryLayerStateResponse_ChainTablesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_QueryLayerStateResponse_WorldTablesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_QueryLayerStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_QueryLayerStateStreamResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_Namespace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_StateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_Single__StateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_FindRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_FindAllRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_JoinRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_DeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_UpdateRequest_RowEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_UpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_InsertRequest_RowEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_InsertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_CreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_FindRequestOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_Field_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_FieldPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_ProjectedField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mode::_Filter_default_instance_),
};

const char descriptor_table_protodef_mode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nmode.proto\022\004mode\"\025\n\003Row\022\016\n\006values\030\002 \003("
  "\014\"D\n\014GenericTable\022\014\n\004cols\030\001 \003(\t\022\027\n\004rows\030"
  "\002 \003(\0132\t.mode.Row\022\r\n\005types\030\003 \003(\t\"\215\001\n\022Quer"
  "yLayerResponse\0224\n\006tables\030\001 \003(\0132$.mode.Qu"
  "eryLayerResponse.TablesEntry\032A\n\013TablesEn"
  "try\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.mode.G"
  "enericTable:\0028\001\"\263\002\n\027QueryLayerStateRespo"
  "nse\022C\n\013chainTables\030\001 \003(\0132..mode.QueryLay"
  "erStateResponse.ChainTablesEntry\022C\n\013worl"
  "dTables\030\002 \003(\0132..mode.QueryLayerStateResp"
  "onse.WorldTablesEntry\032F\n\020ChainTablesEntr"
  "y\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.mode.Gen"
  "ericTable:\0028\001\032F\n\020WorldTablesEntry\022\013\n\003key"
  "\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022.mode.GenericTabl"
  "e:\0028\001\"\260\001\n\035QueryLayerStateStreamResponse\022"
  "/\n\010inserted\030\001 \001(\0132\035.mode.QueryLayerState"
  "Response\022.\n\007updated\030\002 \001(\0132\035.mode.QueryLa"
  "yerStateResponse\022.\n\007deleted\030\003 \001(\0132\035.mode"
  ".QueryLayerStateResponse\"2\n\tNamespace\022\017\n"
  "\007chainId\030\001 \001(\t\022\024\n\014worldAddress\030\002 \001(\t\"\\\n\014"
  "StateRequest\022\"\n\tnamespace\030\001 \001(\0132\017.mode.N"
  "amespace\022\023\n\013worldTables\030\002 \003(\t\022\023\n\013chainTa"
  "bles\030\003 \003(\t\"\216\001\n\024Single__StateRequest\022\"\n\tn"
  "amespace\030\001 \001(\0132\017.mode.Namespace\022\r\n\005table"
  "\030\002 \001(\t\022\034\n\006filter\030\003 \003(\0132\014.mode.Filter\022%\n\007"
  "project\030\004 \003(\0132\024.mode.ProjectedField\"\257\001\n\013"
  "FindRequest\022\014\n\004from\030\001 \001(\t\022\034\n\006filter\030\002 \003("
  "\0132\014.mode.Filter\022%\n\007project\030\003 \003(\0132\024.mode."
  "ProjectedField\022\"\n\tnamespace\030\004 \001(\0132\017.mode"
  ".Namespace\022)\n\007options\030\005 \001(\0132\030.mode.FindR"
  "equestOptions\"o\n\016FindAllRequest\022\016\n\006table"
  "s\030\001 \003(\t\022\"\n\tnamespace\030\002 \001(\0132\017.mode.Namesp"
  "ace\022)\n\007options\030\003 \001(\0132\030.mode.FindRequestO"
  "ptions\"s\n\013JoinRequest\022\033\n\002on\030\001 \001(\0132\017.mode"
  ".FieldPair\022#\n\010children\030\002 \003(\0132\021.mode.Find"
  "Request\022\"\n\tnamespace\030\003 \001(\0132\017.mode.Namesp"
  "ace\";\n\rDeleteRequest\022\014\n\004from\030\001 \001(\t\022\034\n\006fi"
  "lter\030\002 \003(\0132\014.mode.Filter\"\224\001\n\rUpdateReque"
  "st\022\016\n\006target\030\001 \001(\t\022\034\n\006filter\030\002 \003(\0132\014.mod"
  "e.Filter\022)\n\003row\030\003 \003(\0132\034.mode.UpdateReque"
  "st.RowEntry\032*\n\010RowEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\"t\n\rInsertRequest\022\014\n\004into"
  "\030\001 \001(\t\022)\n\003row\030\003 \003(\0132\034.mode.InsertRequest"
  ".RowEntry\032*\n\010RowEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001\"\035\n\rCreateRequest\022\014\n\004name\030\001"
  " \001(\t\"G\n\022FindRequestOptions\022\022\n\ncompressed"
  "\030\001 \001(\010\022\r\n\005group\030\002 \001(\010\022\016\n\006negate\030\003 \001(\010\"0\n"
  "\005Field\022\022\n\ntable_name\030\001 \001(\t\022\023\n\013table_fiel"
  "d\030\002 \001(\t\"E\n\tFieldPair\022\033\n\006field1\030\001 \001(\0132\013.m"
  "ode.Field\022\033\n\006field2\030\002 \001(\0132\013.mode.Field\"L"
  "\n\016ProjectedField\022\032\n\005field\030\001 \001(\0132\013.mode.F"
  "ield\022\023\n\006rename\030\002 \001(\tH\000\210\001\001B\t\n\007_rename\"W\n\006"
  "Filter\022\032\n\005field\030\001 \001(\0132\013.mode.Field\022\020\n\010op"
  "erator\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\020\n\010function\030"
  "\004 \001(\t2\306\002\n\nQueryLayer\022\?\n\010GetState\022\022.mode."
  "StateRequest\032\035.mode.QueryLayerStateRespo"
  "nse\"\000\022J\n\013StreamState\022\022.mode.StateRequest"
  "\032#.mode.QueryLayerStateStreamResponse\"\0000"
  "\001\022O\n\020Single__GetState\022\032.mode.Single__Sta"
  "teRequest\032\035.mode.QueryLayerStateResponse"
  "\"\000\022Z\n\023Single__StreamState\022\032.mode.Single_"
  "_StateRequest\032#.mode.QueryLayerStateStre"
  "amResponse\"\0000\001B\022Z\020protobuf/go/modeb\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mode_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mode_2eproto = {
  false, false, 2522, descriptor_table_protodef_mode_2eproto, "mode.proto", 
  &descriptor_table_mode_2eproto_once, nullptr, 0, 25,
  schemas, file_default_instances, TableStruct_mode_2eproto::offsets,
  file_level_metadata_mode_2eproto, file_level_enum_descriptors_mode_2eproto, file_level_service_descriptors_mode_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mode_2eproto_getter() {
  return &descriptor_table_mode_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mode_2eproto(&descriptor_table_mode_2eproto);
namespace mode {

// ===================================================================

class Row::_Internal {
 public:
};

Row::Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.Row)
}
Row::Row(const Row& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mode.Row)
}

inline void Row::SharedCtor() {
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:mode.Row)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Row::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Row::ArenaDtor(void* object) {
  Row* _this = reinterpret_cast< Row* >(object);
  (void)_this;
}
void Row::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Row::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.Row)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Row::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Row::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.Row)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes values = 2;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.Row)
  return target;
}

size_t Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.Row)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes values = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      values_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Row::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Row::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Row::GetClassData() const { return &_class_data_; }

void Row::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Row *>(to)->MergeFrom(
      static_cast<const Row &>(from));
}


void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.Row)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {
  return true;
}

void Row::InternalSwap(Row* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Row::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[0]);
}

// ===================================================================

class GenericTable::_Internal {
 public:
};

GenericTable::GenericTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cols_(arena),
  rows_(arena),
  types_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.GenericTable)
}
GenericTable::GenericTable(const GenericTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cols_(from.cols_),
      rows_(from.rows_),
      types_(from.types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mode.GenericTable)
}

inline void GenericTable::SharedCtor() {
}

GenericTable::~GenericTable() {
  // @@protoc_insertion_point(destructor:mode.GenericTable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenericTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GenericTable::ArenaDtor(void* object) {
  GenericTable* _this = reinterpret_cast< GenericTable* >(object);
  (void)_this;
}
void GenericTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericTable::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.GenericTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cols_.Clear();
  rows_.Clear();
  types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string cols = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cols();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.GenericTable.cols"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .mode.Row rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.GenericTable.types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenericTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.GenericTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string cols = 1;
  for (int i = 0, n = this->_internal_cols_size(); i < n; i++) {
    const auto& s = this->_internal_cols(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.GenericTable.cols");
    target = stream->WriteString(1, s, target);
  }

  // repeated .mode.Row rows = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rows(i), target, stream);
  }

  // repeated string types = 3;
  for (int i = 0, n = this->_internal_types_size(); i < n; i++) {
    const auto& s = this->_internal_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.GenericTable.types");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.GenericTable)
  return target;
}

size_t GenericTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.GenericTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cols = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cols_.size());
  for (int i = 0, n = cols_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cols_.Get(i));
  }

  // repeated .mode.Row rows = 2;
  total_size += 1UL * this->_internal_rows_size();
  for (const auto& msg : this->rows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string types = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(types_.size());
  for (int i = 0, n = types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      types_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenericTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenericTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenericTable::GetClassData() const { return &_class_data_; }

void GenericTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GenericTable *>(to)->MergeFrom(
      static_cast<const GenericTable &>(from));
}


void GenericTable::MergeFrom(const GenericTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.GenericTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cols_.MergeFrom(from.cols_);
  rows_.MergeFrom(from.rows_);
  types_.MergeFrom(from.types_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenericTable::CopyFrom(const GenericTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.GenericTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericTable::IsInitialized() const {
  return true;
}

void GenericTable::InternalSwap(GenericTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cols_.InternalSwap(&other->cols_);
  rows_.InternalSwap(&other->rows_);
  types_.InternalSwap(&other->types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericTable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[1]);
}

// ===================================================================

QueryLayerResponse_TablesEntry_DoNotUse::QueryLayerResponse_TablesEntry_DoNotUse() {}
QueryLayerResponse_TablesEntry_DoNotUse::QueryLayerResponse_TablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryLayerResponse_TablesEntry_DoNotUse::MergeFrom(const QueryLayerResponse_TablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryLayerResponse_TablesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[2]);
}

// ===================================================================

class QueryLayerResponse::_Internal {
 public:
};

QueryLayerResponse::QueryLayerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tables_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.QueryLayerResponse)
}
QueryLayerResponse::QueryLayerResponse(const QueryLayerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tables_.MergeFrom(from.tables_);
  // @@protoc_insertion_point(copy_constructor:mode.QueryLayerResponse)
}

inline void QueryLayerResponse::SharedCtor() {
}

QueryLayerResponse::~QueryLayerResponse() {
  // @@protoc_insertion_point(destructor:mode.QueryLayerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryLayerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryLayerResponse::ArenaDtor(void* object) {
  QueryLayerResponse* _this = reinterpret_cast< QueryLayerResponse* >(object);
  (void)_this;
  _this->tables_. ~MapField();
}
inline void QueryLayerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &QueryLayerResponse::ArenaDtor);
  }
}
void QueryLayerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryLayerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.QueryLayerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryLayerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .mode.GenericTable> tables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryLayerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.QueryLayerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .mode.GenericTable> tables = 1;
  if (!this->_internal_tables().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mode.QueryLayerResponse.TablesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tables().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tables().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::const_iterator
          it = this->_internal_tables().begin();
          it != this->_internal_tables().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QueryLayerResponse_TablesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::const_iterator
          it = this->_internal_tables().begin();
          it != this->_internal_tables().end(); ++it) {
        target = QueryLayerResponse_TablesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.QueryLayerResponse)
  return target;
}

size_t QueryLayerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.QueryLayerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .mode.GenericTable> tables = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::const_iterator
      it = this->_internal_tables().begin();
      it != this->_internal_tables().end(); ++it) {
    total_size += QueryLayerResponse_TablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryLayerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryLayerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryLayerResponse::GetClassData() const { return &_class_data_; }

void QueryLayerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryLayerResponse *>(to)->MergeFrom(
      static_cast<const QueryLayerResponse &>(from));
}


void QueryLayerResponse::MergeFrom(const QueryLayerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.QueryLayerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryLayerResponse::CopyFrom(const QueryLayerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.QueryLayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLayerResponse::IsInitialized() const {
  return true;
}

void QueryLayerResponse::InternalSwap(QueryLayerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tables_.InternalSwap(&other->tables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryLayerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[3]);
}

// ===================================================================

QueryLayerStateResponse_ChainTablesEntry_DoNotUse::QueryLayerStateResponse_ChainTablesEntry_DoNotUse() {}
QueryLayerStateResponse_ChainTablesEntry_DoNotUse::QueryLayerStateResponse_ChainTablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryLayerStateResponse_ChainTablesEntry_DoNotUse::MergeFrom(const QueryLayerStateResponse_ChainTablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryLayerStateResponse_ChainTablesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[4]);
}

// ===================================================================

QueryLayerStateResponse_WorldTablesEntry_DoNotUse::QueryLayerStateResponse_WorldTablesEntry_DoNotUse() {}
QueryLayerStateResponse_WorldTablesEntry_DoNotUse::QueryLayerStateResponse_WorldTablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryLayerStateResponse_WorldTablesEntry_DoNotUse::MergeFrom(const QueryLayerStateResponse_WorldTablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryLayerStateResponse_WorldTablesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[5]);
}

// ===================================================================

class QueryLayerStateResponse::_Internal {
 public:
};

QueryLayerStateResponse::QueryLayerStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chaintables_(arena),
  worldtables_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.QueryLayerStateResponse)
}
QueryLayerStateResponse::QueryLayerStateResponse(const QueryLayerStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chaintables_.MergeFrom(from.chaintables_);
  worldtables_.MergeFrom(from.worldtables_);
  // @@protoc_insertion_point(copy_constructor:mode.QueryLayerStateResponse)
}

inline void QueryLayerStateResponse::SharedCtor() {
}

QueryLayerStateResponse::~QueryLayerStateResponse() {
  // @@protoc_insertion_point(destructor:mode.QueryLayerStateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryLayerStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryLayerStateResponse::ArenaDtor(void* object) {
  QueryLayerStateResponse* _this = reinterpret_cast< QueryLayerStateResponse* >(object);
  (void)_this;
  _this->chaintables_. ~MapField();
  _this->worldtables_. ~MapField();
}
inline void QueryLayerStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &QueryLayerStateResponse::ArenaDtor);
  }
}
void QueryLayerStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryLayerStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.QueryLayerStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chaintables_.Clear();
  worldtables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryLayerStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .mode.GenericTable> chainTables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&chaintables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .mode.GenericTable> worldTables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&worldtables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryLayerStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.QueryLayerStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .mode.GenericTable> chainTables = 1;
  if (!this->_internal_chaintables().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mode.QueryLayerStateResponse.ChainTablesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_chaintables().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_chaintables().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::const_iterator
          it = this->_internal_chaintables().begin();
          it != this->_internal_chaintables().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QueryLayerStateResponse_ChainTablesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::const_iterator
          it = this->_internal_chaintables().begin();
          it != this->_internal_chaintables().end(); ++it) {
        target = QueryLayerStateResponse_ChainTablesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .mode.GenericTable> worldTables = 2;
  if (!this->_internal_worldtables().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mode.QueryLayerStateResponse.WorldTablesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_worldtables().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_worldtables().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::const_iterator
          it = this->_internal_worldtables().begin();
          it != this->_internal_worldtables().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QueryLayerStateResponse_WorldTablesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::const_iterator
          it = this->_internal_worldtables().begin();
          it != this->_internal_worldtables().end(); ++it) {
        target = QueryLayerStateResponse_WorldTablesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.QueryLayerStateResponse)
  return target;
}

size_t QueryLayerStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.QueryLayerStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .mode.GenericTable> chainTables = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_chaintables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::const_iterator
      it = this->_internal_chaintables().begin();
      it != this->_internal_chaintables().end(); ++it) {
    total_size += QueryLayerStateResponse_ChainTablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .mode.GenericTable> worldTables = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_worldtables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::mode::GenericTable >::const_iterator
      it = this->_internal_worldtables().begin();
      it != this->_internal_worldtables().end(); ++it) {
    total_size += QueryLayerStateResponse_WorldTablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryLayerStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryLayerStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryLayerStateResponse::GetClassData() const { return &_class_data_; }

void QueryLayerStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryLayerStateResponse *>(to)->MergeFrom(
      static_cast<const QueryLayerStateResponse &>(from));
}


void QueryLayerStateResponse::MergeFrom(const QueryLayerStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.QueryLayerStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chaintables_.MergeFrom(from.chaintables_);
  worldtables_.MergeFrom(from.worldtables_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryLayerStateResponse::CopyFrom(const QueryLayerStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.QueryLayerStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLayerStateResponse::IsInitialized() const {
  return true;
}

void QueryLayerStateResponse::InternalSwap(QueryLayerStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chaintables_.InternalSwap(&other->chaintables_);
  worldtables_.InternalSwap(&other->worldtables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryLayerStateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[6]);
}

// ===================================================================

class QueryLayerStateStreamResponse::_Internal {
 public:
  static const ::mode::QueryLayerStateResponse& inserted(const QueryLayerStateStreamResponse* msg);
  static const ::mode::QueryLayerStateResponse& updated(const QueryLayerStateStreamResponse* msg);
  static const ::mode::QueryLayerStateResponse& deleted(const QueryLayerStateStreamResponse* msg);
};

const ::mode::QueryLayerStateResponse&
QueryLayerStateStreamResponse::_Internal::inserted(const QueryLayerStateStreamResponse* msg) {
  return *msg->inserted_;
}
const ::mode::QueryLayerStateResponse&
QueryLayerStateStreamResponse::_Internal::updated(const QueryLayerStateStreamResponse* msg) {
  return *msg->updated_;
}
const ::mode::QueryLayerStateResponse&
QueryLayerStateStreamResponse::_Internal::deleted(const QueryLayerStateStreamResponse* msg) {
  return *msg->deleted_;
}
QueryLayerStateStreamResponse::QueryLayerStateStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.QueryLayerStateStreamResponse)
}
QueryLayerStateStreamResponse::QueryLayerStateStreamResponse(const QueryLayerStateStreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inserted()) {
    inserted_ = new ::mode::QueryLayerStateResponse(*from.inserted_);
  } else {
    inserted_ = nullptr;
  }
  if (from._internal_has_updated()) {
    updated_ = new ::mode::QueryLayerStateResponse(*from.updated_);
  } else {
    updated_ = nullptr;
  }
  if (from._internal_has_deleted()) {
    deleted_ = new ::mode::QueryLayerStateResponse(*from.deleted_);
  } else {
    deleted_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mode.QueryLayerStateStreamResponse)
}

inline void QueryLayerStateStreamResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inserted_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deleted_) -
    reinterpret_cast<char*>(&inserted_)) + sizeof(deleted_));
}

QueryLayerStateStreamResponse::~QueryLayerStateStreamResponse() {
  // @@protoc_insertion_point(destructor:mode.QueryLayerStateStreamResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryLayerStateStreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete inserted_;
  if (this != internal_default_instance()) delete updated_;
  if (this != internal_default_instance()) delete deleted_;
}

void QueryLayerStateStreamResponse::ArenaDtor(void* object) {
  QueryLayerStateStreamResponse* _this = reinterpret_cast< QueryLayerStateStreamResponse* >(object);
  (void)_this;
}
void QueryLayerStateStreamResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryLayerStateStreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryLayerStateStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.QueryLayerStateStreamResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && inserted_ != nullptr) {
    delete inserted_;
  }
  inserted_ = nullptr;
  if (GetArenaForAllocation() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
  if (GetArenaForAllocation() == nullptr && deleted_ != nullptr) {
    delete deleted_;
  }
  deleted_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryLayerStateStreamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mode.QueryLayerStateResponse inserted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inserted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mode.QueryLayerStateResponse updated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mode.QueryLayerStateResponse deleted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryLayerStateStreamResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.QueryLayerStateStreamResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mode.QueryLayerStateResponse inserted = 1;
  if (this->_internal_has_inserted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::inserted(this), target, stream);
  }

  // .mode.QueryLayerStateResponse updated = 2;
  if (this->_internal_has_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::updated(this), target, stream);
  }

  // .mode.QueryLayerStateResponse deleted = 3;
  if (this->_internal_has_deleted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::deleted(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.QueryLayerStateStreamResponse)
  return target;
}

size_t QueryLayerStateStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.QueryLayerStateStreamResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mode.QueryLayerStateResponse inserted = 1;
  if (this->_internal_has_inserted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inserted_);
  }

  // .mode.QueryLayerStateResponse updated = 2;
  if (this->_internal_has_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_);
  }

  // .mode.QueryLayerStateResponse deleted = 3;
  if (this->_internal_has_deleted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deleted_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryLayerStateStreamResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryLayerStateStreamResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryLayerStateStreamResponse::GetClassData() const { return &_class_data_; }

void QueryLayerStateStreamResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryLayerStateStreamResponse *>(to)->MergeFrom(
      static_cast<const QueryLayerStateStreamResponse &>(from));
}


void QueryLayerStateStreamResponse::MergeFrom(const QueryLayerStateStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.QueryLayerStateStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_inserted()) {
    _internal_mutable_inserted()->::mode::QueryLayerStateResponse::MergeFrom(from._internal_inserted());
  }
  if (from._internal_has_updated()) {
    _internal_mutable_updated()->::mode::QueryLayerStateResponse::MergeFrom(from._internal_updated());
  }
  if (from._internal_has_deleted()) {
    _internal_mutable_deleted()->::mode::QueryLayerStateResponse::MergeFrom(from._internal_deleted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryLayerStateStreamResponse::CopyFrom(const QueryLayerStateStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.QueryLayerStateStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLayerStateStreamResponse::IsInitialized() const {
  return true;
}

void QueryLayerStateStreamResponse::InternalSwap(QueryLayerStateStreamResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryLayerStateStreamResponse, deleted_)
      + sizeof(QueryLayerStateStreamResponse::deleted_)
      - PROTOBUF_FIELD_OFFSET(QueryLayerStateStreamResponse, inserted_)>(
          reinterpret_cast<char*>(&inserted_),
          reinterpret_cast<char*>(&other->inserted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryLayerStateStreamResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[7]);
}

// ===================================================================

class Namespace::_Internal {
 public:
};

Namespace::Namespace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.Namespace)
}
Namespace::Namespace(const Namespace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chainid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chainid().empty()) {
    chainid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chainid(), 
      GetArenaForAllocation());
  }
  worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worldaddress().empty()) {
    worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worldaddress(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mode.Namespace)
}

inline void Namespace::SharedCtor() {
chainid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Namespace::~Namespace() {
  // @@protoc_insertion_point(destructor:mode.Namespace)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Namespace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chainid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  worldaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Namespace::ArenaDtor(void* object) {
  Namespace* _this = reinterpret_cast< Namespace* >(object);
  (void)_this;
}
void Namespace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Namespace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Namespace::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.Namespace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chainid_.ClearToEmpty();
  worldaddress_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Namespace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string chainId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chainid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.Namespace.chainId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string worldAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_worldaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.Namespace.worldAddress"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Namespace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.Namespace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string chainId = 1;
  if (!this->_internal_chainid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chainid().data(), static_cast<int>(this->_internal_chainid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.Namespace.chainId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chainid(), target);
  }

  // string worldAddress = 2;
  if (!this->_internal_worldaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worldaddress().data(), static_cast<int>(this->_internal_worldaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.Namespace.worldAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_worldaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.Namespace)
  return target;
}

size_t Namespace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.Namespace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chainId = 1;
  if (!this->_internal_chainid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chainid());
  }

  // string worldAddress = 2;
  if (!this->_internal_worldaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worldaddress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Namespace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Namespace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Namespace::GetClassData() const { return &_class_data_; }

void Namespace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Namespace *>(to)->MergeFrom(
      static_cast<const Namespace &>(from));
}


void Namespace::MergeFrom(const Namespace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.Namespace)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chainid().empty()) {
    _internal_set_chainid(from._internal_chainid());
  }
  if (!from._internal_worldaddress().empty()) {
    _internal_set_worldaddress(from._internal_worldaddress());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Namespace::CopyFrom(const Namespace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.Namespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Namespace::IsInitialized() const {
  return true;
}

void Namespace::InternalSwap(Namespace* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chainid_, lhs_arena,
      &other->chainid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &worldaddress_, lhs_arena,
      &other->worldaddress_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Namespace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[8]);
}

// ===================================================================

class StateRequest::_Internal {
 public:
  static const ::mode::Namespace& namespace_(const StateRequest* msg);
};

const ::mode::Namespace&
StateRequest::_Internal::namespace_(const StateRequest* msg) {
  return *msg->namespace__;
}
StateRequest::StateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  worldtables_(arena),
  chaintables_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.StateRequest)
}
StateRequest::StateRequest(const StateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      worldtables_(from.worldtables_),
      chaintables_(from.chaintables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_namespace_()) {
    namespace__ = new ::mode::Namespace(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mode.StateRequest)
}

inline void StateRequest::SharedCtor() {
namespace__ = nullptr;
}

StateRequest::~StateRequest() {
  // @@protoc_insertion_point(destructor:mode.StateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete namespace__;
}

void StateRequest::ArenaDtor(void* object) {
  StateRequest* _this = reinterpret_cast< StateRequest* >(object);
  (void)_this;
}
void StateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.StateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldtables_.Clear();
  chaintables_.Clear();
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mode.Namespace namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string worldTables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_worldtables();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.StateRequest.worldTables"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string chainTables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_chaintables();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.StateRequest.chainTables"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.StateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mode.Namespace namespace = 1;
  if (this->_internal_has_namespace_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::namespace_(this), target, stream);
  }

  // repeated string worldTables = 2;
  for (int i = 0, n = this->_internal_worldtables_size(); i < n; i++) {
    const auto& s = this->_internal_worldtables(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.StateRequest.worldTables");
    target = stream->WriteString(2, s, target);
  }

  // repeated string chainTables = 3;
  for (int i = 0, n = this->_internal_chaintables_size(); i < n; i++) {
    const auto& s = this->_internal_chaintables(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.StateRequest.chainTables");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.StateRequest)
  return target;
}

size_t StateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.StateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string worldTables = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(worldtables_.size());
  for (int i = 0, n = worldtables_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      worldtables_.Get(i));
  }

  // repeated string chainTables = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(chaintables_.size());
  for (int i = 0, n = chaintables_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      chaintables_.Get(i));
  }

  // .mode.Namespace namespace = 1;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StateRequest::GetClassData() const { return &_class_data_; }

void StateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StateRequest *>(to)->MergeFrom(
      static_cast<const StateRequest &>(from));
}


void StateRequest::MergeFrom(const StateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.StateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  worldtables_.MergeFrom(from.worldtables_);
  chaintables_.MergeFrom(from.chaintables_);
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::mode::Namespace::MergeFrom(from._internal_namespace_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StateRequest::CopyFrom(const StateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.StateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateRequest::IsInitialized() const {
  return true;
}

void StateRequest::InternalSwap(StateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  worldtables_.InternalSwap(&other->worldtables_);
  chaintables_.InternalSwap(&other->chaintables_);
  swap(namespace__, other->namespace__);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[9]);
}

// ===================================================================

class Single__StateRequest::_Internal {
 public:
  static const ::mode::Namespace& namespace_(const Single__StateRequest* msg);
};

const ::mode::Namespace&
Single__StateRequest::_Internal::namespace_(const Single__StateRequest* msg) {
  return *msg->namespace__;
}
Single__StateRequest::Single__StateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filter_(arena),
  project_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.Single__StateRequest)
}
Single__StateRequest::Single__StateRequest(const Single__StateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filter_(from.filter_),
      project_(from.project_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table().empty()) {
    table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_namespace_()) {
    namespace__ = new ::mode::Namespace(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mode.Single__StateRequest)
}

inline void Single__StateRequest::SharedCtor() {
table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
namespace__ = nullptr;
}

Single__StateRequest::~Single__StateRequest() {
  // @@protoc_insertion_point(destructor:mode.Single__StateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Single__StateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete namespace__;
}

void Single__StateRequest::ArenaDtor(void* object) {
  Single__StateRequest* _this = reinterpret_cast< Single__StateRequest* >(object);
  (void)_this;
}
void Single__StateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Single__StateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Single__StateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.Single__StateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.Clear();
  project_.Clear();
  table_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Single__StateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mode.Namespace namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.Single__StateRequest.table"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .mode.Filter filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .mode.ProjectedField project = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_project(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Single__StateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.Single__StateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mode.Namespace namespace = 1;
  if (this->_internal_has_namespace_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::namespace_(this), target, stream);
  }

  // string table = 2;
  if (!this->_internal_table().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.Single__StateRequest.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // repeated .mode.Filter filter = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_filter(i), target, stream);
  }

  // repeated .mode.ProjectedField project = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_project_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_project(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.Single__StateRequest)
  return target;
}

size_t Single__StateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.Single__StateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mode.Filter filter = 3;
  total_size += 1UL * this->_internal_filter_size();
  for (const auto& msg : this->filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mode.ProjectedField project = 4;
  total_size += 1UL * this->_internal_project_size();
  for (const auto& msg : this->project_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string table = 2;
  if (!this->_internal_table().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // .mode.Namespace namespace = 1;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Single__StateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Single__StateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Single__StateRequest::GetClassData() const { return &_class_data_; }

void Single__StateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Single__StateRequest *>(to)->MergeFrom(
      static_cast<const Single__StateRequest &>(from));
}


void Single__StateRequest::MergeFrom(const Single__StateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.Single__StateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filter_.MergeFrom(from.filter_);
  project_.MergeFrom(from.project_);
  if (!from._internal_table().empty()) {
    _internal_set_table(from._internal_table());
  }
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::mode::Namespace::MergeFrom(from._internal_namespace_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Single__StateRequest::CopyFrom(const Single__StateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.Single__StateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Single__StateRequest::IsInitialized() const {
  return true;
}

void Single__StateRequest::InternalSwap(Single__StateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filter_.InternalSwap(&other->filter_);
  project_.InternalSwap(&other->project_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_, lhs_arena,
      &other->table_, rhs_arena
  );
  swap(namespace__, other->namespace__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Single__StateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[10]);
}

// ===================================================================

class FindRequest::_Internal {
 public:
  static const ::mode::Namespace& namespace_(const FindRequest* msg);
  static const ::mode::FindRequestOptions& options(const FindRequest* msg);
};

const ::mode::Namespace&
FindRequest::_Internal::namespace_(const FindRequest* msg) {
  return *msg->namespace__;
}
const ::mode::FindRequestOptions&
FindRequest::_Internal::options(const FindRequest* msg) {
  return *msg->options_;
}
FindRequest::FindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filter_(arena),
  project_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.FindRequest)
}
FindRequest::FindRequest(const FindRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filter_(from.filter_),
      project_(from.project_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_namespace_()) {
    namespace__ = new ::mode::Namespace(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::mode::FindRequestOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mode.FindRequest)
}

inline void FindRequest::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&namespace__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&options_) -
    reinterpret_cast<char*>(&namespace__)) + sizeof(options_));
}

FindRequest::~FindRequest() {
  // @@protoc_insertion_point(destructor:mode.FindRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete options_;
}

void FindRequest::ArenaDtor(void* object) {
  FindRequest* _this = reinterpret_cast< FindRequest* >(object);
  (void)_this;
}
void FindRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.FindRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.Clear();
  project_.Clear();
  from_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.FindRequest.from"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .mode.Filter filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .mode.ProjectedField project = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_project(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .mode.Namespace namespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mode.FindRequestOptions options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.FindRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.FindRequest.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // repeated .mode.Filter filter = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_filter(i), target, stream);
  }

  // repeated .mode.ProjectedField project = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_project_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_project(i), target, stream);
  }

  // .mode.Namespace namespace = 4;
  if (this->_internal_has_namespace_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::namespace_(this), target, stream);
  }

  // .mode.FindRequestOptions options = 5;
  if (this->_internal_has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.FindRequest)
  return target;
}

size_t FindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.FindRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mode.Filter filter = 2;
  total_size += 1UL * this->_internal_filter_size();
  for (const auto& msg : this->filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mode.ProjectedField project = 3;
  total_size += 1UL * this->_internal_project_size();
  for (const auto& msg : this->project_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // .mode.Namespace namespace = 4;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .mode.FindRequestOptions options = 5;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindRequest::GetClassData() const { return &_class_data_; }

void FindRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindRequest *>(to)->MergeFrom(
      static_cast<const FindRequest &>(from));
}


void FindRequest::MergeFrom(const FindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.FindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filter_.MergeFrom(from.filter_);
  project_.MergeFrom(from.project_);
  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::mode::Namespace::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_options()) {
    _internal_mutable_options()->::mode::FindRequestOptions::MergeFrom(from._internal_options());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindRequest::CopyFrom(const FindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.FindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindRequest::IsInitialized() const {
  return true;
}

void FindRequest::InternalSwap(FindRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filter_.InternalSwap(&other->filter_);
  project_.InternalSwap(&other->project_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, lhs_arena,
      &other->from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindRequest, options_)
      + sizeof(FindRequest::options_)
      - PROTOBUF_FIELD_OFFSET(FindRequest, namespace__)>(
          reinterpret_cast<char*>(&namespace__),
          reinterpret_cast<char*>(&other->namespace__));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[11]);
}

// ===================================================================

class FindAllRequest::_Internal {
 public:
  static const ::mode::Namespace& namespace_(const FindAllRequest* msg);
  static const ::mode::FindRequestOptions& options(const FindAllRequest* msg);
};

const ::mode::Namespace&
FindAllRequest::_Internal::namespace_(const FindAllRequest* msg) {
  return *msg->namespace__;
}
const ::mode::FindRequestOptions&
FindAllRequest::_Internal::options(const FindAllRequest* msg) {
  return *msg->options_;
}
FindAllRequest::FindAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tables_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.FindAllRequest)
}
FindAllRequest::FindAllRequest(const FindAllRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tables_(from.tables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_namespace_()) {
    namespace__ = new ::mode::Namespace(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::mode::FindRequestOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mode.FindAllRequest)
}

inline void FindAllRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&namespace__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&options_) -
    reinterpret_cast<char*>(&namespace__)) + sizeof(options_));
}

FindAllRequest::~FindAllRequest() {
  // @@protoc_insertion_point(destructor:mode.FindAllRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindAllRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete namespace__;
  if (this != internal_default_instance()) delete options_;
}

void FindAllRequest::ArenaDtor(void* object) {
  FindAllRequest* _this = reinterpret_cast< FindAllRequest* >(object);
  (void)_this;
}
void FindAllRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindAllRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.FindAllRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindAllRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string tables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tables();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.FindAllRequest.tables"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .mode.Namespace namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mode.FindRequestOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindAllRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.FindAllRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string tables = 1;
  for (int i = 0, n = this->_internal_tables_size(); i < n; i++) {
    const auto& s = this->_internal_tables(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.FindAllRequest.tables");
    target = stream->WriteString(1, s, target);
  }

  // .mode.Namespace namespace = 2;
  if (this->_internal_has_namespace_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::namespace_(this), target, stream);
  }

  // .mode.FindRequestOptions options = 3;
  if (this->_internal_has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.FindAllRequest)
  return target;
}

size_t FindAllRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.FindAllRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tables = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tables_.size());
  for (int i = 0, n = tables_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tables_.Get(i));
  }

  // .mode.Namespace namespace = 2;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  // .mode.FindRequestOptions options = 3;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindAllRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindAllRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindAllRequest::GetClassData() const { return &_class_data_; }

void FindAllRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindAllRequest *>(to)->MergeFrom(
      static_cast<const FindAllRequest &>(from));
}


void FindAllRequest::MergeFrom(const FindAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.FindAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::mode::Namespace::MergeFrom(from._internal_namespace_());
  }
  if (from._internal_has_options()) {
    _internal_mutable_options()->::mode::FindRequestOptions::MergeFrom(from._internal_options());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindAllRequest::CopyFrom(const FindAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.FindAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindAllRequest::IsInitialized() const {
  return true;
}

void FindAllRequest::InternalSwap(FindAllRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tables_.InternalSwap(&other->tables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindAllRequest, options_)
      + sizeof(FindAllRequest::options_)
      - PROTOBUF_FIELD_OFFSET(FindAllRequest, namespace__)>(
          reinterpret_cast<char*>(&namespace__),
          reinterpret_cast<char*>(&other->namespace__));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindAllRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[12]);
}

// ===================================================================

class JoinRequest::_Internal {
 public:
  static const ::mode::FieldPair& on(const JoinRequest* msg);
  static const ::mode::Namespace& namespace_(const JoinRequest* msg);
};

const ::mode::FieldPair&
JoinRequest::_Internal::on(const JoinRequest* msg) {
  return *msg->on_;
}
const ::mode::Namespace&
JoinRequest::_Internal::namespace_(const JoinRequest* msg) {
  return *msg->namespace__;
}
JoinRequest::JoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  children_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.JoinRequest)
}
JoinRequest::JoinRequest(const JoinRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      children_(from.children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_on()) {
    on_ = new ::mode::FieldPair(*from.on_);
  } else {
    on_ = nullptr;
  }
  if (from._internal_has_namespace_()) {
    namespace__ = new ::mode::Namespace(*from.namespace__);
  } else {
    namespace__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mode.JoinRequest)
}

inline void JoinRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&on_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&namespace__) -
    reinterpret_cast<char*>(&on_)) + sizeof(namespace__));
}

JoinRequest::~JoinRequest() {
  // @@protoc_insertion_point(destructor:mode.JoinRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JoinRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete on_;
  if (this != internal_default_instance()) delete namespace__;
}

void JoinRequest::ArenaDtor(void* object) {
  JoinRequest* _this = reinterpret_cast< JoinRequest* >(object);
  (void)_this;
}
void JoinRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.JoinRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  if (GetArenaForAllocation() == nullptr && on_ != nullptr) {
    delete on_;
  }
  on_ = nullptr;
  if (GetArenaForAllocation() == nullptr && namespace__ != nullptr) {
    delete namespace__;
  }
  namespace__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mode.FieldPair on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_on(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .mode.FindRequest children = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .mode.Namespace namespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_namespace_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.JoinRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mode.FieldPair on = 1;
  if (this->_internal_has_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::on(this), target, stream);
  }

  // repeated .mode.FindRequest children = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_children(i), target, stream);
  }

  // .mode.Namespace namespace = 3;
  if (this->_internal_has_namespace_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::namespace_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.JoinRequest)
  return target;
}

size_t JoinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.JoinRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mode.FindRequest children = 2;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .mode.FieldPair on = 1;
  if (this->_internal_has_on()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *on_);
  }

  // .mode.Namespace namespace = 3;
  if (this->_internal_has_namespace_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *namespace__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JoinRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinRequest::GetClassData() const { return &_class_data_; }

void JoinRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JoinRequest *>(to)->MergeFrom(
      static_cast<const JoinRequest &>(from));
}


void JoinRequest::MergeFrom(const JoinRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.JoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from._internal_has_on()) {
    _internal_mutable_on()->::mode::FieldPair::MergeFrom(from._internal_on());
  }
  if (from._internal_has_namespace_()) {
    _internal_mutable_namespace_()->::mode::Namespace::MergeFrom(from._internal_namespace_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinRequest::CopyFrom(const JoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.JoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRequest::IsInitialized() const {
  return true;
}

void JoinRequest::InternalSwap(JoinRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  children_.InternalSwap(&other->children_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinRequest, namespace__)
      + sizeof(JoinRequest::namespace__)
      - PROTOBUF_FIELD_OFFSET(JoinRequest, on_)>(
          reinterpret_cast<char*>(&on_),
          reinterpret_cast<char*>(&other->on_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[13]);
}

// ===================================================================

class DeleteRequest::_Internal {
 public:
};

DeleteRequest::DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filter_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filter_(from.filter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mode.DeleteRequest)
}

inline void DeleteRequest::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:mode.DeleteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteRequest::ArenaDtor(void* object) {
  DeleteRequest* _this = reinterpret_cast< DeleteRequest* >(object);
  (void)_this;
}
void DeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.DeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.Clear();
  from_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.DeleteRequest.from"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .mode.Filter filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.DeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.DeleteRequest.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // repeated .mode.Filter filter = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_filter(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.DeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mode.Filter filter = 2;
  total_size += 1UL * this->_internal_filter_size();
  for (const auto& msg : this->filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string from = 1;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRequest::GetClassData() const { return &_class_data_; }

void DeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteRequest *>(to)->MergeFrom(
      static_cast<const DeleteRequest &>(from));
}


void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filter_.MergeFrom(from.filter_);
  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filter_.InternalSwap(&other->filter_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, lhs_arena,
      &other->from_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[14]);
}

// ===================================================================

UpdateRequest_RowEntry_DoNotUse::UpdateRequest_RowEntry_DoNotUse() {}
UpdateRequest_RowEntry_DoNotUse::UpdateRequest_RowEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UpdateRequest_RowEntry_DoNotUse::MergeFrom(const UpdateRequest_RowEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UpdateRequest_RowEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[15]);
}

// ===================================================================

class UpdateRequest::_Internal {
 public:
};

UpdateRequest::UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filter_(arena),
  row_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.UpdateRequest)
}
UpdateRequest::UpdateRequest(const UpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filter_(from.filter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  row_.MergeFrom(from.row_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target().empty()) {
    target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mode.UpdateRequest)
}

inline void UpdateRequest::SharedCtor() {
target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateRequest::~UpdateRequest() {
  // @@protoc_insertion_point(destructor:mode.UpdateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateRequest::ArenaDtor(void* object) {
  UpdateRequest* _this = reinterpret_cast< UpdateRequest* >(object);
  (void)_this;
  _this->row_. ~MapField();
}
inline void UpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &UpdateRequest::ArenaDtor);
  }
}
void UpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.UpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.Clear();
  row_.Clear();
  target_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.UpdateRequest.target"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .mode.Filter filter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&row_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.UpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1;
  if (!this->_internal_target().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.UpdateRequest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // repeated .mode.Filter filter = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_filter(i), target, stream);
  }

  // map<string, string> row = 3;
  if (!this->_internal_row().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mode.UpdateRequest.RowEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mode.UpdateRequest.RowEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_row().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_row().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_row().begin();
          it != this->_internal_row().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UpdateRequest_RowEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_row().begin();
          it != this->_internal_row().end(); ++it) {
        target = UpdateRequest_RowEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.UpdateRequest)
  return target;
}

size_t UpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.UpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mode.Filter filter = 2;
  total_size += 1UL * this->_internal_filter_size();
  for (const auto& msg : this->filter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> row = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_row_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_row().begin();
      it != this->_internal_row().end(); ++it) {
    total_size += UpdateRequest_RowEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string target = 1;
  if (!this->_internal_target().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRequest::GetClassData() const { return &_class_data_; }

void UpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateRequest *>(to)->MergeFrom(
      static_cast<const UpdateRequest &>(from));
}


void UpdateRequest::MergeFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.UpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filter_.MergeFrom(from.filter_);
  row_.MergeFrom(from.row_);
  if (!from._internal_target().empty()) {
    _internal_set_target(from._internal_target());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRequest::CopyFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequest::IsInitialized() const {
  return true;
}

void UpdateRequest::InternalSwap(UpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filter_.InternalSwap(&other->filter_);
  row_.InternalSwap(&other->row_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_, lhs_arena,
      &other->target_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[16]);
}

// ===================================================================

InsertRequest_RowEntry_DoNotUse::InsertRequest_RowEntry_DoNotUse() {}
InsertRequest_RowEntry_DoNotUse::InsertRequest_RowEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InsertRequest_RowEntry_DoNotUse::MergeFrom(const InsertRequest_RowEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InsertRequest_RowEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[17]);
}

// ===================================================================

class InsertRequest::_Internal {
 public:
};

InsertRequest::InsertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  row_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.InsertRequest)
}
InsertRequest::InsertRequest(const InsertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  row_.MergeFrom(from.row_);
  into_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    into_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_into().empty()) {
    into_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_into(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mode.InsertRequest)
}

inline void InsertRequest::SharedCtor() {
into_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  into_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertRequest::~InsertRequest() {
  // @@protoc_insertion_point(destructor:mode.InsertRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  into_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InsertRequest::ArenaDtor(void* object) {
  InsertRequest* _this = reinterpret_cast< InsertRequest* >(object);
  (void)_this;
  _this->row_. ~MapField();
}
inline void InsertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &InsertRequest::ArenaDtor);
  }
}
void InsertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.InsertRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_.Clear();
  into_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string into = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_into();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.InsertRequest.into"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&row_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.InsertRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string into = 1;
  if (!this->_internal_into().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_into().data(), static_cast<int>(this->_internal_into().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.InsertRequest.into");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_into(), target);
  }

  // map<string, string> row = 3;
  if (!this->_internal_row().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mode.InsertRequest.RowEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "mode.InsertRequest.RowEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_row().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_row().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_row().begin();
          it != this->_internal_row().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InsertRequest_RowEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_row().begin();
          it != this->_internal_row().end(); ++it) {
        target = InsertRequest_RowEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.InsertRequest)
  return target;
}

size_t InsertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.InsertRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> row = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_row_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_row().begin();
      it != this->_internal_row().end(); ++it) {
    total_size += InsertRequest_RowEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string into = 1;
  if (!this->_internal_into().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_into());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertRequest::GetClassData() const { return &_class_data_; }

void InsertRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertRequest *>(to)->MergeFrom(
      static_cast<const InsertRequest &>(from));
}


void InsertRequest::MergeFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.InsertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  row_.MergeFrom(from.row_);
  if (!from._internal_into().empty()) {
    _internal_set_into(from._internal_into());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertRequest::CopyFrom(const InsertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.InsertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRequest::IsInitialized() const {
  return true;
}

void InsertRequest::InternalSwap(InsertRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  row_.InternalSwap(&other->row_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &into_, lhs_arena,
      &other->into_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[18]);
}

// ===================================================================

class CreateRequest::_Internal {
 public:
};

CreateRequest::CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mode.CreateRequest)
}

inline void CreateRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:mode.CreateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRequest::ArenaDtor(void* object) {
  CreateRequest* _this = reinterpret_cast< CreateRequest* >(object);
  (void)_this;
}
void CreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.CreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.CreateRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.CreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.CreateRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.CreateRequest)
  return target;
}

size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.CreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRequest::GetClassData() const { return &_class_data_; }

void CreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateRequest *>(to)->MergeFrom(
      static_cast<const CreateRequest &>(from));
}


void CreateRequest::MergeFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[19]);
}

// ===================================================================

class FindRequestOptions::_Internal {
 public:
};

FindRequestOptions::FindRequestOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.FindRequestOptions)
}
FindRequestOptions::FindRequestOptions(const FindRequestOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&compressed_, &from.compressed_,
    static_cast<size_t>(reinterpret_cast<char*>(&negate_) -
    reinterpret_cast<char*>(&compressed_)) + sizeof(negate_));
  // @@protoc_insertion_point(copy_constructor:mode.FindRequestOptions)
}

inline void FindRequestOptions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&compressed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&negate_) -
    reinterpret_cast<char*>(&compressed_)) + sizeof(negate_));
}

FindRequestOptions::~FindRequestOptions() {
  // @@protoc_insertion_point(destructor:mode.FindRequestOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FindRequestOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FindRequestOptions::ArenaDtor(void* object) {
  FindRequestOptions* _this = reinterpret_cast< FindRequestOptions* >(object);
  (void)_this;
}
void FindRequestOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FindRequestOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FindRequestOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.FindRequestOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&compressed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negate_) -
      reinterpret_cast<char*>(&compressed_)) + sizeof(negate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindRequestOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool compressed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          compressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool negate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          negate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindRequestOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.FindRequestOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool compressed = 1;
  if (this->_internal_compressed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_compressed(), target);
  }

  // bool group = 2;
  if (this->_internal_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_group(), target);
  }

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_negate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.FindRequestOptions)
  return target;
}

size_t FindRequestOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.FindRequestOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool compressed = 1;
  if (this->_internal_compressed() != 0) {
    total_size += 1 + 1;
  }

  // bool group = 2;
  if (this->_internal_group() != 0) {
    total_size += 1 + 1;
  }

  // bool negate = 3;
  if (this->_internal_negate() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindRequestOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FindRequestOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindRequestOptions::GetClassData() const { return &_class_data_; }

void FindRequestOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FindRequestOptions *>(to)->MergeFrom(
      static_cast<const FindRequestOptions &>(from));
}


void FindRequestOptions::MergeFrom(const FindRequestOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.FindRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_compressed() != 0) {
    _internal_set_compressed(from._internal_compressed());
  }
  if (from._internal_group() != 0) {
    _internal_set_group(from._internal_group());
  }
  if (from._internal_negate() != 0) {
    _internal_set_negate(from._internal_negate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindRequestOptions::CopyFrom(const FindRequestOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.FindRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindRequestOptions::IsInitialized() const {
  return true;
}

void FindRequestOptions::InternalSwap(FindRequestOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindRequestOptions, negate_)
      + sizeof(FindRequestOptions::negate_)
      - PROTOBUF_FIELD_OFFSET(FindRequestOptions, compressed_)>(
          reinterpret_cast<char*>(&compressed_),
          reinterpret_cast<char*>(&other->compressed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindRequestOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[20]);
}

// ===================================================================

class Field::_Internal {
 public:
};

Field::Field(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.Field)
}
Field::Field(const Field& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  table_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_field().empty()) {
    table_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_field(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mode.Field)
}

inline void Field::SharedCtor() {
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
table_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:mode.Field)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Field::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Field::ArenaDtor(void* object) {
  Field* _this = reinterpret_cast< Field* >(object);
  (void)_this;
}
void Field::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.Field)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.ClearToEmpty();
  table_field_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Field::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.Field.table_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string table_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_table_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.Field.table_field"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Field::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.Field)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.Field.table_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // string table_field = 2;
  if (!this->_internal_table_field().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_field().data(), static_cast<int>(this->_internal_table_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.Field.table_field");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.Field)
  return target;
}

size_t Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.Field)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // string table_field = 2;
  if (!this->_internal_table_field().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_field());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Field::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Field::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Field::GetClassData() const { return &_class_data_; }

void Field::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Field *>(to)->MergeFrom(
      static_cast<const Field &>(from));
}


void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.Field)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (!from._internal_table_field().empty()) {
    _internal_set_table_field(from._internal_table_field());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {
  return true;
}

void Field::InternalSwap(Field* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_field_, lhs_arena,
      &other->table_field_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Field::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[21]);
}

// ===================================================================

class FieldPair::_Internal {
 public:
  static const ::mode::Field& field1(const FieldPair* msg);
  static const ::mode::Field& field2(const FieldPair* msg);
};

const ::mode::Field&
FieldPair::_Internal::field1(const FieldPair* msg) {
  return *msg->field1_;
}
const ::mode::Field&
FieldPair::_Internal::field2(const FieldPair* msg) {
  return *msg->field2_;
}
FieldPair::FieldPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.FieldPair)
}
FieldPair::FieldPair(const FieldPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_field1()) {
    field1_ = new ::mode::Field(*from.field1_);
  } else {
    field1_ = nullptr;
  }
  if (from._internal_has_field2()) {
    field2_ = new ::mode::Field(*from.field2_);
  } else {
    field2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mode.FieldPair)
}

inline void FieldPair::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&field1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&field2_) -
    reinterpret_cast<char*>(&field1_)) + sizeof(field2_));
}

FieldPair::~FieldPair() {
  // @@protoc_insertion_point(destructor:mode.FieldPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FieldPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete field1_;
  if (this != internal_default_instance()) delete field2_;
}

void FieldPair::ArenaDtor(void* object) {
  FieldPair* _this = reinterpret_cast< FieldPair* >(object);
  (void)_this;
}
void FieldPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldPair::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.FieldPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && field1_ != nullptr) {
    delete field1_;
  }
  field1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && field2_ != nullptr) {
    delete field2_;
  }
  field2_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mode.Field field1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_field1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .mode.Field field2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_field2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.FieldPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mode.Field field1 = 1;
  if (this->_internal_has_field1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::field1(this), target, stream);
  }

  // .mode.Field field2 = 2;
  if (this->_internal_has_field2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::field2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.FieldPair)
  return target;
}

size_t FieldPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.FieldPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mode.Field field1 = 1;
  if (this->_internal_has_field1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field1_);
  }

  // .mode.Field field2 = 2;
  if (this->_internal_has_field2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field2_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldPair::GetClassData() const { return &_class_data_; }

void FieldPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldPair *>(to)->MergeFrom(
      static_cast<const FieldPair &>(from));
}


void FieldPair::MergeFrom(const FieldPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.FieldPair)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_field1()) {
    _internal_mutable_field1()->::mode::Field::MergeFrom(from._internal_field1());
  }
  if (from._internal_has_field2()) {
    _internal_mutable_field2()->::mode::Field::MergeFrom(from._internal_field2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldPair::CopyFrom(const FieldPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.FieldPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldPair::IsInitialized() const {
  return true;
}

void FieldPair::InternalSwap(FieldPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldPair, field2_)
      + sizeof(FieldPair::field2_)
      - PROTOBUF_FIELD_OFFSET(FieldPair, field1_)>(
          reinterpret_cast<char*>(&field1_),
          reinterpret_cast<char*>(&other->field1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[22]);
}

// ===================================================================

class ProjectedField::_Internal {
 public:
  using HasBits = decltype(std::declval<ProjectedField>()._has_bits_);
  static const ::mode::Field& field(const ProjectedField* msg);
  static void set_has_rename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mode::Field&
ProjectedField::_Internal::field(const ProjectedField* msg) {
  return *msg->field_;
}
ProjectedField::ProjectedField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.ProjectedField)
}
ProjectedField::ProjectedField(const ProjectedField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rename()) {
    rename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_field()) {
    field_ = new ::mode::Field(*from.field_);
  } else {
    field_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mode.ProjectedField)
}

inline void ProjectedField::SharedCtor() {
rename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
field_ = nullptr;
}

ProjectedField::~ProjectedField() {
  // @@protoc_insertion_point(destructor:mode.ProjectedField)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProjectedField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete field_;
}

void ProjectedField::ArenaDtor(void* object) {
  ProjectedField* _this = reinterpret_cast< ProjectedField* >(object);
  (void)_this;
}
void ProjectedField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProjectedField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProjectedField::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.ProjectedField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rename_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectedField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mode.Field field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.ProjectedField.rename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectedField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.ProjectedField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mode.Field field = 1;
  if (this->_internal_has_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::field(this), target, stream);
  }

  // optional string rename = 2;
  if (_internal_has_rename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rename().data(), static_cast<int>(this->_internal_rename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.ProjectedField.rename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.ProjectedField)
  return target;
}

size_t ProjectedField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.ProjectedField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string rename = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rename());
  }

  // .mode.Field field = 1;
  if (this->_internal_has_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectedField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProjectedField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectedField::GetClassData() const { return &_class_data_; }

void ProjectedField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProjectedField *>(to)->MergeFrom(
      static_cast<const ProjectedField &>(from));
}


void ProjectedField::MergeFrom(const ProjectedField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.ProjectedField)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rename()) {
    _internal_set_rename(from._internal_rename());
  }
  if (from._internal_has_field()) {
    _internal_mutable_field()->::mode::Field::MergeFrom(from._internal_field());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectedField::CopyFrom(const ProjectedField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.ProjectedField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectedField::IsInitialized() const {
  return true;
}

void ProjectedField::InternalSwap(ProjectedField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rename_, lhs_arena,
      &other->rename_, rhs_arena
  );
  swap(field_, other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectedField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[23]);
}

// ===================================================================

class Filter::_Internal {
 public:
  static const ::mode::Field& field(const Filter* msg);
};

const ::mode::Field&
Filter::_Internal::field(const Filter* msg) {
  return *msg->field_;
}
Filter::Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:mode.Filter)
}
Filter::Filter(const Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operator_().empty()) {
    operator__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_operator_(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_function().empty()) {
    function_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_field()) {
    field_ = new ::mode::Field(*from.field_);
  } else {
    field_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mode.Filter)
}

inline void Filter::SharedCtor() {
operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
field_ = nullptr;
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:mode.Filter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  operator__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete field_;
}

void Filter::ArenaDtor(void* object) {
  Filter* _this = reinterpret_cast< Filter* >(object);
  (void)_this;
}
void Filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:mode.Filter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operator__.ClearToEmpty();
  value_.ClearToEmpty();
  function_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mode.Field field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operator_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.Filter.operator"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.Filter.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string function = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_function();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mode.Filter.function"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Filter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mode.Filter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mode.Field field = 1;
  if (this->_internal_has_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::field(this), target, stream);
  }

  // string operator = 2;
  if (!this->_internal_operator_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_().data(), static_cast<int>(this->_internal_operator_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.Filter.operator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operator_(), target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.Filter.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // string function = 4;
  if (!this->_internal_function().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function().data(), static_cast<int>(this->_internal_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mode.Filter.function");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_function(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mode.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mode.Filter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operator = 2;
  if (!this->_internal_operator_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_());
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string function = 4;
  if (!this->_internal_function().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function());
  }

  // .mode.Field field = 1;
  if (this->_internal_has_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Filter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Filter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Filter::GetClassData() const { return &_class_data_; }

void Filter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Filter *>(to)->MergeFrom(
      static_cast<const Filter &>(from));
}


void Filter::MergeFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mode.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operator_().empty()) {
    _internal_set_operator_(from._internal_operator_());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_function().empty()) {
    _internal_set_function(from._internal_function());
  }
  if (from._internal_has_field()) {
    _internal_mutable_field()->::mode::Field::MergeFrom(from._internal_field());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mode.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  return true;
}

void Filter::InternalSwap(Filter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &operator__, lhs_arena,
      &other->operator__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_, lhs_arena,
      &other->function_, rhs_arena
  );
  swap(field_, other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Filter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mode_2eproto_getter, &descriptor_table_mode_2eproto_once,
      file_level_metadata_mode_2eproto[24]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mode
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mode::Row* Arena::CreateMaybeMessage< ::mode::Row >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::Row >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::GenericTable* Arena::CreateMaybeMessage< ::mode::GenericTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::GenericTable >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::QueryLayerResponse_TablesEntry_DoNotUse* Arena::CreateMaybeMessage< ::mode::QueryLayerResponse_TablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::QueryLayerResponse_TablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::QueryLayerResponse* Arena::CreateMaybeMessage< ::mode::QueryLayerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::QueryLayerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::QueryLayerStateResponse_ChainTablesEntry_DoNotUse* Arena::CreateMaybeMessage< ::mode::QueryLayerStateResponse_ChainTablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::QueryLayerStateResponse_ChainTablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::QueryLayerStateResponse_WorldTablesEntry_DoNotUse* Arena::CreateMaybeMessage< ::mode::QueryLayerStateResponse_WorldTablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::QueryLayerStateResponse_WorldTablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::QueryLayerStateResponse* Arena::CreateMaybeMessage< ::mode::QueryLayerStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::QueryLayerStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::QueryLayerStateStreamResponse* Arena::CreateMaybeMessage< ::mode::QueryLayerStateStreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::QueryLayerStateStreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::Namespace* Arena::CreateMaybeMessage< ::mode::Namespace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::Namespace >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::StateRequest* Arena::CreateMaybeMessage< ::mode::StateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::StateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::Single__StateRequest* Arena::CreateMaybeMessage< ::mode::Single__StateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::Single__StateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::FindRequest* Arena::CreateMaybeMessage< ::mode::FindRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::FindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::FindAllRequest* Arena::CreateMaybeMessage< ::mode::FindAllRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::FindAllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::JoinRequest* Arena::CreateMaybeMessage< ::mode::JoinRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::JoinRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::DeleteRequest* Arena::CreateMaybeMessage< ::mode::DeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::UpdateRequest_RowEntry_DoNotUse* Arena::CreateMaybeMessage< ::mode::UpdateRequest_RowEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::UpdateRequest_RowEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::UpdateRequest* Arena::CreateMaybeMessage< ::mode::UpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::UpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::InsertRequest_RowEntry_DoNotUse* Arena::CreateMaybeMessage< ::mode::InsertRequest_RowEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::InsertRequest_RowEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::InsertRequest* Arena::CreateMaybeMessage< ::mode::InsertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::InsertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::CreateRequest* Arena::CreateMaybeMessage< ::mode::CreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::CreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::FindRequestOptions* Arena::CreateMaybeMessage< ::mode::FindRequestOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::FindRequestOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::Field* Arena::CreateMaybeMessage< ::mode::Field >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::Field >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::FieldPair* Arena::CreateMaybeMessage< ::mode::FieldPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::FieldPair >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::ProjectedField* Arena::CreateMaybeMessage< ::mode::ProjectedField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::ProjectedField >(arena);
}
template<> PROTOBUF_NOINLINE ::mode::Filter* Arena::CreateMaybeMessage< ::mode::Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mode::Filter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
