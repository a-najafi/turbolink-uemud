//Generated by TurboLink CodeGenerator, do not edit!
#include "SEcsrelay/EcsRelayNode.h"
#include "SEcsrelay/EcsRelayService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Launch/Resources/Version.h"

UCallECSRelayServiceAuthenticate* UCallECSRelayServiceAuthenticate::Authenticate(UObject* WorldContextObject, const FGrpcEcsrelaySignature& Request)
{
	UCallECSRelayServiceAuthenticate* node = NewObject<UCallECSRelayServiceAuthenticate>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ECSRelayService = Cast<UECSRelayService>(turboLinkManager->MakeService("ECSRelayService"));
	if (node->ECSRelayService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->ECSRelayService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallECSRelayServiceAuthenticate::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->ECSRelayService->Connect();
	}));
	return node;
}

void UCallECSRelayServiceAuthenticate::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcEcsrelayIdentity response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ECSRelayServiceClient = ECSRelayService->MakeClient();
		ECSRelayServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallECSRelayServiceAuthenticate::OnContextStateChange);
		ECSRelayServiceClient->OnAuthenticateResponse.AddUniqueDynamic(this, &UCallECSRelayServiceAuthenticate::OnResponse);

		Context = ECSRelayServiceClient->InitAuthenticate();
		ECSRelayServiceClient->Authenticate(Context, Request);
	}
}

void UCallECSRelayServiceAuthenticate::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallECSRelayServiceAuthenticate::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcEcsrelayIdentity& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallECSRelayServiceAuthenticate::Shutdown()
{
	ECSRelayService->OnServiceStateChanged.RemoveDynamic(this, &UCallECSRelayServiceAuthenticate::OnServiceStateChanged);
	if (ECSRelayServiceClient != nullptr)
	{
		ECSRelayService->RemoveClient(ECSRelayServiceClient);
		ECSRelayServiceClient->Shutdown();
		ECSRelayServiceClient = nullptr;
	}

	if (ECSRelayService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ECSRelayService);
		ECSRelayService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallECSRelayServiceRevoke* UCallECSRelayServiceRevoke::Revoke(UObject* WorldContextObject, const FGrpcEcsrelaySignature& Request)
{
	UCallECSRelayServiceRevoke* node = NewObject<UCallECSRelayServiceRevoke>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ECSRelayService = Cast<UECSRelayService>(turboLinkManager->MakeService("ECSRelayService"));
	if (node->ECSRelayService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->ECSRelayService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallECSRelayServiceRevoke::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->ECSRelayService->Connect();
	}));
	return node;
}

void UCallECSRelayServiceRevoke::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcEcsrelayIdentity response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ECSRelayServiceClient = ECSRelayService->MakeClient();
		ECSRelayServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallECSRelayServiceRevoke::OnContextStateChange);
		ECSRelayServiceClient->OnRevokeResponse.AddUniqueDynamic(this, &UCallECSRelayServiceRevoke::OnResponse);

		Context = ECSRelayServiceClient->InitRevoke();
		ECSRelayServiceClient->Revoke(Context, Request);
	}
}

void UCallECSRelayServiceRevoke::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallECSRelayServiceRevoke::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcEcsrelayIdentity& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallECSRelayServiceRevoke::Shutdown()
{
	ECSRelayService->OnServiceStateChanged.RemoveDynamic(this, &UCallECSRelayServiceRevoke::OnServiceStateChanged);
	if (ECSRelayServiceClient != nullptr)
	{
		ECSRelayService->RemoveClient(ECSRelayServiceClient);
		ECSRelayServiceClient->Shutdown();
		ECSRelayServiceClient = nullptr;
	}

	if (ECSRelayService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ECSRelayService);
		ECSRelayService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallECSRelayServicePing* UCallECSRelayServicePing::Ping(UObject* WorldContextObject, const FGrpcEcsrelaySignature& Request)
{
	UCallECSRelayServicePing* node = NewObject<UCallECSRelayServicePing>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ECSRelayService = Cast<UECSRelayService>(turboLinkManager->MakeService("ECSRelayService"));
	if (node->ECSRelayService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->ECSRelayService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallECSRelayServicePing::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->ECSRelayService->Connect();
	}));
	return node;
}

void UCallECSRelayServicePing::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcEcsrelayIdentity response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ECSRelayServiceClient = ECSRelayService->MakeClient();
		ECSRelayServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallECSRelayServicePing::OnContextStateChange);
		ECSRelayServiceClient->OnPingResponse.AddUniqueDynamic(this, &UCallECSRelayServicePing::OnResponse);

		Context = ECSRelayServiceClient->InitPing();
		ECSRelayServiceClient->Ping(Context, Request);
	}
}

void UCallECSRelayServicePing::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallECSRelayServicePing::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcEcsrelayIdentity& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallECSRelayServicePing::Shutdown()
{
	ECSRelayService->OnServiceStateChanged.RemoveDynamic(this, &UCallECSRelayServicePing::OnServiceStateChanged);
	if (ECSRelayServiceClient != nullptr)
	{
		ECSRelayService->RemoveClient(ECSRelayServiceClient);
		ECSRelayServiceClient->Shutdown();
		ECSRelayServiceClient = nullptr;
	}

	if (ECSRelayService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ECSRelayService);
		ECSRelayService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallECSRelayServiceCountAuthenticated* UCallECSRelayServiceCountAuthenticated::CountAuthenticated(UObject* WorldContextObject, const FGrpcEcsrelayCountIdentitiesRequest& Request)
{
	UCallECSRelayServiceCountAuthenticated* node = NewObject<UCallECSRelayServiceCountAuthenticated>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ECSRelayService = Cast<UECSRelayService>(turboLinkManager->MakeService("ECSRelayService"));
	if (node->ECSRelayService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->ECSRelayService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallECSRelayServiceCountAuthenticated::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->ECSRelayService->Connect();
	}));
	return node;
}

void UCallECSRelayServiceCountAuthenticated::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcEcsrelayCountIdentitiesResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ECSRelayServiceClient = ECSRelayService->MakeClient();
		ECSRelayServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallECSRelayServiceCountAuthenticated::OnContextStateChange);
		ECSRelayServiceClient->OnCountAuthenticatedResponse.AddUniqueDynamic(this, &UCallECSRelayServiceCountAuthenticated::OnResponse);

		Context = ECSRelayServiceClient->InitCountAuthenticated();
		ECSRelayServiceClient->CountAuthenticated(Context, Request);
	}
}

void UCallECSRelayServiceCountAuthenticated::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallECSRelayServiceCountAuthenticated::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcEcsrelayCountIdentitiesResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallECSRelayServiceCountAuthenticated::Shutdown()
{
	ECSRelayService->OnServiceStateChanged.RemoveDynamic(this, &UCallECSRelayServiceCountAuthenticated::OnServiceStateChanged);
	if (ECSRelayServiceClient != nullptr)
	{
		ECSRelayService->RemoveClient(ECSRelayServiceClient);
		ECSRelayServiceClient->Shutdown();
		ECSRelayServiceClient = nullptr;
	}

	if (ECSRelayService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ECSRelayService);
		ECSRelayService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallECSRelayServiceCountConnected* UCallECSRelayServiceCountConnected::CountConnected(UObject* WorldContextObject, const FGrpcEcsrelayCountIdentitiesRequest& Request)
{
	UCallECSRelayServiceCountConnected* node = NewObject<UCallECSRelayServiceCountConnected>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ECSRelayService = Cast<UECSRelayService>(turboLinkManager->MakeService("ECSRelayService"));
	if (node->ECSRelayService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->ECSRelayService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallECSRelayServiceCountConnected::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->ECSRelayService->Connect();
	}));
	return node;
}

void UCallECSRelayServiceCountConnected::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcEcsrelayCountIdentitiesResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ECSRelayServiceClient = ECSRelayService->MakeClient();
		ECSRelayServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallECSRelayServiceCountConnected::OnContextStateChange);
		ECSRelayServiceClient->OnCountConnectedResponse.AddUniqueDynamic(this, &UCallECSRelayServiceCountConnected::OnResponse);

		Context = ECSRelayServiceClient->InitCountConnected();
		ECSRelayServiceClient->CountConnected(Context, Request);
	}
}

void UCallECSRelayServiceCountConnected::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallECSRelayServiceCountConnected::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcEcsrelayCountIdentitiesResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallECSRelayServiceCountConnected::Shutdown()
{
	ECSRelayService->OnServiceStateChanged.RemoveDynamic(this, &UCallECSRelayServiceCountConnected::OnServiceStateChanged);
	if (ECSRelayServiceClient != nullptr)
	{
		ECSRelayService->RemoveClient(ECSRelayServiceClient);
		ECSRelayServiceClient->Shutdown();
		ECSRelayServiceClient = nullptr;
	}

	if (ECSRelayService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ECSRelayService);
		ECSRelayService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallECSRelayServiceSubscribe* UCallECSRelayServiceSubscribe::Subscribe(UObject* WorldContextObject, const FGrpcEcsrelaySubscriptionRequest& Request)
{
	UCallECSRelayServiceSubscribe* node = NewObject<UCallECSRelayServiceSubscribe>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ECSRelayService = Cast<UECSRelayService>(turboLinkManager->MakeService("ECSRelayService"));
	if (node->ECSRelayService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->ECSRelayService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallECSRelayServiceSubscribe::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->ECSRelayService->Connect();
	}));
	return node;
}

void UCallECSRelayServiceSubscribe::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcEcsrelaySubscription response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ECSRelayServiceClient = ECSRelayService->MakeClient();
		ECSRelayServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallECSRelayServiceSubscribe::OnContextStateChange);
		ECSRelayServiceClient->OnSubscribeResponse.AddUniqueDynamic(this, &UCallECSRelayServiceSubscribe::OnResponse);

		Context = ECSRelayServiceClient->InitSubscribe();
		ECSRelayServiceClient->Subscribe(Context, Request);
	}
}

void UCallECSRelayServiceSubscribe::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallECSRelayServiceSubscribe::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcEcsrelaySubscription& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallECSRelayServiceSubscribe::Shutdown()
{
	ECSRelayService->OnServiceStateChanged.RemoveDynamic(this, &UCallECSRelayServiceSubscribe::OnServiceStateChanged);
	if (ECSRelayServiceClient != nullptr)
	{
		ECSRelayService->RemoveClient(ECSRelayServiceClient);
		ECSRelayServiceClient->Shutdown();
		ECSRelayServiceClient = nullptr;
	}

	if (ECSRelayService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ECSRelayService);
		ECSRelayService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallECSRelayServiceUnsubscribe* UCallECSRelayServiceUnsubscribe::Unsubscribe(UObject* WorldContextObject, const FGrpcEcsrelaySubscriptionRequest& Request)
{
	UCallECSRelayServiceUnsubscribe* node = NewObject<UCallECSRelayServiceUnsubscribe>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ECSRelayService = Cast<UECSRelayService>(turboLinkManager->MakeService("ECSRelayService"));
	if (node->ECSRelayService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->ECSRelayService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallECSRelayServiceUnsubscribe::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->ECSRelayService->Connect();
	}));
	return node;
}

void UCallECSRelayServiceUnsubscribe::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcEcsrelaySubscription response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ECSRelayServiceClient = ECSRelayService->MakeClient();
		ECSRelayServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallECSRelayServiceUnsubscribe::OnContextStateChange);
		ECSRelayServiceClient->OnUnsubscribeResponse.AddUniqueDynamic(this, &UCallECSRelayServiceUnsubscribe::OnResponse);

		Context = ECSRelayServiceClient->InitUnsubscribe();
		ECSRelayServiceClient->Unsubscribe(Context, Request);
	}
}

void UCallECSRelayServiceUnsubscribe::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallECSRelayServiceUnsubscribe::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcEcsrelaySubscription& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallECSRelayServiceUnsubscribe::Shutdown()
{
	ECSRelayService->OnServiceStateChanged.RemoveDynamic(this, &UCallECSRelayServiceUnsubscribe::OnServiceStateChanged);
	if (ECSRelayServiceClient != nullptr)
	{
		ECSRelayService->RemoveClient(ECSRelayServiceClient);
		ECSRelayServiceClient->Shutdown();
		ECSRelayServiceClient = nullptr;
	}

	if (ECSRelayService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ECSRelayService);
		ECSRelayService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallECSRelayServicePush* UCallECSRelayServicePush::Push(UObject* WorldContextObject, const FGrpcEcsrelayPushRequest& Request)
{
	UCallECSRelayServicePush* node = NewObject<UCallECSRelayServicePush>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ECSRelayService = Cast<UECSRelayService>(turboLinkManager->MakeService("ECSRelayService"));
	if (node->ECSRelayService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->ECSRelayService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallECSRelayServicePush::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->ECSRelayService->Connect();
	}));
	return node;
}

void UCallECSRelayServicePush::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcEcsrelayPushResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ECSRelayServiceClient = ECSRelayService->MakeClient();
		ECSRelayServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallECSRelayServicePush::OnContextStateChange);
		ECSRelayServiceClient->OnPushResponse.AddUniqueDynamic(this, &UCallECSRelayServicePush::OnResponse);

		Context = ECSRelayServiceClient->InitPush();
		ECSRelayServiceClient->Push(Context, Request);
	}
}

void UCallECSRelayServicePush::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallECSRelayServicePush::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcEcsrelayPushResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallECSRelayServicePush::Shutdown()
{
	ECSRelayService->OnServiceStateChanged.RemoveDynamic(this, &UCallECSRelayServicePush::OnServiceStateChanged);
	if (ECSRelayServiceClient != nullptr)
	{
		ECSRelayService->RemoveClient(ECSRelayServiceClient);
		ECSRelayServiceClient->Shutdown();
		ECSRelayServiceClient = nullptr;
	}

	if (ECSRelayService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ECSRelayService);
		ECSRelayService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallECSRelayServiceMinBalanceForPush* UCallECSRelayServiceMinBalanceForPush::MinBalanceForPush(UObject* WorldContextObject, const FGrpcEcsrelayBalanceRequest& Request)
{
	UCallECSRelayServiceMinBalanceForPush* node = NewObject<UCallECSRelayServiceMinBalanceForPush>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ECSRelayService = Cast<UECSRelayService>(turboLinkManager->MakeService("ECSRelayService"));
	if (node->ECSRelayService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->ECSRelayService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallECSRelayServiceMinBalanceForPush::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->ECSRelayService->Connect();
	}));
	return node;
}

void UCallECSRelayServiceMinBalanceForPush::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcEcsrelayBalanceResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ECSRelayServiceClient = ECSRelayService->MakeClient();
		ECSRelayServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallECSRelayServiceMinBalanceForPush::OnContextStateChange);
		ECSRelayServiceClient->OnMinBalanceForPushResponse.AddUniqueDynamic(this, &UCallECSRelayServiceMinBalanceForPush::OnResponse);

		Context = ECSRelayServiceClient->InitMinBalanceForPush();
		ECSRelayServiceClient->MinBalanceForPush(Context, Request);
	}
}

void UCallECSRelayServiceMinBalanceForPush::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallECSRelayServiceMinBalanceForPush::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcEcsrelayBalanceResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallECSRelayServiceMinBalanceForPush::Shutdown()
{
	ECSRelayService->OnServiceStateChanged.RemoveDynamic(this, &UCallECSRelayServiceMinBalanceForPush::OnServiceStateChanged);
	if (ECSRelayServiceClient != nullptr)
	{
		ECSRelayService->RemoveClient(ECSRelayServiceClient);
		ECSRelayServiceClient->Shutdown();
		ECSRelayServiceClient = nullptr;
	}

	if (ECSRelayService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ECSRelayService);
		ECSRelayService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
