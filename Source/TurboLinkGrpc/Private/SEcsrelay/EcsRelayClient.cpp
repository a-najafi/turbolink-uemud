//Generated by TurboLink CodeGenerator, do not edit!
#include "SEcsrelay/EcsRelayClient.h"
#include "SEcsrelay/EcsRelayService.h"
#include "EcsRelayContext.h"
#include "TurboLinkGrpcManager_Private.h"
#include "Templates/SharedPointer.h"

FGrpcContextHandle UECSRelayServiceClient::InitAuthenticate()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSRelayService_Authenticate>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSRelayServiceClient::Authenticate(FGrpcContextHandle Handle, const FGrpcEcsrelaySignature& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextAuthenticate = StaticCastSharedPtr<GrpcContext_ECSRelayService_Authenticate>(*context);
		contextAuthenticate->Call(Request);
	}
}
FGrpcContextHandle UECSRelayServiceClient::InitRevoke()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSRelayService_Revoke>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSRelayServiceClient::Revoke(FGrpcContextHandle Handle, const FGrpcEcsrelaySignature& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextRevoke = StaticCastSharedPtr<GrpcContext_ECSRelayService_Revoke>(*context);
		contextRevoke->Call(Request);
	}
}
FGrpcContextHandle UECSRelayServiceClient::InitPing()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSRelayService_Ping>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSRelayServiceClient::Ping(FGrpcContextHandle Handle, const FGrpcEcsrelaySignature& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextPing = StaticCastSharedPtr<GrpcContext_ECSRelayService_Ping>(*context);
		contextPing->Call(Request);
	}
}
FGrpcContextHandle UECSRelayServiceClient::InitCountAuthenticated()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSRelayService_CountAuthenticated>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSRelayServiceClient::CountAuthenticated(FGrpcContextHandle Handle, const FGrpcEcsrelayCountIdentitiesRequest& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextCountAuthenticated = StaticCastSharedPtr<GrpcContext_ECSRelayService_CountAuthenticated>(*context);
		contextCountAuthenticated->Call(Request);
	}
}
FGrpcContextHandle UECSRelayServiceClient::InitCountConnected()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSRelayService_CountConnected>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSRelayServiceClient::CountConnected(FGrpcContextHandle Handle, const FGrpcEcsrelayCountIdentitiesRequest& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextCountConnected = StaticCastSharedPtr<GrpcContext_ECSRelayService_CountConnected>(*context);
		contextCountConnected->Call(Request);
	}
}
FGrpcContextHandle UECSRelayServiceClient::InitSubscribe()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSRelayService_Subscribe>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSRelayServiceClient::Subscribe(FGrpcContextHandle Handle, const FGrpcEcsrelaySubscriptionRequest& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextSubscribe = StaticCastSharedPtr<GrpcContext_ECSRelayService_Subscribe>(*context);
		contextSubscribe->Call(Request);
	}
}
FGrpcContextHandle UECSRelayServiceClient::InitUnsubscribe()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSRelayService_Unsubscribe>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSRelayServiceClient::Unsubscribe(FGrpcContextHandle Handle, const FGrpcEcsrelaySubscriptionRequest& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextUnsubscribe = StaticCastSharedPtr<GrpcContext_ECSRelayService_Unsubscribe>(*context);
		contextUnsubscribe->Call(Request);
	}
}
FGrpcContextHandle UECSRelayServiceClient::InitOpenStream()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSRelayService_OpenStream>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSRelayServiceClient::OpenStream(FGrpcContextHandle Handle, const FGrpcEcsrelaySignature& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextOpenStream = StaticCastSharedPtr<GrpcContext_ECSRelayService_OpenStream>(*context);
		contextOpenStream->Call(Request);
	}
}
FGrpcContextHandle UECSRelayServiceClient::InitPushStream()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSRelayService_PushStream>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	context->Init();
	return context->GetHandle();
}

void UECSRelayServiceClient::PushStream(FGrpcContextHandle Handle, const FGrpcEcsrelayPushRequest& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextPushStream = StaticCastSharedPtr<GrpcContext_ECSRelayService_PushStream>(*context);
		contextPushStream->Call(Request);
	}
}
FGrpcContextHandle UECSRelayServiceClient::InitPush()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSRelayService_Push>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSRelayServiceClient::Push(FGrpcContextHandle Handle, const FGrpcEcsrelayPushRequest& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextPush = StaticCastSharedPtr<GrpcContext_ECSRelayService_Push>(*context);
		contextPush->Call(Request);
	}
}
FGrpcContextHandle UECSRelayServiceClient::InitMinBalanceForPush()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSRelayService_MinBalanceForPush>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSRelayServiceClient::MinBalanceForPush(FGrpcContextHandle Handle, const FGrpcEcsrelayBalanceRequest& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextMinBalanceForPush = StaticCastSharedPtr<GrpcContext_ECSRelayService_MinBalanceForPush>(*context);
		contextMinBalanceForPush->Call(Request);
	}
}
void UECSRelayServiceClient::TryCancel(FGrpcContextHandle Handle)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		(*context)->TryCancel();
	}
}

void UECSRelayServiceClient::Shutdown()
{
	OnAuthenticateResponse.Clear();
	OnRevokeResponse.Clear();
	OnPingResponse.Clear();
	OnCountAuthenticatedResponse.Clear();
	OnCountConnectedResponse.Clear();
	OnSubscribeResponse.Clear();
	OnUnsubscribeResponse.Clear();
	OnOpenStreamResponse.Clear();
	OnPushStreamResponse.Clear();
	OnPushResponse.Clear();
	OnMinBalanceForPushResponse.Clear();
	Super::Shutdown();
}
