//Generated by TurboLink CodeGenerator, do not edit!
#include "EcsStreamMarshaling.h"

void GRPC_TO_TURBOLINK(const ::ecsstream::TxMetadata* in, FGrpcEcsstreamTxMetadata* out)
{
    out->To=UTF8_TO_TCHAR(in->to().c_str());
    out->Data=FBytes((const uint8*)in->data().c_str(), in->data().length());
    out->Value=in->value();
}

void TURBOLINK_TO_GRPC(const FGrpcEcsstreamTxMetadata* in, ::ecsstream::TxMetadata* out)
{
    out->set_to(TCHAR_TO_UTF8(*(in->To)));
    out->set_data(std::string((const char*)(in->Data.Value.GetData()), (size_t)in->Data.Value.Num()));
    out->set_value(in->Value);
}

void GRPC_TO_TURBOLINK(const ::ecsstream::ECSEvent* in, FGrpcEcsstreamECSEvent* out)
{
    out->EventType=UTF8_TO_TCHAR(in->eventtype().c_str());
    out->ComponentId=UTF8_TO_TCHAR(in->componentid().c_str());
    out->EntityId=UTF8_TO_TCHAR(in->entityid().c_str());
    out->Value=FBytes((const uint8*)in->value().c_str(), in->value().length());
    out->TxHash=UTF8_TO_TCHAR(in->txhash().c_str());
    GRPC_TO_TURBOLINK(&(in->txmetadata()), &(out->TxMetadata));
}

void TURBOLINK_TO_GRPC(const FGrpcEcsstreamECSEvent* in, ::ecsstream::ECSEvent* out)
{
    out->set_eventtype(TCHAR_TO_UTF8(*(in->EventType)));
    out->set_componentid(TCHAR_TO_UTF8(*(in->ComponentId)));
    out->set_entityid(TCHAR_TO_UTF8(*(in->EntityId)));
    out->set_value(std::string((const char*)(in->Value.Value.GetData()), (size_t)in->Value.Value.Num()));
    out->set_txhash(TCHAR_TO_UTF8(*(in->TxHash)));
    TURBOLINK_TO_GRPC(&(in->TxMetadata), out->mutable_txmetadata());
}

void GRPC_TO_TURBOLINK(const ::ecsstream::ECSStreamBlockBundleRequest* in, FGrpcEcsstreamECSStreamBlockBundleRequest* out)
{
    out->WorldAddress=UTF8_TO_TCHAR(in->worldaddress().c_str());
    out->BlockNumber=in->blocknumber();
    out->BlockHash=in->blockhash();
    out->BlockTimestamp=in->blocktimestamp();
    out->TransactionsConfirmed=in->transactionsconfirmed();
    out->EcsEvents=in->ecsevents();
    out->EcsEventsIncludeTxMetadata=in->ecseventsincludetxmetadata();
}

void TURBOLINK_TO_GRPC(const FGrpcEcsstreamECSStreamBlockBundleRequest* in, ::ecsstream::ECSStreamBlockBundleRequest* out)
{
    out->set_worldaddress(TCHAR_TO_UTF8(*(in->WorldAddress)));
    out->set_blocknumber(in->BlockNumber);
    out->set_blockhash(in->BlockHash);
    out->set_blocktimestamp(in->BlockTimestamp);
    out->set_transactionsconfirmed(in->TransactionsConfirmed);
    out->set_ecsevents(in->EcsEvents);
    out->set_ecseventsincludetxmetadata(in->EcsEventsIncludeTxMetadata);
}

void GRPC_TO_TURBOLINK(const ::ecsstream::ECSStreamBlockBundleReply* in, FGrpcEcsstreamECSStreamBlockBundleReply* out)
{
    out->BlockNumber=in->blocknumber();
    out->BlockHash=UTF8_TO_TCHAR(in->blockhash().c_str());
    out->BlockTimestamp=in->blocktimestamp();
    out->TransactionsConfirmed.Empty();
    for (int i=0; i<in->transactionsconfirmed_size(); ++i) {
        out->TransactionsConfirmed.Add(UTF8_TO_TCHAR(in->transactionsconfirmed(i).c_str()));
    }
    out->EcsEvents.Empty();
    for (int i=0; i<in->ecsevents_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->ecsevents(i)), &(out->EcsEvents.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcEcsstreamECSStreamBlockBundleReply* in, ::ecsstream::ECSStreamBlockBundleReply* out)
{
    out->set_blocknumber(in->BlockNumber);
    out->set_blockhash(TCHAR_TO_UTF8(*(in->BlockHash)));
    out->set_blocktimestamp(in->BlockTimestamp);
    for(const auto& value : in->TransactionsConfirmed) {
        out->add_transactionsconfirmed(TCHAR_TO_UTF8(*(value)));
    } 
    for(const auto& value : in->EcsEvents) {
        TURBOLINK_TO_GRPC(&value, out->add_ecsevents());
    } 
}

