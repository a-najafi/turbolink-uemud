//Generated by TurboLink CodeGenerator, do not edit!
#include "EcsSnapshotContext.h"
#include "SEcssnapshot/EcsSnapshotClient.h"
#include "EcsSnapshotService_Private.h"
#include "EcsSnapshotMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_ECSStateSnapshotService_GetStateLatest::GrpcContext_ECSStateSnapshotService_GetStateLatest(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ECSStateSnapshotService_GetStateLatest::Call(const FGrpcEcssnapshotECSStateRequestLatest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::ecssnapshot::ECSStateRequestLatest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UECSStateSnapshotService* service = (UECSStateSnapshotService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetStateLatest(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ECSStateSnapshotService_GetStateLatest::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::ecssnapshot::ECSStateReply* _RpcResponse) {
		UECSStateSnapshotServiceClient* client = (UECSStateSnapshotServiceClient*)(this->Client);
		if (!(client->OnGetStateLatestResponse.IsBound())) return;

		FGrpcEcssnapshotECSStateReply response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetStateLatestResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ECSStateSnapshotService_GetStateLatestStream::GrpcContext_ECSStateSnapshotService_GetStateLatestStream(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ECSStateSnapshotService_GetStateLatestStream::Call(const FGrpcEcssnapshotECSStateRequestLatestStream& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::ecssnapshot::ECSStateRequestLatestStream rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UECSStateSnapshotService* service = (UECSStateSnapshotService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetStateLatestStream(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

void GrpcContext_ECSStateSnapshotService_GetStateLatestStream::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::ecssnapshot::ECSStateReply* _RpcResponse) {
		UECSStateSnapshotServiceClient* client = (UECSStateSnapshotServiceClient*)(this->Client);
		if (!(client->OnGetStateLatestStreamResponse.IsBound())) return;

		FGrpcEcssnapshotECSStateReply response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetStateLatestStreamResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ECSStateSnapshotService_GetStateLatestStreamV2::GrpcContext_ECSStateSnapshotService_GetStateLatestStreamV2(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ECSStateSnapshotService_GetStateLatestStreamV2::Call(const FGrpcEcssnapshotECSStateRequestLatestStream& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::ecssnapshot::ECSStateRequestLatestStream rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UECSStateSnapshotService* service = (UECSStateSnapshotService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetStateLatestStreamV2(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

void GrpcContext_ECSStateSnapshotService_GetStateLatestStreamV2::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::ecssnapshot::ECSStateReplyV2* _RpcResponse) {
		UECSStateSnapshotServiceClient* client = (UECSStateSnapshotServiceClient*)(this->Client);
		if (!(client->OnGetStateLatestStreamV2Response.IsBound())) return;

		FGrpcEcssnapshotECSStateReplyV2 response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetStateLatestStreamV2Response.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ECSStateSnapshotService_GetStateLatestStreamPruned::GrpcContext_ECSStateSnapshotService_GetStateLatestStreamPruned(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ECSStateSnapshotService_GetStateLatestStreamPruned::Call(const FGrpcEcssnapshotECSStateRequestLatestStreamPruned& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::ecssnapshot::ECSStateRequestLatestStreamPruned rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UECSStateSnapshotService* service = (UECSStateSnapshotService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetStateLatestStreamPruned(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

void GrpcContext_ECSStateSnapshotService_GetStateLatestStreamPruned::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::ecssnapshot::ECSStateReply* _RpcResponse) {
		UECSStateSnapshotServiceClient* client = (UECSStateSnapshotServiceClient*)(this->Client);
		if (!(client->OnGetStateLatestStreamPrunedResponse.IsBound())) return;

		FGrpcEcssnapshotECSStateReply response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetStateLatestStreamPrunedResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ECSStateSnapshotService_GetStateLatestStreamPrunedV2::GrpcContext_ECSStateSnapshotService_GetStateLatestStreamPrunedV2(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ECSStateSnapshotService_GetStateLatestStreamPrunedV2::Call(const FGrpcEcssnapshotECSStateRequestLatestStreamPruned& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::ecssnapshot::ECSStateRequestLatestStreamPruned rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UECSStateSnapshotService* service = (UECSStateSnapshotService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetStateLatestStreamPrunedV2(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

void GrpcContext_ECSStateSnapshotService_GetStateLatestStreamPrunedV2::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::ecssnapshot::ECSStateReplyV2* _RpcResponse) {
		UECSStateSnapshotServiceClient* client = (UECSStateSnapshotServiceClient*)(this->Client);
		if (!(client->OnGetStateLatestStreamPrunedV2Response.IsBound())) return;

		FGrpcEcssnapshotECSStateReplyV2 response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetStateLatestStreamPrunedV2Response.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ECSStateSnapshotService_GetStateBlockLatest::GrpcContext_ECSStateSnapshotService_GetStateBlockLatest(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ECSStateSnapshotService_GetStateBlockLatest::Call(const FGrpcEcssnapshotECSStateBlockRequestLatest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::ecssnapshot::ECSStateBlockRequestLatest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UECSStateSnapshotService* service = (UECSStateSnapshotService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetStateBlockLatest(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ECSStateSnapshotService_GetStateBlockLatest::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::ecssnapshot::ECSStateBlockReply* _RpcResponse) {
		UECSStateSnapshotServiceClient* client = (UECSStateSnapshotServiceClient*)(this->Client);
		if (!(client->OnGetStateBlockLatestResponse.IsBound())) return;

		FGrpcEcssnapshotECSStateBlockReply response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetStateBlockLatestResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ECSStateSnapshotService_GetStateAtBlock::GrpcContext_ECSStateSnapshotService_GetStateAtBlock(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ECSStateSnapshotService_GetStateAtBlock::Call(const FGrpcEcssnapshotECSStateRequestAtBlock& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::ecssnapshot::ECSStateRequestAtBlock rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UECSStateSnapshotService* service = (UECSStateSnapshotService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetStateAtBlock(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ECSStateSnapshotService_GetStateAtBlock::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::ecssnapshot::ECSStateReply* _RpcResponse) {
		UECSStateSnapshotServiceClient* client = (UECSStateSnapshotServiceClient*)(this->Client);
		if (!(client->OnGetStateAtBlockResponse.IsBound())) return;

		FGrpcEcssnapshotECSStateReply response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetStateAtBlockResponse.Broadcast(Handle, _Result, response);
	});
}

GrpcContext_ECSStateSnapshotService_GetWorlds::GrpcContext_ECSStateSnapshotService_GetWorlds(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ECSStateSnapshotService_GetWorlds::Call(const FGrpcEcssnapshotWorldsRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::ecssnapshot::WorldsRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UECSStateSnapshotService* service = (UECSStateSnapshotService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetWorlds(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ECSStateSnapshotService_GetWorlds::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, [this](const FGrpcResult& _Result, ::ecssnapshot::Worlds* _RpcResponse) {
		UECSStateSnapshotServiceClient* client = (UECSStateSnapshotServiceClient*)(this->Client);
		if (!(client->OnGetWorldsResponse.IsBound())) return;

		FGrpcEcssnapshotWorlds response;
		if (_RpcResponse) {
			GRPC_TO_TURBOLINK(_RpcResponse, &response);
		}
		client->OnGetWorldsResponse.Broadcast(Handle, _Result, response);
	});
}
