// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: faucet.proto
#ifndef GRPC_faucet_2eproto__INCLUDED
#define GRPC_faucet_2eproto__INCLUDED

#include "faucet.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace faucet {

// The Faucet Service definition.
class FaucetService final {
 public:
  static constexpr char const* service_full_name() {
    return "faucet.FaucetService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Drip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::faucet::DripResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>> AsyncDrip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>>(AsyncDripRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>> PrepareAsyncDrip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>>(PrepareAsyncDripRaw(context, request, cq));
    }
    virtual ::grpc::Status DripDev(::grpc::ClientContext* context, const ::faucet::DripDevRequest& request, ::faucet::DripResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>> AsyncDripDev(::grpc::ClientContext* context, const ::faucet::DripDevRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>>(AsyncDripDevRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>> PrepareAsyncDripDev(::grpc::ClientContext* context, const ::faucet::DripDevRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>>(PrepareAsyncDripDevRaw(context, request, cq));
    }
    virtual ::grpc::Status DripVerifyTweet(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::faucet::DripResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>> AsyncDripVerifyTweet(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>>(AsyncDripVerifyTweetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>> PrepareAsyncDripVerifyTweet(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>>(PrepareAsyncDripVerifyTweetRaw(context, request, cq));
    }
    virtual ::grpc::Status TimeUntilDrip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::faucet::TimeUntilDripResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::TimeUntilDripResponse>> AsyncTimeUntilDrip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::TimeUntilDripResponse>>(AsyncTimeUntilDripRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::TimeUntilDripResponse>> PrepareAsyncTimeUntilDrip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::TimeUntilDripResponse>>(PrepareAsyncTimeUntilDripRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLinkedTwitters(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest& request, ::faucet::GetLinkedTwittersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::GetLinkedTwittersResponse>> AsyncGetLinkedTwitters(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::GetLinkedTwittersResponse>>(AsyncGetLinkedTwittersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::GetLinkedTwittersResponse>> PrepareAsyncGetLinkedTwitters(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::GetLinkedTwittersResponse>>(PrepareAsyncGetLinkedTwittersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLinkedTwitterForAddress(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest& request, ::faucet::LinkedTwitterForAddressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::LinkedTwitterForAddressResponse>> AsyncGetLinkedTwitterForAddress(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::LinkedTwitterForAddressResponse>>(AsyncGetLinkedTwitterForAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::LinkedTwitterForAddressResponse>> PrepareAsyncGetLinkedTwitterForAddress(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::LinkedTwitterForAddressResponse>>(PrepareAsyncGetLinkedTwitterForAddressRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLinkedAddressForTwitter(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest& request, ::faucet::LinkedAddressForTwitterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::LinkedAddressForTwitterResponse>> AsyncGetLinkedAddressForTwitter(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::LinkedAddressForTwitterResponse>>(AsyncGetLinkedAddressForTwitterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::LinkedAddressForTwitterResponse>> PrepareAsyncGetLinkedAddressForTwitter(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::LinkedAddressForTwitterResponse>>(PrepareAsyncGetLinkedAddressForTwitterRaw(context, request, cq));
    }
    // Admin utility endpoints for modifying state. Requires a signature with faucet private key.
    virtual ::grpc::Status SetLinkedTwitter(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest& request, ::faucet::SetLinkedTwitterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::SetLinkedTwitterResponse>> AsyncSetLinkedTwitter(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::SetLinkedTwitterResponse>>(AsyncSetLinkedTwitterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::SetLinkedTwitterResponse>> PrepareAsyncSetLinkedTwitter(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::faucet::SetLinkedTwitterResponse>>(PrepareAsyncSetLinkedTwitterRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Drip(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Drip(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DripDev(::grpc::ClientContext* context, const ::faucet::DripDevRequest* request, ::faucet::DripResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DripDev(::grpc::ClientContext* context, const ::faucet::DripDevRequest* request, ::faucet::DripResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DripVerifyTweet(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DripVerifyTweet(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TimeUntilDrip(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::TimeUntilDripResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TimeUntilDrip(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::TimeUntilDripResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLinkedTwitters(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest* request, ::faucet::GetLinkedTwittersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLinkedTwitters(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest* request, ::faucet::GetLinkedTwittersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLinkedTwitterForAddress(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest* request, ::faucet::LinkedTwitterForAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLinkedTwitterForAddress(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest* request, ::faucet::LinkedTwitterForAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLinkedAddressForTwitter(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest* request, ::faucet::LinkedAddressForTwitterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLinkedAddressForTwitter(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest* request, ::faucet::LinkedAddressForTwitterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Admin utility endpoints for modifying state. Requires a signature with faucet private key.
      virtual void SetLinkedTwitter(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest* request, ::faucet::SetLinkedTwitterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetLinkedTwitter(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest* request, ::faucet::SetLinkedTwitterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>* AsyncDripRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>* PrepareAsyncDripRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>* AsyncDripDevRaw(::grpc::ClientContext* context, const ::faucet::DripDevRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>* PrepareAsyncDripDevRaw(::grpc::ClientContext* context, const ::faucet::DripDevRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>* AsyncDripVerifyTweetRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::DripResponse>* PrepareAsyncDripVerifyTweetRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::TimeUntilDripResponse>* AsyncTimeUntilDripRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::TimeUntilDripResponse>* PrepareAsyncTimeUntilDripRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::GetLinkedTwittersResponse>* AsyncGetLinkedTwittersRaw(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::GetLinkedTwittersResponse>* PrepareAsyncGetLinkedTwittersRaw(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::LinkedTwitterForAddressResponse>* AsyncGetLinkedTwitterForAddressRaw(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::LinkedTwitterForAddressResponse>* PrepareAsyncGetLinkedTwitterForAddressRaw(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::LinkedAddressForTwitterResponse>* AsyncGetLinkedAddressForTwitterRaw(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::LinkedAddressForTwitterResponse>* PrepareAsyncGetLinkedAddressForTwitterRaw(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::SetLinkedTwitterResponse>* AsyncSetLinkedTwitterRaw(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::faucet::SetLinkedTwitterResponse>* PrepareAsyncSetLinkedTwitterRaw(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Drip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::faucet::DripResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>> AsyncDrip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>>(AsyncDripRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>> PrepareAsyncDrip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>>(PrepareAsyncDripRaw(context, request, cq));
    }
    ::grpc::Status DripDev(::grpc::ClientContext* context, const ::faucet::DripDevRequest& request, ::faucet::DripResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>> AsyncDripDev(::grpc::ClientContext* context, const ::faucet::DripDevRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>>(AsyncDripDevRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>> PrepareAsyncDripDev(::grpc::ClientContext* context, const ::faucet::DripDevRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>>(PrepareAsyncDripDevRaw(context, request, cq));
    }
    ::grpc::Status DripVerifyTweet(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::faucet::DripResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>> AsyncDripVerifyTweet(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>>(AsyncDripVerifyTweetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>> PrepareAsyncDripVerifyTweet(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>>(PrepareAsyncDripVerifyTweetRaw(context, request, cq));
    }
    ::grpc::Status TimeUntilDrip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::faucet::TimeUntilDripResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::TimeUntilDripResponse>> AsyncTimeUntilDrip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::TimeUntilDripResponse>>(AsyncTimeUntilDripRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::TimeUntilDripResponse>> PrepareAsyncTimeUntilDrip(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::TimeUntilDripResponse>>(PrepareAsyncTimeUntilDripRaw(context, request, cq));
    }
    ::grpc::Status GetLinkedTwitters(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest& request, ::faucet::GetLinkedTwittersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::GetLinkedTwittersResponse>> AsyncGetLinkedTwitters(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::GetLinkedTwittersResponse>>(AsyncGetLinkedTwittersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::GetLinkedTwittersResponse>> PrepareAsyncGetLinkedTwitters(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::GetLinkedTwittersResponse>>(PrepareAsyncGetLinkedTwittersRaw(context, request, cq));
    }
    ::grpc::Status GetLinkedTwitterForAddress(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest& request, ::faucet::LinkedTwitterForAddressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::LinkedTwitterForAddressResponse>> AsyncGetLinkedTwitterForAddress(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::LinkedTwitterForAddressResponse>>(AsyncGetLinkedTwitterForAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::LinkedTwitterForAddressResponse>> PrepareAsyncGetLinkedTwitterForAddress(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::LinkedTwitterForAddressResponse>>(PrepareAsyncGetLinkedTwitterForAddressRaw(context, request, cq));
    }
    ::grpc::Status GetLinkedAddressForTwitter(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest& request, ::faucet::LinkedAddressForTwitterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::LinkedAddressForTwitterResponse>> AsyncGetLinkedAddressForTwitter(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::LinkedAddressForTwitterResponse>>(AsyncGetLinkedAddressForTwitterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::LinkedAddressForTwitterResponse>> PrepareAsyncGetLinkedAddressForTwitter(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::LinkedAddressForTwitterResponse>>(PrepareAsyncGetLinkedAddressForTwitterRaw(context, request, cq));
    }
    ::grpc::Status SetLinkedTwitter(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest& request, ::faucet::SetLinkedTwitterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::SetLinkedTwitterResponse>> AsyncSetLinkedTwitter(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::SetLinkedTwitterResponse>>(AsyncSetLinkedTwitterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::SetLinkedTwitterResponse>> PrepareAsyncSetLinkedTwitter(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::faucet::SetLinkedTwitterResponse>>(PrepareAsyncSetLinkedTwitterRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Drip(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response, std::function<void(::grpc::Status)>) override;
      void Drip(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DripDev(::grpc::ClientContext* context, const ::faucet::DripDevRequest* request, ::faucet::DripResponse* response, std::function<void(::grpc::Status)>) override;
      void DripDev(::grpc::ClientContext* context, const ::faucet::DripDevRequest* request, ::faucet::DripResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DripVerifyTweet(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response, std::function<void(::grpc::Status)>) override;
      void DripVerifyTweet(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TimeUntilDrip(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::TimeUntilDripResponse* response, std::function<void(::grpc::Status)>) override;
      void TimeUntilDrip(::grpc::ClientContext* context, const ::faucet::DripRequest* request, ::faucet::TimeUntilDripResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLinkedTwitters(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest* request, ::faucet::GetLinkedTwittersResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLinkedTwitters(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest* request, ::faucet::GetLinkedTwittersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLinkedTwitterForAddress(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest* request, ::faucet::LinkedTwitterForAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLinkedTwitterForAddress(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest* request, ::faucet::LinkedTwitterForAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLinkedAddressForTwitter(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest* request, ::faucet::LinkedAddressForTwitterResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLinkedAddressForTwitter(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest* request, ::faucet::LinkedAddressForTwitterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetLinkedTwitter(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest* request, ::faucet::SetLinkedTwitterResponse* response, std::function<void(::grpc::Status)>) override;
      void SetLinkedTwitter(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest* request, ::faucet::SetLinkedTwitterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>* AsyncDripRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>* PrepareAsyncDripRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>* AsyncDripDevRaw(::grpc::ClientContext* context, const ::faucet::DripDevRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>* PrepareAsyncDripDevRaw(::grpc::ClientContext* context, const ::faucet::DripDevRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>* AsyncDripVerifyTweetRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::DripResponse>* PrepareAsyncDripVerifyTweetRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::TimeUntilDripResponse>* AsyncTimeUntilDripRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::TimeUntilDripResponse>* PrepareAsyncTimeUntilDripRaw(::grpc::ClientContext* context, const ::faucet::DripRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::GetLinkedTwittersResponse>* AsyncGetLinkedTwittersRaw(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::GetLinkedTwittersResponse>* PrepareAsyncGetLinkedTwittersRaw(::grpc::ClientContext* context, const ::faucet::GetLinkedTwittersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::LinkedTwitterForAddressResponse>* AsyncGetLinkedTwitterForAddressRaw(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::LinkedTwitterForAddressResponse>* PrepareAsyncGetLinkedTwitterForAddressRaw(::grpc::ClientContext* context, const ::faucet::LinkedTwitterForAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::LinkedAddressForTwitterResponse>* AsyncGetLinkedAddressForTwitterRaw(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::LinkedAddressForTwitterResponse>* PrepareAsyncGetLinkedAddressForTwitterRaw(::grpc::ClientContext* context, const ::faucet::LinkedAddressForTwitterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::SetLinkedTwitterResponse>* AsyncSetLinkedTwitterRaw(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::faucet::SetLinkedTwitterResponse>* PrepareAsyncSetLinkedTwitterRaw(::grpc::ClientContext* context, const ::faucet::SetLinkedTwitterRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Drip_;
    const ::grpc::internal::RpcMethod rpcmethod_DripDev_;
    const ::grpc::internal::RpcMethod rpcmethod_DripVerifyTweet_;
    const ::grpc::internal::RpcMethod rpcmethod_TimeUntilDrip_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLinkedTwitters_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLinkedTwitterForAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLinkedAddressForTwitter_;
    const ::grpc::internal::RpcMethod rpcmethod_SetLinkedTwitter_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Drip(::grpc::ServerContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response);
    virtual ::grpc::Status DripDev(::grpc::ServerContext* context, const ::faucet::DripDevRequest* request, ::faucet::DripResponse* response);
    virtual ::grpc::Status DripVerifyTweet(::grpc::ServerContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response);
    virtual ::grpc::Status TimeUntilDrip(::grpc::ServerContext* context, const ::faucet::DripRequest* request, ::faucet::TimeUntilDripResponse* response);
    virtual ::grpc::Status GetLinkedTwitters(::grpc::ServerContext* context, const ::faucet::GetLinkedTwittersRequest* request, ::faucet::GetLinkedTwittersResponse* response);
    virtual ::grpc::Status GetLinkedTwitterForAddress(::grpc::ServerContext* context, const ::faucet::LinkedTwitterForAddressRequest* request, ::faucet::LinkedTwitterForAddressResponse* response);
    virtual ::grpc::Status GetLinkedAddressForTwitter(::grpc::ServerContext* context, const ::faucet::LinkedAddressForTwitterRequest* request, ::faucet::LinkedAddressForTwitterResponse* response);
    // Admin utility endpoints for modifying state. Requires a signature with faucet private key.
    virtual ::grpc::Status SetLinkedTwitter(::grpc::ServerContext* context, const ::faucet::SetLinkedTwitterRequest* request, ::faucet::SetLinkedTwitterResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Drip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Drip() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Drip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Drip(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDrip(::grpc::ServerContext* context, ::faucet::DripRequest* request, ::grpc::ServerAsyncResponseWriter< ::faucet::DripResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DripDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DripDev() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DripDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DripDev(::grpc::ServerContext* /*context*/, const ::faucet::DripDevRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDripDev(::grpc::ServerContext* context, ::faucet::DripDevRequest* request, ::grpc::ServerAsyncResponseWriter< ::faucet::DripResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DripVerifyTweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DripVerifyTweet() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DripVerifyTweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DripVerifyTweet(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDripVerifyTweet(::grpc::ServerContext* context, ::faucet::DripRequest* request, ::grpc::ServerAsyncResponseWriter< ::faucet::DripResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TimeUntilDrip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TimeUntilDrip() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TimeUntilDrip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimeUntilDrip(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::TimeUntilDripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTimeUntilDrip(::grpc::ServerContext* context, ::faucet::DripRequest* request, ::grpc::ServerAsyncResponseWriter< ::faucet::TimeUntilDripResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLinkedTwitters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLinkedTwitters() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetLinkedTwitters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedTwitters(::grpc::ServerContext* /*context*/, const ::faucet::GetLinkedTwittersRequest* /*request*/, ::faucet::GetLinkedTwittersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLinkedTwitters(::grpc::ServerContext* context, ::faucet::GetLinkedTwittersRequest* request, ::grpc::ServerAsyncResponseWriter< ::faucet::GetLinkedTwittersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLinkedTwitterForAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLinkedTwitterForAddress() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetLinkedTwitterForAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedTwitterForAddress(::grpc::ServerContext* /*context*/, const ::faucet::LinkedTwitterForAddressRequest* /*request*/, ::faucet::LinkedTwitterForAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLinkedTwitterForAddress(::grpc::ServerContext* context, ::faucet::LinkedTwitterForAddressRequest* request, ::grpc::ServerAsyncResponseWriter< ::faucet::LinkedTwitterForAddressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLinkedAddressForTwitter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLinkedAddressForTwitter() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetLinkedAddressForTwitter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedAddressForTwitter(::grpc::ServerContext* /*context*/, const ::faucet::LinkedAddressForTwitterRequest* /*request*/, ::faucet::LinkedAddressForTwitterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLinkedAddressForTwitter(::grpc::ServerContext* context, ::faucet::LinkedAddressForTwitterRequest* request, ::grpc::ServerAsyncResponseWriter< ::faucet::LinkedAddressForTwitterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetLinkedTwitter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetLinkedTwitter() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetLinkedTwitter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLinkedTwitter(::grpc::ServerContext* /*context*/, const ::faucet::SetLinkedTwitterRequest* /*request*/, ::faucet::SetLinkedTwitterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLinkedTwitter(::grpc::ServerContext* context, ::faucet::SetLinkedTwitterRequest* request, ::grpc::ServerAsyncResponseWriter< ::faucet::SetLinkedTwitterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Drip<WithAsyncMethod_DripDev<WithAsyncMethod_DripVerifyTweet<WithAsyncMethod_TimeUntilDrip<WithAsyncMethod_GetLinkedTwitters<WithAsyncMethod_GetLinkedTwitterForAddress<WithAsyncMethod_GetLinkedAddressForTwitter<WithAsyncMethod_SetLinkedTwitter<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Drip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Drip() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::faucet::DripRequest, ::faucet::DripResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response) { return this->Drip(context, request, response); }));}
    void SetMessageAllocatorFor_Drip(
        ::grpc::MessageAllocator< ::faucet::DripRequest, ::faucet::DripResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faucet::DripRequest, ::faucet::DripResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Drip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Drip(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Drip(
      ::grpc::CallbackServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DripDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DripDev() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::faucet::DripDevRequest, ::faucet::DripResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::faucet::DripDevRequest* request, ::faucet::DripResponse* response) { return this->DripDev(context, request, response); }));}
    void SetMessageAllocatorFor_DripDev(
        ::grpc::MessageAllocator< ::faucet::DripDevRequest, ::faucet::DripResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faucet::DripDevRequest, ::faucet::DripResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DripDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DripDev(::grpc::ServerContext* /*context*/, const ::faucet::DripDevRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DripDev(
      ::grpc::CallbackServerContext* /*context*/, const ::faucet::DripDevRequest* /*request*/, ::faucet::DripResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DripVerifyTweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DripVerifyTweet() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::faucet::DripRequest, ::faucet::DripResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::faucet::DripRequest* request, ::faucet::DripResponse* response) { return this->DripVerifyTweet(context, request, response); }));}
    void SetMessageAllocatorFor_DripVerifyTweet(
        ::grpc::MessageAllocator< ::faucet::DripRequest, ::faucet::DripResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faucet::DripRequest, ::faucet::DripResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DripVerifyTweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DripVerifyTweet(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DripVerifyTweet(
      ::grpc::CallbackServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TimeUntilDrip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TimeUntilDrip() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::faucet::DripRequest, ::faucet::TimeUntilDripResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::faucet::DripRequest* request, ::faucet::TimeUntilDripResponse* response) { return this->TimeUntilDrip(context, request, response); }));}
    void SetMessageAllocatorFor_TimeUntilDrip(
        ::grpc::MessageAllocator< ::faucet::DripRequest, ::faucet::TimeUntilDripResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faucet::DripRequest, ::faucet::TimeUntilDripResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TimeUntilDrip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimeUntilDrip(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::TimeUntilDripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TimeUntilDrip(
      ::grpc::CallbackServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::TimeUntilDripResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLinkedTwitters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLinkedTwitters() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::faucet::GetLinkedTwittersRequest, ::faucet::GetLinkedTwittersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::faucet::GetLinkedTwittersRequest* request, ::faucet::GetLinkedTwittersResponse* response) { return this->GetLinkedTwitters(context, request, response); }));}
    void SetMessageAllocatorFor_GetLinkedTwitters(
        ::grpc::MessageAllocator< ::faucet::GetLinkedTwittersRequest, ::faucet::GetLinkedTwittersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faucet::GetLinkedTwittersRequest, ::faucet::GetLinkedTwittersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLinkedTwitters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedTwitters(::grpc::ServerContext* /*context*/, const ::faucet::GetLinkedTwittersRequest* /*request*/, ::faucet::GetLinkedTwittersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLinkedTwitters(
      ::grpc::CallbackServerContext* /*context*/, const ::faucet::GetLinkedTwittersRequest* /*request*/, ::faucet::GetLinkedTwittersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLinkedTwitterForAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLinkedTwitterForAddress() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::faucet::LinkedTwitterForAddressRequest, ::faucet::LinkedTwitterForAddressResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::faucet::LinkedTwitterForAddressRequest* request, ::faucet::LinkedTwitterForAddressResponse* response) { return this->GetLinkedTwitterForAddress(context, request, response); }));}
    void SetMessageAllocatorFor_GetLinkedTwitterForAddress(
        ::grpc::MessageAllocator< ::faucet::LinkedTwitterForAddressRequest, ::faucet::LinkedTwitterForAddressResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faucet::LinkedTwitterForAddressRequest, ::faucet::LinkedTwitterForAddressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLinkedTwitterForAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedTwitterForAddress(::grpc::ServerContext* /*context*/, const ::faucet::LinkedTwitterForAddressRequest* /*request*/, ::faucet::LinkedTwitterForAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLinkedTwitterForAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::faucet::LinkedTwitterForAddressRequest* /*request*/, ::faucet::LinkedTwitterForAddressResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLinkedAddressForTwitter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLinkedAddressForTwitter() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::faucet::LinkedAddressForTwitterRequest, ::faucet::LinkedAddressForTwitterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::faucet::LinkedAddressForTwitterRequest* request, ::faucet::LinkedAddressForTwitterResponse* response) { return this->GetLinkedAddressForTwitter(context, request, response); }));}
    void SetMessageAllocatorFor_GetLinkedAddressForTwitter(
        ::grpc::MessageAllocator< ::faucet::LinkedAddressForTwitterRequest, ::faucet::LinkedAddressForTwitterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faucet::LinkedAddressForTwitterRequest, ::faucet::LinkedAddressForTwitterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLinkedAddressForTwitter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedAddressForTwitter(::grpc::ServerContext* /*context*/, const ::faucet::LinkedAddressForTwitterRequest* /*request*/, ::faucet::LinkedAddressForTwitterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLinkedAddressForTwitter(
      ::grpc::CallbackServerContext* /*context*/, const ::faucet::LinkedAddressForTwitterRequest* /*request*/, ::faucet::LinkedAddressForTwitterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetLinkedTwitter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetLinkedTwitter() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::faucet::SetLinkedTwitterRequest, ::faucet::SetLinkedTwitterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::faucet::SetLinkedTwitterRequest* request, ::faucet::SetLinkedTwitterResponse* response) { return this->SetLinkedTwitter(context, request, response); }));}
    void SetMessageAllocatorFor_SetLinkedTwitter(
        ::grpc::MessageAllocator< ::faucet::SetLinkedTwitterRequest, ::faucet::SetLinkedTwitterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::faucet::SetLinkedTwitterRequest, ::faucet::SetLinkedTwitterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetLinkedTwitter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLinkedTwitter(::grpc::ServerContext* /*context*/, const ::faucet::SetLinkedTwitterRequest* /*request*/, ::faucet::SetLinkedTwitterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLinkedTwitter(
      ::grpc::CallbackServerContext* /*context*/, const ::faucet::SetLinkedTwitterRequest* /*request*/, ::faucet::SetLinkedTwitterResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Drip<WithCallbackMethod_DripDev<WithCallbackMethod_DripVerifyTweet<WithCallbackMethod_TimeUntilDrip<WithCallbackMethod_GetLinkedTwitters<WithCallbackMethod_GetLinkedTwitterForAddress<WithCallbackMethod_GetLinkedAddressForTwitter<WithCallbackMethod_SetLinkedTwitter<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Drip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Drip() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Drip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Drip(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DripDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DripDev() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DripDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DripDev(::grpc::ServerContext* /*context*/, const ::faucet::DripDevRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DripVerifyTweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DripVerifyTweet() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DripVerifyTweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DripVerifyTweet(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TimeUntilDrip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TimeUntilDrip() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TimeUntilDrip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimeUntilDrip(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::TimeUntilDripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLinkedTwitters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLinkedTwitters() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetLinkedTwitters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedTwitters(::grpc::ServerContext* /*context*/, const ::faucet::GetLinkedTwittersRequest* /*request*/, ::faucet::GetLinkedTwittersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLinkedTwitterForAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLinkedTwitterForAddress() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetLinkedTwitterForAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedTwitterForAddress(::grpc::ServerContext* /*context*/, const ::faucet::LinkedTwitterForAddressRequest* /*request*/, ::faucet::LinkedTwitterForAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLinkedAddressForTwitter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLinkedAddressForTwitter() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetLinkedAddressForTwitter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedAddressForTwitter(::grpc::ServerContext* /*context*/, const ::faucet::LinkedAddressForTwitterRequest* /*request*/, ::faucet::LinkedAddressForTwitterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetLinkedTwitter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetLinkedTwitter() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetLinkedTwitter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLinkedTwitter(::grpc::ServerContext* /*context*/, const ::faucet::SetLinkedTwitterRequest* /*request*/, ::faucet::SetLinkedTwitterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Drip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Drip() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Drip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Drip(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDrip(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DripDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DripDev() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DripDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DripDev(::grpc::ServerContext* /*context*/, const ::faucet::DripDevRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDripDev(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DripVerifyTweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DripVerifyTweet() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DripVerifyTweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DripVerifyTweet(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDripVerifyTweet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TimeUntilDrip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TimeUntilDrip() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TimeUntilDrip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimeUntilDrip(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::TimeUntilDripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTimeUntilDrip(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLinkedTwitters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLinkedTwitters() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetLinkedTwitters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedTwitters(::grpc::ServerContext* /*context*/, const ::faucet::GetLinkedTwittersRequest* /*request*/, ::faucet::GetLinkedTwittersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLinkedTwitters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLinkedTwitterForAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLinkedTwitterForAddress() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetLinkedTwitterForAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedTwitterForAddress(::grpc::ServerContext* /*context*/, const ::faucet::LinkedTwitterForAddressRequest* /*request*/, ::faucet::LinkedTwitterForAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLinkedTwitterForAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLinkedAddressForTwitter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLinkedAddressForTwitter() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetLinkedAddressForTwitter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedAddressForTwitter(::grpc::ServerContext* /*context*/, const ::faucet::LinkedAddressForTwitterRequest* /*request*/, ::faucet::LinkedAddressForTwitterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLinkedAddressForTwitter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetLinkedTwitter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetLinkedTwitter() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SetLinkedTwitter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLinkedTwitter(::grpc::ServerContext* /*context*/, const ::faucet::SetLinkedTwitterRequest* /*request*/, ::faucet::SetLinkedTwitterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLinkedTwitter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Drip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Drip() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Drip(context, request, response); }));
    }
    ~WithRawCallbackMethod_Drip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Drip(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Drip(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DripDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DripDev() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DripDev(context, request, response); }));
    }
    ~WithRawCallbackMethod_DripDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DripDev(::grpc::ServerContext* /*context*/, const ::faucet::DripDevRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DripDev(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DripVerifyTweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DripVerifyTweet() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DripVerifyTweet(context, request, response); }));
    }
    ~WithRawCallbackMethod_DripVerifyTweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DripVerifyTweet(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DripVerifyTweet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TimeUntilDrip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TimeUntilDrip() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TimeUntilDrip(context, request, response); }));
    }
    ~WithRawCallbackMethod_TimeUntilDrip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TimeUntilDrip(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::TimeUntilDripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TimeUntilDrip(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLinkedTwitters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLinkedTwitters() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLinkedTwitters(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLinkedTwitters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedTwitters(::grpc::ServerContext* /*context*/, const ::faucet::GetLinkedTwittersRequest* /*request*/, ::faucet::GetLinkedTwittersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLinkedTwitters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLinkedTwitterForAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLinkedTwitterForAddress() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLinkedTwitterForAddress(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLinkedTwitterForAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedTwitterForAddress(::grpc::ServerContext* /*context*/, const ::faucet::LinkedTwitterForAddressRequest* /*request*/, ::faucet::LinkedTwitterForAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLinkedTwitterForAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLinkedAddressForTwitter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLinkedAddressForTwitter() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLinkedAddressForTwitter(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLinkedAddressForTwitter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinkedAddressForTwitter(::grpc::ServerContext* /*context*/, const ::faucet::LinkedAddressForTwitterRequest* /*request*/, ::faucet::LinkedAddressForTwitterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLinkedAddressForTwitter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetLinkedTwitter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetLinkedTwitter() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetLinkedTwitter(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetLinkedTwitter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLinkedTwitter(::grpc::ServerContext* /*context*/, const ::faucet::SetLinkedTwitterRequest* /*request*/, ::faucet::SetLinkedTwitterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLinkedTwitter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Drip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Drip() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::faucet::DripRequest, ::faucet::DripResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::faucet::DripRequest, ::faucet::DripResponse>* streamer) {
                       return this->StreamedDrip(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Drip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Drip(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDrip(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faucet::DripRequest,::faucet::DripResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DripDev : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DripDev() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::faucet::DripDevRequest, ::faucet::DripResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::faucet::DripDevRequest, ::faucet::DripResponse>* streamer) {
                       return this->StreamedDripDev(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DripDev() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DripDev(::grpc::ServerContext* /*context*/, const ::faucet::DripDevRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDripDev(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faucet::DripDevRequest,::faucet::DripResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DripVerifyTweet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DripVerifyTweet() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::faucet::DripRequest, ::faucet::DripResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::faucet::DripRequest, ::faucet::DripResponse>* streamer) {
                       return this->StreamedDripVerifyTweet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DripVerifyTweet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DripVerifyTweet(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::DripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDripVerifyTweet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faucet::DripRequest,::faucet::DripResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TimeUntilDrip : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TimeUntilDrip() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::faucet::DripRequest, ::faucet::TimeUntilDripResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::faucet::DripRequest, ::faucet::TimeUntilDripResponse>* streamer) {
                       return this->StreamedTimeUntilDrip(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TimeUntilDrip() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TimeUntilDrip(::grpc::ServerContext* /*context*/, const ::faucet::DripRequest* /*request*/, ::faucet::TimeUntilDripResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTimeUntilDrip(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faucet::DripRequest,::faucet::TimeUntilDripResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLinkedTwitters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLinkedTwitters() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::faucet::GetLinkedTwittersRequest, ::faucet::GetLinkedTwittersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::faucet::GetLinkedTwittersRequest, ::faucet::GetLinkedTwittersResponse>* streamer) {
                       return this->StreamedGetLinkedTwitters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLinkedTwitters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLinkedTwitters(::grpc::ServerContext* /*context*/, const ::faucet::GetLinkedTwittersRequest* /*request*/, ::faucet::GetLinkedTwittersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLinkedTwitters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faucet::GetLinkedTwittersRequest,::faucet::GetLinkedTwittersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLinkedTwitterForAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLinkedTwitterForAddress() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::faucet::LinkedTwitterForAddressRequest, ::faucet::LinkedTwitterForAddressResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::faucet::LinkedTwitterForAddressRequest, ::faucet::LinkedTwitterForAddressResponse>* streamer) {
                       return this->StreamedGetLinkedTwitterForAddress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLinkedTwitterForAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLinkedTwitterForAddress(::grpc::ServerContext* /*context*/, const ::faucet::LinkedTwitterForAddressRequest* /*request*/, ::faucet::LinkedTwitterForAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLinkedTwitterForAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faucet::LinkedTwitterForAddressRequest,::faucet::LinkedTwitterForAddressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLinkedAddressForTwitter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLinkedAddressForTwitter() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::faucet::LinkedAddressForTwitterRequest, ::faucet::LinkedAddressForTwitterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::faucet::LinkedAddressForTwitterRequest, ::faucet::LinkedAddressForTwitterResponse>* streamer) {
                       return this->StreamedGetLinkedAddressForTwitter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLinkedAddressForTwitter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLinkedAddressForTwitter(::grpc::ServerContext* /*context*/, const ::faucet::LinkedAddressForTwitterRequest* /*request*/, ::faucet::LinkedAddressForTwitterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLinkedAddressForTwitter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faucet::LinkedAddressForTwitterRequest,::faucet::LinkedAddressForTwitterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetLinkedTwitter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetLinkedTwitter() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::faucet::SetLinkedTwitterRequest, ::faucet::SetLinkedTwitterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::faucet::SetLinkedTwitterRequest, ::faucet::SetLinkedTwitterResponse>* streamer) {
                       return this->StreamedSetLinkedTwitter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetLinkedTwitter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetLinkedTwitter(::grpc::ServerContext* /*context*/, const ::faucet::SetLinkedTwitterRequest* /*request*/, ::faucet::SetLinkedTwitterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetLinkedTwitter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::faucet::SetLinkedTwitterRequest,::faucet::SetLinkedTwitterResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Drip<WithStreamedUnaryMethod_DripDev<WithStreamedUnaryMethod_DripVerifyTweet<WithStreamedUnaryMethod_TimeUntilDrip<WithStreamedUnaryMethod_GetLinkedTwitters<WithStreamedUnaryMethod_GetLinkedTwitterForAddress<WithStreamedUnaryMethod_GetLinkedAddressForTwitter<WithStreamedUnaryMethod_SetLinkedTwitter<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Drip<WithStreamedUnaryMethod_DripDev<WithStreamedUnaryMethod_DripVerifyTweet<WithStreamedUnaryMethod_TimeUntilDrip<WithStreamedUnaryMethod_GetLinkedTwitters<WithStreamedUnaryMethod_GetLinkedTwitterForAddress<WithStreamedUnaryMethod_GetLinkedAddressForTwitter<WithStreamedUnaryMethod_SetLinkedTwitter<Service > > > > > > > > StreamedService;
};

}  // namespace faucet


#endif  // GRPC_faucet_2eproto__INCLUDED
