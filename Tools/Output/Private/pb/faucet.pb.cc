#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faucet.proto

#include "faucet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace faucet {
constexpr LinkedTwitterPair::LinkedTwitterPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LinkedTwitterPairDefaultTypeInternal {
  constexpr LinkedTwitterPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinkedTwitterPairDefaultTypeInternal() {}
  union {
    LinkedTwitterPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinkedTwitterPairDefaultTypeInternal _LinkedTwitterPair_default_instance_;
constexpr FaucetStore_AddressToUsernameEntry_DoNotUse::FaucetStore_AddressToUsernameEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FaucetStore_AddressToUsernameEntry_DoNotUseDefaultTypeInternal {
  constexpr FaucetStore_AddressToUsernameEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaucetStore_AddressToUsernameEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FaucetStore_AddressToUsernameEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaucetStore_AddressToUsernameEntry_DoNotUseDefaultTypeInternal _FaucetStore_AddressToUsernameEntry_DoNotUse_default_instance_;
constexpr FaucetStore_UsernameToAddressEntry_DoNotUse::FaucetStore_UsernameToAddressEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FaucetStore_UsernameToAddressEntry_DoNotUseDefaultTypeInternal {
  constexpr FaucetStore_UsernameToAddressEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaucetStore_UsernameToAddressEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FaucetStore_UsernameToAddressEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaucetStore_UsernameToAddressEntry_DoNotUseDefaultTypeInternal _FaucetStore_UsernameToAddressEntry_DoNotUse_default_instance_;
constexpr FaucetStore_LatestDripEntry_DoNotUse::FaucetStore_LatestDripEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct FaucetStore_LatestDripEntry_DoNotUseDefaultTypeInternal {
  constexpr FaucetStore_LatestDripEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaucetStore_LatestDripEntry_DoNotUseDefaultTypeInternal() {}
  union {
    FaucetStore_LatestDripEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaucetStore_LatestDripEntry_DoNotUseDefaultTypeInternal _FaucetStore_LatestDripEntry_DoNotUse_default_instance_;
constexpr FaucetStore::FaucetStore(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addresstousername_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , usernametoaddress_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , latestdrip_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , totaldripcount_(0){}
struct FaucetStoreDefaultTypeInternal {
  constexpr FaucetStoreDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaucetStoreDefaultTypeInternal() {}
  union {
    FaucetStore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaucetStoreDefaultTypeInternal _FaucetStore_default_instance_;
constexpr DripRequest::DripRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DripRequestDefaultTypeInternal {
  constexpr DripRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DripRequestDefaultTypeInternal() {}
  union {
    DripRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DripRequestDefaultTypeInternal _DripRequest_default_instance_;
constexpr DripDevRequest::DripDevRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DripDevRequestDefaultTypeInternal {
  constexpr DripDevRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DripDevRequestDefaultTypeInternal() {}
  union {
    DripDevRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DripDevRequestDefaultTypeInternal _DripDevRequest_default_instance_;
constexpr DripResponse::DripResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : driptxhash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ecstxhash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DripResponseDefaultTypeInternal {
  constexpr DripResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DripResponseDefaultTypeInternal() {}
  union {
    DripResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DripResponseDefaultTypeInternal _DripResponse_default_instance_;
constexpr TimeUntilDripResponse::TimeUntilDripResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timeuntildripminutes_(0)
  , timeuntildripseconds_(0){}
struct TimeUntilDripResponseDefaultTypeInternal {
  constexpr TimeUntilDripResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeUntilDripResponseDefaultTypeInternal() {}
  union {
    TimeUntilDripResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeUntilDripResponseDefaultTypeInternal _TimeUntilDripResponse_default_instance_;
constexpr GetLinkedTwittersRequest::GetLinkedTwittersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetLinkedTwittersRequestDefaultTypeInternal {
  constexpr GetLinkedTwittersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLinkedTwittersRequestDefaultTypeInternal() {}
  union {
    GetLinkedTwittersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLinkedTwittersRequestDefaultTypeInternal _GetLinkedTwittersRequest_default_instance_;
constexpr GetLinkedTwittersResponse::GetLinkedTwittersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : linkedtwitters_(){}
struct GetLinkedTwittersResponseDefaultTypeInternal {
  constexpr GetLinkedTwittersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLinkedTwittersResponseDefaultTypeInternal() {}
  union {
    GetLinkedTwittersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLinkedTwittersResponseDefaultTypeInternal _GetLinkedTwittersResponse_default_instance_;
constexpr LinkedTwitterForAddressRequest::LinkedTwitterForAddressRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LinkedTwitterForAddressRequestDefaultTypeInternal {
  constexpr LinkedTwitterForAddressRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinkedTwitterForAddressRequestDefaultTypeInternal() {}
  union {
    LinkedTwitterForAddressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinkedTwitterForAddressRequestDefaultTypeInternal _LinkedTwitterForAddressRequest_default_instance_;
constexpr LinkedTwitterForAddressResponse::LinkedTwitterForAddressResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LinkedTwitterForAddressResponseDefaultTypeInternal {
  constexpr LinkedTwitterForAddressResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinkedTwitterForAddressResponseDefaultTypeInternal() {}
  union {
    LinkedTwitterForAddressResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinkedTwitterForAddressResponseDefaultTypeInternal _LinkedTwitterForAddressResponse_default_instance_;
constexpr LinkedAddressForTwitterRequest::LinkedAddressForTwitterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LinkedAddressForTwitterRequestDefaultTypeInternal {
  constexpr LinkedAddressForTwitterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinkedAddressForTwitterRequestDefaultTypeInternal() {}
  union {
    LinkedAddressForTwitterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinkedAddressForTwitterRequestDefaultTypeInternal _LinkedAddressForTwitterRequest_default_instance_;
constexpr LinkedAddressForTwitterResponse::LinkedAddressForTwitterResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LinkedAddressForTwitterResponseDefaultTypeInternal {
  constexpr LinkedAddressForTwitterResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LinkedAddressForTwitterResponseDefaultTypeInternal() {}
  union {
    LinkedAddressForTwitterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LinkedAddressForTwitterResponseDefaultTypeInternal _LinkedAddressForTwitterResponse_default_instance_;
constexpr SetLinkedTwitterRequest::SetLinkedTwitterRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetLinkedTwitterRequestDefaultTypeInternal {
  constexpr SetLinkedTwitterRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetLinkedTwitterRequestDefaultTypeInternal() {}
  union {
    SetLinkedTwitterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetLinkedTwitterRequestDefaultTypeInternal _SetLinkedTwitterRequest_default_instance_;
constexpr SetLinkedTwitterResponse::SetLinkedTwitterResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SetLinkedTwitterResponseDefaultTypeInternal {
  constexpr SetLinkedTwitterResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetLinkedTwitterResponseDefaultTypeInternal() {}
  union {
    SetLinkedTwitterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetLinkedTwitterResponseDefaultTypeInternal _SetLinkedTwitterResponse_default_instance_;
}  // namespace faucet
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_faucet_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_faucet_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_faucet_2eproto = nullptr;

const uint32_t TableStruct_faucet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::LinkedTwitterPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::LinkedTwitterPair, username_),
  PROTOBUF_FIELD_OFFSET(::faucet::LinkedTwitterPair, address_),
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore_AddressToUsernameEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore_AddressToUsernameEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore_AddressToUsernameEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore_AddressToUsernameEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore_UsernameToAddressEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore_UsernameToAddressEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore_UsernameToAddressEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore_UsernameToAddressEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore_LatestDripEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore_LatestDripEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore_LatestDripEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore_LatestDripEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore, addresstousername_),
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore, usernametoaddress_),
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore, latestdrip_),
  PROTOBUF_FIELD_OFFSET(::faucet::FaucetStore, totaldripcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::DripRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::DripRequest, username_),
  PROTOBUF_FIELD_OFFSET(::faucet::DripRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::DripDevRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::DripDevRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::DripResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::DripResponse, driptxhash_),
  PROTOBUF_FIELD_OFFSET(::faucet::DripResponse, ecstxhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::TimeUntilDripResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::TimeUntilDripResponse, timeuntildripminutes_),
  PROTOBUF_FIELD_OFFSET(::faucet::TimeUntilDripResponse, timeuntildripseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::GetLinkedTwittersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::GetLinkedTwittersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::GetLinkedTwittersResponse, linkedtwitters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::LinkedTwitterForAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::LinkedTwitterForAddressRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::LinkedTwitterForAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::LinkedTwitterForAddressResponse, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::LinkedAddressForTwitterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::LinkedAddressForTwitterRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::LinkedAddressForTwitterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::LinkedAddressForTwitterResponse, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::SetLinkedTwitterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::faucet::SetLinkedTwitterRequest, address_),
  PROTOBUF_FIELD_OFFSET(::faucet::SetLinkedTwitterRequest, username_),
  PROTOBUF_FIELD_OFFSET(::faucet::SetLinkedTwitterRequest, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::faucet::SetLinkedTwitterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::faucet::LinkedTwitterPair)},
  { 8, 16, -1, sizeof(::faucet::FaucetStore_AddressToUsernameEntry_DoNotUse)},
  { 18, 26, -1, sizeof(::faucet::FaucetStore_UsernameToAddressEntry_DoNotUse)},
  { 28, 36, -1, sizeof(::faucet::FaucetStore_LatestDripEntry_DoNotUse)},
  { 38, -1, -1, sizeof(::faucet::FaucetStore)},
  { 48, -1, -1, sizeof(::faucet::DripRequest)},
  { 56, -1, -1, sizeof(::faucet::DripDevRequest)},
  { 63, -1, -1, sizeof(::faucet::DripResponse)},
  { 71, -1, -1, sizeof(::faucet::TimeUntilDripResponse)},
  { 79, -1, -1, sizeof(::faucet::GetLinkedTwittersRequest)},
  { 85, -1, -1, sizeof(::faucet::GetLinkedTwittersResponse)},
  { 92, -1, -1, sizeof(::faucet::LinkedTwitterForAddressRequest)},
  { 99, -1, -1, sizeof(::faucet::LinkedTwitterForAddressResponse)},
  { 106, -1, -1, sizeof(::faucet::LinkedAddressForTwitterRequest)},
  { 113, -1, -1, sizeof(::faucet::LinkedAddressForTwitterResponse)},
  { 120, -1, -1, sizeof(::faucet::SetLinkedTwitterRequest)},
  { 129, -1, -1, sizeof(::faucet::SetLinkedTwitterResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_LinkedTwitterPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_FaucetStore_AddressToUsernameEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_FaucetStore_UsernameToAddressEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_FaucetStore_LatestDripEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_FaucetStore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_DripRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_DripDevRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_DripResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_TimeUntilDripResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_GetLinkedTwittersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_GetLinkedTwittersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_LinkedTwitterForAddressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_LinkedTwitterForAddressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_LinkedAddressForTwitterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_LinkedAddressForTwitterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_SetLinkedTwitterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::faucet::_SetLinkedTwitterResponse_default_instance_),
};

const char descriptor_table_protodef_faucet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014faucet.proto\022\006faucet\"6\n\021LinkedTwitterP"
  "air\022\020\n\010username\030\001 \001(\t\022\017\n\007address\030\002 \001(\t\"\223"
  "\003\n\013FaucetStore\022E\n\021addressToUsername\030\001 \003("
  "\0132*.faucet.FaucetStore.AddressToUsername"
  "Entry\022E\n\021usernameToAddress\030\002 \003(\0132*.fauce"
  "t.FaucetStore.UsernameToAddressEntry\0227\n\n"
  "latestDrip\030\003 \003(\0132#.faucet.FaucetStore.La"
  "testDripEntry\022\026\n\016totalDripCount\030\004 \001(\001\0328\n"
  "\026AddressToUsernameEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\0328\n\026UsernameToAddressEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0321\n\017Lat"
  "estDripEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003"
  ":\0028\001\"0\n\013DripRequest\022\020\n\010username\030\001 \001(\t\022\017\n"
  "\007address\030\002 \001(\t\"!\n\016DripDevRequest\022\017\n\007addr"
  "ess\030\001 \001(\t\"5\n\014DripResponse\022\022\n\ndripTxHash\030"
  "\001 \001(\t\022\021\n\tecsTxHash\030\002 \001(\t\"S\n\025TimeUntilDri"
  "pResponse\022\034\n\024timeUntilDripMinutes\030\001 \001(\001\022"
  "\034\n\024timeUntilDripSeconds\030\002 \001(\001\"\032\n\030GetLink"
  "edTwittersRequest\"N\n\031GetLinkedTwittersRe"
  "sponse\0221\n\016linkedTwitters\030\001 \003(\0132\031.faucet."
  "LinkedTwitterPair\"1\n\036LinkedTwitterForAdd"
  "ressRequest\022\017\n\007address\030\001 \001(\t\"3\n\037LinkedTw"
  "itterForAddressResponse\022\020\n\010username\030\001 \001("
  "\t\"2\n\036LinkedAddressForTwitterRequest\022\020\n\010u"
  "sername\030\001 \001(\t\"2\n\037LinkedAddressForTwitter"
  "Response\022\017\n\007address\030\001 \001(\t\"O\n\027SetLinkedTw"
  "itterRequest\022\017\n\007address\030\001 \001(\t\022\020\n\010usernam"
  "e\030\002 \001(\t\022\021\n\tsignature\030\003 \001(\t\"\032\n\030SetLinkedT"
  "witterResponse2\235\005\n\rFaucetService\0223\n\004Drip"
  "\022\023.faucet.DripRequest\032\024.faucet.DripRespo"
  "nse\"\000\0229\n\007DripDev\022\026.faucet.DripDevRequest"
  "\032\024.faucet.DripResponse\"\000\022>\n\017DripVerifyTw"
  "eet\022\023.faucet.DripRequest\032\024.faucet.DripRe"
  "sponse\"\000\022E\n\rTimeUntilDrip\022\023.faucet.DripR"
  "equest\032\035.faucet.TimeUntilDripResponse\"\000\022"
  "Z\n\021GetLinkedTwitters\022 .faucet.GetLinkedT"
  "wittersRequest\032!.faucet.GetLinkedTwitter"
  "sResponse\"\000\022o\n\032GetLinkedTwitterForAddres"
  "s\022&.faucet.LinkedTwitterForAddressReques"
  "t\032\'.faucet.LinkedTwitterForAddressRespon"
  "se\"\000\022o\n\032GetLinkedAddressForTwitter\022&.fau"
  "cet.LinkedAddressForTwitterRequest\032\'.fau"
  "cet.LinkedAddressForTwitterResponse\"\000\022W\n"
  "\020SetLinkedTwitter\022\037.faucet.SetLinkedTwit"
  "terRequest\032 .faucet.SetLinkedTwitterResp"
  "onse\"\000B\024Z\022protobuf/go/faucetb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_faucet_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_faucet_2eproto = {
  false, false, 1836, descriptor_table_protodef_faucet_2eproto, "faucet.proto", 
  &descriptor_table_faucet_2eproto_once, nullptr, 0, 17,
  schemas, file_default_instances, TableStruct_faucet_2eproto::offsets,
  file_level_metadata_faucet_2eproto, file_level_enum_descriptors_faucet_2eproto, file_level_service_descriptors_faucet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_faucet_2eproto_getter() {
  return &descriptor_table_faucet_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_faucet_2eproto(&descriptor_table_faucet_2eproto);
namespace faucet {

// ===================================================================

class LinkedTwitterPair::_Internal {
 public:
};

LinkedTwitterPair::LinkedTwitterPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:faucet.LinkedTwitterPair)
}
LinkedTwitterPair::LinkedTwitterPair(const LinkedTwitterPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:faucet.LinkedTwitterPair)
}

inline void LinkedTwitterPair::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LinkedTwitterPair::~LinkedTwitterPair() {
  // @@protoc_insertion_point(destructor:faucet.LinkedTwitterPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LinkedTwitterPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinkedTwitterPair::ArenaDtor(void* object) {
  LinkedTwitterPair* _this = reinterpret_cast< LinkedTwitterPair* >(object);
  (void)_this;
}
void LinkedTwitterPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkedTwitterPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinkedTwitterPair::Clear() {
// @@protoc_insertion_point(message_clear_start:faucet.LinkedTwitterPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkedTwitterPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.LinkedTwitterPair.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.LinkedTwitterPair.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkedTwitterPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faucet.LinkedTwitterPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.LinkedTwitterPair.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.LinkedTwitterPair.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faucet.LinkedTwitterPair)
  return target;
}

size_t LinkedTwitterPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faucet.LinkedTwitterPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkedTwitterPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LinkedTwitterPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkedTwitterPair::GetClassData() const { return &_class_data_; }

void LinkedTwitterPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LinkedTwitterPair *>(to)->MergeFrom(
      static_cast<const LinkedTwitterPair &>(from));
}


void LinkedTwitterPair::MergeFrom(const LinkedTwitterPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faucet.LinkedTwitterPair)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinkedTwitterPair::CopyFrom(const LinkedTwitterPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faucet.LinkedTwitterPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkedTwitterPair::IsInitialized() const {
  return true;
}

void LinkedTwitterPair::InternalSwap(LinkedTwitterPair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkedTwitterPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[0]);
}

// ===================================================================

FaucetStore_AddressToUsernameEntry_DoNotUse::FaucetStore_AddressToUsernameEntry_DoNotUse() {}
FaucetStore_AddressToUsernameEntry_DoNotUse::FaucetStore_AddressToUsernameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FaucetStore_AddressToUsernameEntry_DoNotUse::MergeFrom(const FaucetStore_AddressToUsernameEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FaucetStore_AddressToUsernameEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[1]);
}

// ===================================================================

FaucetStore_UsernameToAddressEntry_DoNotUse::FaucetStore_UsernameToAddressEntry_DoNotUse() {}
FaucetStore_UsernameToAddressEntry_DoNotUse::FaucetStore_UsernameToAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FaucetStore_UsernameToAddressEntry_DoNotUse::MergeFrom(const FaucetStore_UsernameToAddressEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FaucetStore_UsernameToAddressEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[2]);
}

// ===================================================================

FaucetStore_LatestDripEntry_DoNotUse::FaucetStore_LatestDripEntry_DoNotUse() {}
FaucetStore_LatestDripEntry_DoNotUse::FaucetStore_LatestDripEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FaucetStore_LatestDripEntry_DoNotUse::MergeFrom(const FaucetStore_LatestDripEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FaucetStore_LatestDripEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[3]);
}

// ===================================================================

class FaucetStore::_Internal {
 public:
};

FaucetStore::FaucetStore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  addresstousername_(arena),
  usernametoaddress_(arena),
  latestdrip_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:faucet.FaucetStore)
}
FaucetStore::FaucetStore(const FaucetStore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addresstousername_.MergeFrom(from.addresstousername_);
  usernametoaddress_.MergeFrom(from.usernametoaddress_);
  latestdrip_.MergeFrom(from.latestdrip_);
  totaldripcount_ = from.totaldripcount_;
  // @@protoc_insertion_point(copy_constructor:faucet.FaucetStore)
}

inline void FaucetStore::SharedCtor() {
totaldripcount_ = 0;
}

FaucetStore::~FaucetStore() {
  // @@protoc_insertion_point(destructor:faucet.FaucetStore)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FaucetStore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FaucetStore::ArenaDtor(void* object) {
  FaucetStore* _this = reinterpret_cast< FaucetStore* >(object);
  (void)_this;
  _this->addresstousername_. ~MapField();
  _this->usernametoaddress_. ~MapField();
  _this->latestdrip_. ~MapField();
}
inline void FaucetStore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &FaucetStore::ArenaDtor);
  }
}
void FaucetStore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FaucetStore::Clear() {
// @@protoc_insertion_point(message_clear_start:faucet.FaucetStore)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresstousername_.Clear();
  usernametoaddress_.Clear();
  latestdrip_.Clear();
  totaldripcount_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaucetStore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> addressToUsername = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&addresstousername_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> usernameToAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&usernametoaddress_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int64> latestDrip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&latestdrip_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double totalDripCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          totaldripcount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaucetStore::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faucet.FaucetStore)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> addressToUsername = 1;
  if (!this->_internal_addresstousername().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "faucet.FaucetStore.AddressToUsernameEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "faucet.FaucetStore.AddressToUsernameEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_addresstousername().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_addresstousername().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_addresstousername().begin();
          it != this->_internal_addresstousername().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FaucetStore_AddressToUsernameEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_addresstousername().begin();
          it != this->_internal_addresstousername().end(); ++it) {
        target = FaucetStore_AddressToUsernameEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> usernameToAddress = 2;
  if (!this->_internal_usernametoaddress().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "faucet.FaucetStore.UsernameToAddressEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "faucet.FaucetStore.UsernameToAddressEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_usernametoaddress().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_usernametoaddress().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_usernametoaddress().begin();
          it != this->_internal_usernametoaddress().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FaucetStore_UsernameToAddressEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_usernametoaddress().begin();
          it != this->_internal_usernametoaddress().end(); ++it) {
        target = FaucetStore_UsernameToAddressEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> latestDrip = 3;
  if (!this->_internal_latestdrip().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "faucet.FaucetStore.LatestDripEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_latestdrip().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_latestdrip().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
          it = this->_internal_latestdrip().begin();
          it != this->_internal_latestdrip().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FaucetStore_LatestDripEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
          it = this->_internal_latestdrip().begin();
          it != this->_internal_latestdrip().end(); ++it) {
        target = FaucetStore_LatestDripEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // double totalDripCount = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totaldripcount = this->_internal_totaldripcount();
  uint64_t raw_totaldripcount;
  memcpy(&raw_totaldripcount, &tmp_totaldripcount, sizeof(tmp_totaldripcount));
  if (raw_totaldripcount != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_totaldripcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faucet.FaucetStore)
  return target;
}

size_t FaucetStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faucet.FaucetStore)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> addressToUsername = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_addresstousername_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_addresstousername().begin();
      it != this->_internal_addresstousername().end(); ++it) {
    total_size += FaucetStore_AddressToUsernameEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> usernameToAddress = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_usernametoaddress_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_usernametoaddress().begin();
      it != this->_internal_usernametoaddress().end(); ++it) {
    total_size += FaucetStore_UsernameToAddressEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> latestDrip = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_latestdrip_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_latestdrip().begin();
      it != this->_internal_latestdrip().end(); ++it) {
    total_size += FaucetStore_LatestDripEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // double totalDripCount = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totaldripcount = this->_internal_totaldripcount();
  uint64_t raw_totaldripcount;
  memcpy(&raw_totaldripcount, &tmp_totaldripcount, sizeof(tmp_totaldripcount));
  if (raw_totaldripcount != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaucetStore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FaucetStore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaucetStore::GetClassData() const { return &_class_data_; }

void FaucetStore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FaucetStore *>(to)->MergeFrom(
      static_cast<const FaucetStore &>(from));
}


void FaucetStore::MergeFrom(const FaucetStore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faucet.FaucetStore)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  addresstousername_.MergeFrom(from.addresstousername_);
  usernametoaddress_.MergeFrom(from.usernametoaddress_);
  latestdrip_.MergeFrom(from.latestdrip_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_totaldripcount = from._internal_totaldripcount();
  uint64_t raw_totaldripcount;
  memcpy(&raw_totaldripcount, &tmp_totaldripcount, sizeof(tmp_totaldripcount));
  if (raw_totaldripcount != 0) {
    _internal_set_totaldripcount(from._internal_totaldripcount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaucetStore::CopyFrom(const FaucetStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faucet.FaucetStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaucetStore::IsInitialized() const {
  return true;
}

void FaucetStore::InternalSwap(FaucetStore* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  addresstousername_.InternalSwap(&other->addresstousername_);
  usernametoaddress_.InternalSwap(&other->usernametoaddress_);
  latestdrip_.InternalSwap(&other->latestdrip_);
  swap(totaldripcount_, other->totaldripcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaucetStore::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[4]);
}

// ===================================================================

class DripRequest::_Internal {
 public:
};

DripRequest::DripRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:faucet.DripRequest)
}
DripRequest::DripRequest(const DripRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:faucet.DripRequest)
}

inline void DripRequest::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DripRequest::~DripRequest() {
  // @@protoc_insertion_point(destructor:faucet.DripRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DripRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DripRequest::ArenaDtor(void* object) {
  DripRequest* _this = reinterpret_cast< DripRequest* >(object);
  (void)_this;
}
void DripRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DripRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DripRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faucet.DripRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DripRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.DripRequest.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.DripRequest.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DripRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faucet.DripRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.DripRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.DripRequest.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faucet.DripRequest)
  return target;
}

size_t DripRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faucet.DripRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DripRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DripRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DripRequest::GetClassData() const { return &_class_data_; }

void DripRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DripRequest *>(to)->MergeFrom(
      static_cast<const DripRequest &>(from));
}


void DripRequest::MergeFrom(const DripRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faucet.DripRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DripRequest::CopyFrom(const DripRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faucet.DripRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DripRequest::IsInitialized() const {
  return true;
}

void DripRequest::InternalSwap(DripRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DripRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[5]);
}

// ===================================================================

class DripDevRequest::_Internal {
 public:
};

DripDevRequest::DripDevRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:faucet.DripDevRequest)
}
DripDevRequest::DripDevRequest(const DripDevRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:faucet.DripDevRequest)
}

inline void DripDevRequest::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DripDevRequest::~DripDevRequest() {
  // @@protoc_insertion_point(destructor:faucet.DripDevRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DripDevRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DripDevRequest::ArenaDtor(void* object) {
  DripDevRequest* _this = reinterpret_cast< DripDevRequest* >(object);
  (void)_this;
}
void DripDevRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DripDevRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DripDevRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faucet.DripDevRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DripDevRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.DripDevRequest.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DripDevRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faucet.DripDevRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.DripDevRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faucet.DripDevRequest)
  return target;
}

size_t DripDevRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faucet.DripDevRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DripDevRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DripDevRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DripDevRequest::GetClassData() const { return &_class_data_; }

void DripDevRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DripDevRequest *>(to)->MergeFrom(
      static_cast<const DripDevRequest &>(from));
}


void DripDevRequest::MergeFrom(const DripDevRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faucet.DripDevRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DripDevRequest::CopyFrom(const DripDevRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faucet.DripDevRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DripDevRequest::IsInitialized() const {
  return true;
}

void DripDevRequest::InternalSwap(DripDevRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DripDevRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[6]);
}

// ===================================================================

class DripResponse::_Internal {
 public:
};

DripResponse::DripResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:faucet.DripResponse)
}
DripResponse::DripResponse(const DripResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  driptxhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    driptxhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_driptxhash().empty()) {
    driptxhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_driptxhash(), 
      GetArenaForAllocation());
  }
  ecstxhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ecstxhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ecstxhash().empty()) {
    ecstxhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ecstxhash(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:faucet.DripResponse)
}

inline void DripResponse::SharedCtor() {
driptxhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  driptxhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ecstxhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ecstxhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DripResponse::~DripResponse() {
  // @@protoc_insertion_point(destructor:faucet.DripResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DripResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  driptxhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ecstxhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DripResponse::ArenaDtor(void* object) {
  DripResponse* _this = reinterpret_cast< DripResponse* >(object);
  (void)_this;
}
void DripResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DripResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DripResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faucet.DripResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  driptxhash_.ClearToEmpty();
  ecstxhash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DripResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dripTxHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_driptxhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.DripResponse.dripTxHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ecsTxHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ecstxhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.DripResponse.ecsTxHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DripResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faucet.DripResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dripTxHash = 1;
  if (!this->_internal_driptxhash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_driptxhash().data(), static_cast<int>(this->_internal_driptxhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.DripResponse.dripTxHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_driptxhash(), target);
  }

  // string ecsTxHash = 2;
  if (!this->_internal_ecstxhash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ecstxhash().data(), static_cast<int>(this->_internal_ecstxhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.DripResponse.ecsTxHash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ecstxhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faucet.DripResponse)
  return target;
}

size_t DripResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faucet.DripResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dripTxHash = 1;
  if (!this->_internal_driptxhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_driptxhash());
  }

  // string ecsTxHash = 2;
  if (!this->_internal_ecstxhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ecstxhash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DripResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DripResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DripResponse::GetClassData() const { return &_class_data_; }

void DripResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DripResponse *>(to)->MergeFrom(
      static_cast<const DripResponse &>(from));
}


void DripResponse::MergeFrom(const DripResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faucet.DripResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_driptxhash().empty()) {
    _internal_set_driptxhash(from._internal_driptxhash());
  }
  if (!from._internal_ecstxhash().empty()) {
    _internal_set_ecstxhash(from._internal_ecstxhash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DripResponse::CopyFrom(const DripResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faucet.DripResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DripResponse::IsInitialized() const {
  return true;
}

void DripResponse::InternalSwap(DripResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &driptxhash_, lhs_arena,
      &other->driptxhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ecstxhash_, lhs_arena,
      &other->ecstxhash_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DripResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[7]);
}

// ===================================================================

class TimeUntilDripResponse::_Internal {
 public:
};

TimeUntilDripResponse::TimeUntilDripResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:faucet.TimeUntilDripResponse)
}
TimeUntilDripResponse::TimeUntilDripResponse(const TimeUntilDripResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timeuntildripminutes_, &from.timeuntildripminutes_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeuntildripseconds_) -
    reinterpret_cast<char*>(&timeuntildripminutes_)) + sizeof(timeuntildripseconds_));
  // @@protoc_insertion_point(copy_constructor:faucet.TimeUntilDripResponse)
}

inline void TimeUntilDripResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timeuntildripminutes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeuntildripseconds_) -
    reinterpret_cast<char*>(&timeuntildripminutes_)) + sizeof(timeuntildripseconds_));
}

TimeUntilDripResponse::~TimeUntilDripResponse() {
  // @@protoc_insertion_point(destructor:faucet.TimeUntilDripResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimeUntilDripResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeUntilDripResponse::ArenaDtor(void* object) {
  TimeUntilDripResponse* _this = reinterpret_cast< TimeUntilDripResponse* >(object);
  (void)_this;
}
void TimeUntilDripResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeUntilDripResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeUntilDripResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faucet.TimeUntilDripResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timeuntildripminutes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeuntildripseconds_) -
      reinterpret_cast<char*>(&timeuntildripminutes_)) + sizeof(timeuntildripseconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeUntilDripResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double timeUntilDripMinutes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          timeuntildripminutes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double timeUntilDripSeconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          timeuntildripseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeUntilDripResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faucet.TimeUntilDripResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double timeUntilDripMinutes = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeuntildripminutes = this->_internal_timeuntildripminutes();
  uint64_t raw_timeuntildripminutes;
  memcpy(&raw_timeuntildripminutes, &tmp_timeuntildripminutes, sizeof(tmp_timeuntildripminutes));
  if (raw_timeuntildripminutes != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_timeuntildripminutes(), target);
  }

  // double timeUntilDripSeconds = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeuntildripseconds = this->_internal_timeuntildripseconds();
  uint64_t raw_timeuntildripseconds;
  memcpy(&raw_timeuntildripseconds, &tmp_timeuntildripseconds, sizeof(tmp_timeuntildripseconds));
  if (raw_timeuntildripseconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_timeuntildripseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faucet.TimeUntilDripResponse)
  return target;
}

size_t TimeUntilDripResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faucet.TimeUntilDripResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double timeUntilDripMinutes = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeuntildripminutes = this->_internal_timeuntildripminutes();
  uint64_t raw_timeuntildripminutes;
  memcpy(&raw_timeuntildripminutes, &tmp_timeuntildripminutes, sizeof(tmp_timeuntildripminutes));
  if (raw_timeuntildripminutes != 0) {
    total_size += 1 + 8;
  }

  // double timeUntilDripSeconds = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeuntildripseconds = this->_internal_timeuntildripseconds();
  uint64_t raw_timeuntildripseconds;
  memcpy(&raw_timeuntildripseconds, &tmp_timeuntildripseconds, sizeof(tmp_timeuntildripseconds));
  if (raw_timeuntildripseconds != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeUntilDripResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimeUntilDripResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeUntilDripResponse::GetClassData() const { return &_class_data_; }

void TimeUntilDripResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimeUntilDripResponse *>(to)->MergeFrom(
      static_cast<const TimeUntilDripResponse &>(from));
}


void TimeUntilDripResponse::MergeFrom(const TimeUntilDripResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faucet.TimeUntilDripResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeuntildripminutes = from._internal_timeuntildripminutes();
  uint64_t raw_timeuntildripminutes;
  memcpy(&raw_timeuntildripminutes, &tmp_timeuntildripminutes, sizeof(tmp_timeuntildripminutes));
  if (raw_timeuntildripminutes != 0) {
    _internal_set_timeuntildripminutes(from._internal_timeuntildripminutes());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeuntildripseconds = from._internal_timeuntildripseconds();
  uint64_t raw_timeuntildripseconds;
  memcpy(&raw_timeuntildripseconds, &tmp_timeuntildripseconds, sizeof(tmp_timeuntildripseconds));
  if (raw_timeuntildripseconds != 0) {
    _internal_set_timeuntildripseconds(from._internal_timeuntildripseconds());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeUntilDripResponse::CopyFrom(const TimeUntilDripResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faucet.TimeUntilDripResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeUntilDripResponse::IsInitialized() const {
  return true;
}

void TimeUntilDripResponse::InternalSwap(TimeUntilDripResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeUntilDripResponse, timeuntildripseconds_)
      + sizeof(TimeUntilDripResponse::timeuntildripseconds_)
      - PROTOBUF_FIELD_OFFSET(TimeUntilDripResponse, timeuntildripminutes_)>(
          reinterpret_cast<char*>(&timeuntildripminutes_),
          reinterpret_cast<char*>(&other->timeuntildripminutes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeUntilDripResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[8]);
}

// ===================================================================

class GetLinkedTwittersRequest::_Internal {
 public:
};

GetLinkedTwittersRequest::GetLinkedTwittersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:faucet.GetLinkedTwittersRequest)
}
GetLinkedTwittersRequest::GetLinkedTwittersRequest(const GetLinkedTwittersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:faucet.GetLinkedTwittersRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLinkedTwittersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLinkedTwittersRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetLinkedTwittersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[9]);
}

// ===================================================================

class GetLinkedTwittersResponse::_Internal {
 public:
};

GetLinkedTwittersResponse::GetLinkedTwittersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  linkedtwitters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:faucet.GetLinkedTwittersResponse)
}
GetLinkedTwittersResponse::GetLinkedTwittersResponse(const GetLinkedTwittersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      linkedtwitters_(from.linkedtwitters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:faucet.GetLinkedTwittersResponse)
}

inline void GetLinkedTwittersResponse::SharedCtor() {
}

GetLinkedTwittersResponse::~GetLinkedTwittersResponse() {
  // @@protoc_insertion_point(destructor:faucet.GetLinkedTwittersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLinkedTwittersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetLinkedTwittersResponse::ArenaDtor(void* object) {
  GetLinkedTwittersResponse* _this = reinterpret_cast< GetLinkedTwittersResponse* >(object);
  (void)_this;
}
void GetLinkedTwittersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLinkedTwittersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLinkedTwittersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faucet.GetLinkedTwittersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linkedtwitters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLinkedTwittersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .faucet.LinkedTwitterPair linkedTwitters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linkedtwitters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLinkedTwittersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faucet.GetLinkedTwittersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .faucet.LinkedTwitterPair linkedTwitters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_linkedtwitters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_linkedtwitters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faucet.GetLinkedTwittersResponse)
  return target;
}

size_t GetLinkedTwittersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faucet.GetLinkedTwittersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .faucet.LinkedTwitterPair linkedTwitters = 1;
  total_size += 1UL * this->_internal_linkedtwitters_size();
  for (const auto& msg : this->linkedtwitters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLinkedTwittersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLinkedTwittersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLinkedTwittersResponse::GetClassData() const { return &_class_data_; }

void GetLinkedTwittersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLinkedTwittersResponse *>(to)->MergeFrom(
      static_cast<const GetLinkedTwittersResponse &>(from));
}


void GetLinkedTwittersResponse::MergeFrom(const GetLinkedTwittersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faucet.GetLinkedTwittersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  linkedtwitters_.MergeFrom(from.linkedtwitters_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLinkedTwittersResponse::CopyFrom(const GetLinkedTwittersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faucet.GetLinkedTwittersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLinkedTwittersResponse::IsInitialized() const {
  return true;
}

void GetLinkedTwittersResponse::InternalSwap(GetLinkedTwittersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  linkedtwitters_.InternalSwap(&other->linkedtwitters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLinkedTwittersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[10]);
}

// ===================================================================

class LinkedTwitterForAddressRequest::_Internal {
 public:
};

LinkedTwitterForAddressRequest::LinkedTwitterForAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:faucet.LinkedTwitterForAddressRequest)
}
LinkedTwitterForAddressRequest::LinkedTwitterForAddressRequest(const LinkedTwitterForAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:faucet.LinkedTwitterForAddressRequest)
}

inline void LinkedTwitterForAddressRequest::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LinkedTwitterForAddressRequest::~LinkedTwitterForAddressRequest() {
  // @@protoc_insertion_point(destructor:faucet.LinkedTwitterForAddressRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LinkedTwitterForAddressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinkedTwitterForAddressRequest::ArenaDtor(void* object) {
  LinkedTwitterForAddressRequest* _this = reinterpret_cast< LinkedTwitterForAddressRequest* >(object);
  (void)_this;
}
void LinkedTwitterForAddressRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkedTwitterForAddressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinkedTwitterForAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faucet.LinkedTwitterForAddressRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkedTwitterForAddressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.LinkedTwitterForAddressRequest.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkedTwitterForAddressRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faucet.LinkedTwitterForAddressRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.LinkedTwitterForAddressRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faucet.LinkedTwitterForAddressRequest)
  return target;
}

size_t LinkedTwitterForAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faucet.LinkedTwitterForAddressRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkedTwitterForAddressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LinkedTwitterForAddressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkedTwitterForAddressRequest::GetClassData() const { return &_class_data_; }

void LinkedTwitterForAddressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LinkedTwitterForAddressRequest *>(to)->MergeFrom(
      static_cast<const LinkedTwitterForAddressRequest &>(from));
}


void LinkedTwitterForAddressRequest::MergeFrom(const LinkedTwitterForAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faucet.LinkedTwitterForAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinkedTwitterForAddressRequest::CopyFrom(const LinkedTwitterForAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faucet.LinkedTwitterForAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkedTwitterForAddressRequest::IsInitialized() const {
  return true;
}

void LinkedTwitterForAddressRequest::InternalSwap(LinkedTwitterForAddressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkedTwitterForAddressRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[11]);
}

// ===================================================================

class LinkedTwitterForAddressResponse::_Internal {
 public:
};

LinkedTwitterForAddressResponse::LinkedTwitterForAddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:faucet.LinkedTwitterForAddressResponse)
}
LinkedTwitterForAddressResponse::LinkedTwitterForAddressResponse(const LinkedTwitterForAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:faucet.LinkedTwitterForAddressResponse)
}

inline void LinkedTwitterForAddressResponse::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LinkedTwitterForAddressResponse::~LinkedTwitterForAddressResponse() {
  // @@protoc_insertion_point(destructor:faucet.LinkedTwitterForAddressResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LinkedTwitterForAddressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinkedTwitterForAddressResponse::ArenaDtor(void* object) {
  LinkedTwitterForAddressResponse* _this = reinterpret_cast< LinkedTwitterForAddressResponse* >(object);
  (void)_this;
}
void LinkedTwitterForAddressResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkedTwitterForAddressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinkedTwitterForAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faucet.LinkedTwitterForAddressResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkedTwitterForAddressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.LinkedTwitterForAddressResponse.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkedTwitterForAddressResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faucet.LinkedTwitterForAddressResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.LinkedTwitterForAddressResponse.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faucet.LinkedTwitterForAddressResponse)
  return target;
}

size_t LinkedTwitterForAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faucet.LinkedTwitterForAddressResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkedTwitterForAddressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LinkedTwitterForAddressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkedTwitterForAddressResponse::GetClassData() const { return &_class_data_; }

void LinkedTwitterForAddressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LinkedTwitterForAddressResponse *>(to)->MergeFrom(
      static_cast<const LinkedTwitterForAddressResponse &>(from));
}


void LinkedTwitterForAddressResponse::MergeFrom(const LinkedTwitterForAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faucet.LinkedTwitterForAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinkedTwitterForAddressResponse::CopyFrom(const LinkedTwitterForAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faucet.LinkedTwitterForAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkedTwitterForAddressResponse::IsInitialized() const {
  return true;
}

void LinkedTwitterForAddressResponse::InternalSwap(LinkedTwitterForAddressResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkedTwitterForAddressResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[12]);
}

// ===================================================================

class LinkedAddressForTwitterRequest::_Internal {
 public:
};

LinkedAddressForTwitterRequest::LinkedAddressForTwitterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:faucet.LinkedAddressForTwitterRequest)
}
LinkedAddressForTwitterRequest::LinkedAddressForTwitterRequest(const LinkedAddressForTwitterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:faucet.LinkedAddressForTwitterRequest)
}

inline void LinkedAddressForTwitterRequest::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LinkedAddressForTwitterRequest::~LinkedAddressForTwitterRequest() {
  // @@protoc_insertion_point(destructor:faucet.LinkedAddressForTwitterRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LinkedAddressForTwitterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinkedAddressForTwitterRequest::ArenaDtor(void* object) {
  LinkedAddressForTwitterRequest* _this = reinterpret_cast< LinkedAddressForTwitterRequest* >(object);
  (void)_this;
}
void LinkedAddressForTwitterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkedAddressForTwitterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinkedAddressForTwitterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faucet.LinkedAddressForTwitterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkedAddressForTwitterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.LinkedAddressForTwitterRequest.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkedAddressForTwitterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faucet.LinkedAddressForTwitterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.LinkedAddressForTwitterRequest.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faucet.LinkedAddressForTwitterRequest)
  return target;
}

size_t LinkedAddressForTwitterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faucet.LinkedAddressForTwitterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkedAddressForTwitterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LinkedAddressForTwitterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkedAddressForTwitterRequest::GetClassData() const { return &_class_data_; }

void LinkedAddressForTwitterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LinkedAddressForTwitterRequest *>(to)->MergeFrom(
      static_cast<const LinkedAddressForTwitterRequest &>(from));
}


void LinkedAddressForTwitterRequest::MergeFrom(const LinkedAddressForTwitterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faucet.LinkedAddressForTwitterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinkedAddressForTwitterRequest::CopyFrom(const LinkedAddressForTwitterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faucet.LinkedAddressForTwitterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkedAddressForTwitterRequest::IsInitialized() const {
  return true;
}

void LinkedAddressForTwitterRequest::InternalSwap(LinkedAddressForTwitterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkedAddressForTwitterRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[13]);
}

// ===================================================================

class LinkedAddressForTwitterResponse::_Internal {
 public:
};

LinkedAddressForTwitterResponse::LinkedAddressForTwitterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:faucet.LinkedAddressForTwitterResponse)
}
LinkedAddressForTwitterResponse::LinkedAddressForTwitterResponse(const LinkedAddressForTwitterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:faucet.LinkedAddressForTwitterResponse)
}

inline void LinkedAddressForTwitterResponse::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LinkedAddressForTwitterResponse::~LinkedAddressForTwitterResponse() {
  // @@protoc_insertion_point(destructor:faucet.LinkedAddressForTwitterResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LinkedAddressForTwitterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinkedAddressForTwitterResponse::ArenaDtor(void* object) {
  LinkedAddressForTwitterResponse* _this = reinterpret_cast< LinkedAddressForTwitterResponse* >(object);
  (void)_this;
}
void LinkedAddressForTwitterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkedAddressForTwitterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinkedAddressForTwitterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:faucet.LinkedAddressForTwitterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkedAddressForTwitterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.LinkedAddressForTwitterResponse.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkedAddressForTwitterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faucet.LinkedAddressForTwitterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.LinkedAddressForTwitterResponse.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faucet.LinkedAddressForTwitterResponse)
  return target;
}

size_t LinkedAddressForTwitterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faucet.LinkedAddressForTwitterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkedAddressForTwitterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LinkedAddressForTwitterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkedAddressForTwitterResponse::GetClassData() const { return &_class_data_; }

void LinkedAddressForTwitterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LinkedAddressForTwitterResponse *>(to)->MergeFrom(
      static_cast<const LinkedAddressForTwitterResponse &>(from));
}


void LinkedAddressForTwitterResponse::MergeFrom(const LinkedAddressForTwitterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faucet.LinkedAddressForTwitterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinkedAddressForTwitterResponse::CopyFrom(const LinkedAddressForTwitterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faucet.LinkedAddressForTwitterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkedAddressForTwitterResponse::IsInitialized() const {
  return true;
}

void LinkedAddressForTwitterResponse::InternalSwap(LinkedAddressForTwitterResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkedAddressForTwitterResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[14]);
}

// ===================================================================

class SetLinkedTwitterRequest::_Internal {
 public:
};

SetLinkedTwitterRequest::SetLinkedTwitterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:faucet.SetLinkedTwitterRequest)
}
SetLinkedTwitterRequest::SetLinkedTwitterRequest(const SetLinkedTwitterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:faucet.SetLinkedTwitterRequest)
}

inline void SetLinkedTwitterRequest::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetLinkedTwitterRequest::~SetLinkedTwitterRequest() {
  // @@protoc_insertion_point(destructor:faucet.SetLinkedTwitterRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetLinkedTwitterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetLinkedTwitterRequest::ArenaDtor(void* object) {
  SetLinkedTwitterRequest* _this = reinterpret_cast< SetLinkedTwitterRequest* >(object);
  (void)_this;
}
void SetLinkedTwitterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetLinkedTwitterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetLinkedTwitterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:faucet.SetLinkedTwitterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  username_.ClearToEmpty();
  signature_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLinkedTwitterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.SetLinkedTwitterRequest.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.SetLinkedTwitterRequest.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "faucet.SetLinkedTwitterRequest.signature"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetLinkedTwitterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:faucet.SetLinkedTwitterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.SetLinkedTwitterRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.SetLinkedTwitterRequest.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string signature = 3;
  if (!this->_internal_signature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "faucet.SetLinkedTwitterRequest.signature");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:faucet.SetLinkedTwitterRequest)
  return target;
}

size_t SetLinkedTwitterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:faucet.SetLinkedTwitterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string signature = 3;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLinkedTwitterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetLinkedTwitterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLinkedTwitterRequest::GetClassData() const { return &_class_data_; }

void SetLinkedTwitterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetLinkedTwitterRequest *>(to)->MergeFrom(
      static_cast<const SetLinkedTwitterRequest &>(from));
}


void SetLinkedTwitterRequest::MergeFrom(const SetLinkedTwitterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:faucet.SetLinkedTwitterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLinkedTwitterRequest::CopyFrom(const SetLinkedTwitterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:faucet.SetLinkedTwitterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLinkedTwitterRequest::IsInitialized() const {
  return true;
}

void SetLinkedTwitterRequest::InternalSwap(SetLinkedTwitterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLinkedTwitterRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[15]);
}

// ===================================================================

class SetLinkedTwitterResponse::_Internal {
 public:
};

SetLinkedTwitterResponse::SetLinkedTwitterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:faucet.SetLinkedTwitterResponse)
}
SetLinkedTwitterResponse::SetLinkedTwitterResponse(const SetLinkedTwitterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:faucet.SetLinkedTwitterResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLinkedTwitterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLinkedTwitterResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetLinkedTwitterResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_faucet_2eproto_getter, &descriptor_table_faucet_2eproto_once,
      file_level_metadata_faucet_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace faucet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::faucet::LinkedTwitterPair* Arena::CreateMaybeMessage< ::faucet::LinkedTwitterPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::LinkedTwitterPair >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::FaucetStore_AddressToUsernameEntry_DoNotUse* Arena::CreateMaybeMessage< ::faucet::FaucetStore_AddressToUsernameEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::FaucetStore_AddressToUsernameEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::FaucetStore_UsernameToAddressEntry_DoNotUse* Arena::CreateMaybeMessage< ::faucet::FaucetStore_UsernameToAddressEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::FaucetStore_UsernameToAddressEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::FaucetStore_LatestDripEntry_DoNotUse* Arena::CreateMaybeMessage< ::faucet::FaucetStore_LatestDripEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::FaucetStore_LatestDripEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::FaucetStore* Arena::CreateMaybeMessage< ::faucet::FaucetStore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::FaucetStore >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::DripRequest* Arena::CreateMaybeMessage< ::faucet::DripRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::DripRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::DripDevRequest* Arena::CreateMaybeMessage< ::faucet::DripDevRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::DripDevRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::DripResponse* Arena::CreateMaybeMessage< ::faucet::DripResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::DripResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::TimeUntilDripResponse* Arena::CreateMaybeMessage< ::faucet::TimeUntilDripResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::TimeUntilDripResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::GetLinkedTwittersRequest* Arena::CreateMaybeMessage< ::faucet::GetLinkedTwittersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::GetLinkedTwittersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::GetLinkedTwittersResponse* Arena::CreateMaybeMessage< ::faucet::GetLinkedTwittersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::GetLinkedTwittersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::LinkedTwitterForAddressRequest* Arena::CreateMaybeMessage< ::faucet::LinkedTwitterForAddressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::LinkedTwitterForAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::LinkedTwitterForAddressResponse* Arena::CreateMaybeMessage< ::faucet::LinkedTwitterForAddressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::LinkedTwitterForAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::LinkedAddressForTwitterRequest* Arena::CreateMaybeMessage< ::faucet::LinkedAddressForTwitterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::LinkedAddressForTwitterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::LinkedAddressForTwitterResponse* Arena::CreateMaybeMessage< ::faucet::LinkedAddressForTwitterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::LinkedAddressForTwitterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::SetLinkedTwitterRequest* Arena::CreateMaybeMessage< ::faucet::SetLinkedTwitterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::SetLinkedTwitterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::faucet::SetLinkedTwitterResponse* Arena::CreateMaybeMessage< ::faucet::SetLinkedTwitterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::faucet::SetLinkedTwitterResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
