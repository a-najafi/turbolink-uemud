//Generated by TurboLink CodeGenerator, do not edit!
#include "SEcssnapshot/EcsSnapshotService.h"
#include "SEcssnapshot/EcsSnapshotClient.h"
#include "EcsSnapshotService_Private.h"
#include "EcsSnapshotMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UECSStateSnapshotService::UECSStateSnapshotService()
	: d(new UECSStateSnapshotService::Private())
{
}

UECSStateSnapshotService::~UECSStateSnapshotService()
{
	delete d;
}

void UECSStateSnapshotService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("ECSStateSnapshotService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to ECSStateSnapshotService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = ecssnapshot::ECSStateSnapshotService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UECSStateSnapshotService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UECSStateSnapshotServiceClient* UECSStateSnapshotService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UECSStateSnapshotServiceClient>();
	return client;
}

void UECSStateSnapshotService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UECSStateSnapshotService::CallGetStateLatest(const FGrpcEcssnapshotECSStateRequestLatest& Request, FGetStateLatestResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UECSStateSnapshotServiceGetStateLatestLambdaWrapper* lambdaWrapper = NewObject<UECSStateSnapshotServiceGetStateLatestLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetStateLatest();
	InnerClient->OnGetStateLatestResponse.AddUniqueDynamic(lambdaWrapper, &UECSStateSnapshotServiceGetStateLatestLambdaWrapper::OnResponse);
	InnerClient->GetStateLatest(lambdaWrapper->Handle, Request);
}

void UECSStateSnapshotService::CallGetStateLatestStream(const FGrpcEcssnapshotECSStateRequestLatestStream& Request, FGetStateLatestStreamResponseLambda ResponseLambda, FGetStateLatestStreamFinishLambda FinishLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UECSStateSnapshotServiceGetStateLatestStreamLambdaWrapper* lambdaWrapper = NewObject<UECSStateSnapshotServiceGetStateLatestStreamLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->FinishLambda = FinishLambda;
	lambdaWrapper->Handle = InnerClient->InitGetStateLatestStream();
	InnerClient->OnGetStateLatestStreamResponse.AddUniqueDynamic(lambdaWrapper, &UECSStateSnapshotServiceGetStateLatestStreamLambdaWrapper::OnResponse);
	InnerClient->OnContextStateChange.AddUniqueDynamic(lambdaWrapper, &UECSStateSnapshotServiceGetStateLatestStreamLambdaWrapper::OnContextStateChanged);
	InnerClient->GetStateLatestStream(lambdaWrapper->Handle, Request);
}

void UECSStateSnapshotService::CallGetStateLatestStreamV2(const FGrpcEcssnapshotECSStateRequestLatestStream& Request, FGetStateLatestStreamV2ResponseLambda ResponseLambda, FGetStateLatestStreamV2FinishLambda FinishLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UECSStateSnapshotServiceGetStateLatestStreamV2LambdaWrapper* lambdaWrapper = NewObject<UECSStateSnapshotServiceGetStateLatestStreamV2LambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->FinishLambda = FinishLambda;
	lambdaWrapper->Handle = InnerClient->InitGetStateLatestStreamV2();
	InnerClient->OnGetStateLatestStreamV2Response.AddUniqueDynamic(lambdaWrapper, &UECSStateSnapshotServiceGetStateLatestStreamV2LambdaWrapper::OnResponse);
	InnerClient->OnContextStateChange.AddUniqueDynamic(lambdaWrapper, &UECSStateSnapshotServiceGetStateLatestStreamV2LambdaWrapper::OnContextStateChanged);
	InnerClient->GetStateLatestStreamV2(lambdaWrapper->Handle, Request);
}

void UECSStateSnapshotService::CallGetStateLatestStreamPruned(const FGrpcEcssnapshotECSStateRequestLatestStreamPruned& Request, FGetStateLatestStreamPrunedResponseLambda ResponseLambda, FGetStateLatestStreamPrunedFinishLambda FinishLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UECSStateSnapshotServiceGetStateLatestStreamPrunedLambdaWrapper* lambdaWrapper = NewObject<UECSStateSnapshotServiceGetStateLatestStreamPrunedLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->FinishLambda = FinishLambda;
	lambdaWrapper->Handle = InnerClient->InitGetStateLatestStreamPruned();
	InnerClient->OnGetStateLatestStreamPrunedResponse.AddUniqueDynamic(lambdaWrapper, &UECSStateSnapshotServiceGetStateLatestStreamPrunedLambdaWrapper::OnResponse);
	InnerClient->OnContextStateChange.AddUniqueDynamic(lambdaWrapper, &UECSStateSnapshotServiceGetStateLatestStreamPrunedLambdaWrapper::OnContextStateChanged);
	InnerClient->GetStateLatestStreamPruned(lambdaWrapper->Handle, Request);
}

void UECSStateSnapshotService::CallGetStateLatestStreamPrunedV2(const FGrpcEcssnapshotECSStateRequestLatestStreamPruned& Request, FGetStateLatestStreamPrunedV2ResponseLambda ResponseLambda, FGetStateLatestStreamPrunedV2FinishLambda FinishLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UECSStateSnapshotServiceGetStateLatestStreamPrunedV2LambdaWrapper* lambdaWrapper = NewObject<UECSStateSnapshotServiceGetStateLatestStreamPrunedV2LambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->FinishLambda = FinishLambda;
	lambdaWrapper->Handle = InnerClient->InitGetStateLatestStreamPrunedV2();
	InnerClient->OnGetStateLatestStreamPrunedV2Response.AddUniqueDynamic(lambdaWrapper, &UECSStateSnapshotServiceGetStateLatestStreamPrunedV2LambdaWrapper::OnResponse);
	InnerClient->OnContextStateChange.AddUniqueDynamic(lambdaWrapper, &UECSStateSnapshotServiceGetStateLatestStreamPrunedV2LambdaWrapper::OnContextStateChanged);
	InnerClient->GetStateLatestStreamPrunedV2(lambdaWrapper->Handle, Request);
}

void UECSStateSnapshotService::CallGetStateBlockLatest(const FGrpcEcssnapshotECSStateBlockRequestLatest& Request, FGetStateBlockLatestResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UECSStateSnapshotServiceGetStateBlockLatestLambdaWrapper* lambdaWrapper = NewObject<UECSStateSnapshotServiceGetStateBlockLatestLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetStateBlockLatest();
	InnerClient->OnGetStateBlockLatestResponse.AddUniqueDynamic(lambdaWrapper, &UECSStateSnapshotServiceGetStateBlockLatestLambdaWrapper::OnResponse);
	InnerClient->GetStateBlockLatest(lambdaWrapper->Handle, Request);
}

void UECSStateSnapshotService::CallGetStateAtBlock(const FGrpcEcssnapshotECSStateRequestAtBlock& Request, FGetStateAtBlockResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UECSStateSnapshotServiceGetStateAtBlockLambdaWrapper* lambdaWrapper = NewObject<UECSStateSnapshotServiceGetStateAtBlockLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetStateAtBlock();
	InnerClient->OnGetStateAtBlockResponse.AddUniqueDynamic(lambdaWrapper, &UECSStateSnapshotServiceGetStateAtBlockLambdaWrapper::OnResponse);
	InnerClient->GetStateAtBlock(lambdaWrapper->Handle, Request);
}

void UECSStateSnapshotService::CallGetWorlds(const FGrpcEcssnapshotWorldsRequest& Request, FGetWorldsResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UECSStateSnapshotServiceGetWorldsLambdaWrapper* lambdaWrapper = NewObject<UECSStateSnapshotServiceGetWorldsLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetWorlds();
	InnerClient->OnGetWorldsResponse.AddUniqueDynamic(lambdaWrapper, &UECSStateSnapshotServiceGetWorldsLambdaWrapper::OnResponse);
	InnerClient->GetWorlds(lambdaWrapper->Handle, Request);
}
