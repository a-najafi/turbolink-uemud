#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecs_stream.proto

#include "ecs_stream.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ecsstream {
constexpr TxMetadata::TxMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct TxMetadataDefaultTypeInternal {
  constexpr TxMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxMetadataDefaultTypeInternal() {}
  union {
    TxMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxMetadataDefaultTypeInternal _TxMetadata_default_instance_;
constexpr ECSEvent::ECSEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eventtype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , componentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entityid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , txhash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , txmetadata_(nullptr){}
struct ECSEventDefaultTypeInternal {
  constexpr ECSEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECSEventDefaultTypeInternal() {}
  union {
    ECSEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECSEventDefaultTypeInternal _ECSEvent_default_instance_;
constexpr ECSStreamBlockBundleRequest::ECSStreamBlockBundleRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , blocknumber_(false)
  , blockhash_(false)
  , blocktimestamp_(false)
  , transactionsconfirmed_(false)
  , ecsevents_(false)
  , ecseventsincludetxmetadata_(false){}
struct ECSStreamBlockBundleRequestDefaultTypeInternal {
  constexpr ECSStreamBlockBundleRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECSStreamBlockBundleRequestDefaultTypeInternal() {}
  union {
    ECSStreamBlockBundleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECSStreamBlockBundleRequestDefaultTypeInternal _ECSStreamBlockBundleRequest_default_instance_;
constexpr ECSStreamBlockBundleReply::ECSStreamBlockBundleReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactionsconfirmed_()
  , ecsevents_()
  , blockhash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , blocknumber_(0u)
  , blocktimestamp_(0u){}
struct ECSStreamBlockBundleReplyDefaultTypeInternal {
  constexpr ECSStreamBlockBundleReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECSStreamBlockBundleReplyDefaultTypeInternal() {}
  union {
    ECSStreamBlockBundleReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECSStreamBlockBundleReplyDefaultTypeInternal _ECSStreamBlockBundleReply_default_instance_;
}  // namespace ecsstream
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ecs_5fstream_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ecs_5fstream_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ecs_5fstream_2eproto = nullptr;

const uint32_t TableStruct_ecs_5fstream_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecsstream::TxMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecsstream::TxMetadata, to_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::TxMetadata, data_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::TxMetadata, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSEvent, eventtype_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSEvent, componentid_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSEvent, entityid_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSEvent, value_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSEvent, txhash_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSEvent, txmetadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleRequest, worldaddress_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleRequest, blocknumber_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleRequest, blockhash_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleRequest, blocktimestamp_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleRequest, transactionsconfirmed_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleRequest, ecsevents_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleRequest, ecseventsincludetxmetadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleReply, blocknumber_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleReply, blockhash_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleReply, blocktimestamp_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleReply, transactionsconfirmed_),
  PROTOBUF_FIELD_OFFSET(::ecsstream::ECSStreamBlockBundleReply, ecsevents_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ecsstream::TxMetadata)},
  { 9, -1, -1, sizeof(::ecsstream::ECSEvent)},
  { 21, -1, -1, sizeof(::ecsstream::ECSStreamBlockBundleRequest)},
  { 34, -1, -1, sizeof(::ecsstream::ECSStreamBlockBundleReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecsstream::_TxMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecsstream::_ECSEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecsstream::_ECSStreamBlockBundleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecsstream::_ECSStreamBlockBundleReply_default_instance_),
};

const char descriptor_table_protodef_ecs_5fstream_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020ecs_stream.proto\022\tecsstream\"5\n\nTxMetad"
  "ata\022\n\n\002to\030\002 \001(\t\022\014\n\004data\030\003 \001(\014\022\r\n\005value\030\004"
  " \001(\004\"\216\001\n\010ECSEvent\022\021\n\teventType\030\001 \001(\t\022\023\n\013"
  "componentId\030\002 \001(\t\022\020\n\010entityId\030\003 \001(\t\022\r\n\005v"
  "alue\030\004 \001(\014\022\016\n\006txHash\030\005 \001(\t\022)\n\ntxMetadata"
  "\030\006 \001(\0132\025.ecsstream.TxMetadata\"\311\001\n\033ECSStr"
  "eamBlockBundleRequest\022\024\n\014worldAddress\030\001 "
  "\001(\t\022\023\n\013blockNumber\030\002 \001(\010\022\021\n\tblockHash\030\003 "
  "\001(\010\022\026\n\016blockTimestamp\030\004 \001(\010\022\035\n\025transacti"
  "onsConfirmed\030\005 \001(\010\022\021\n\tecsEvents\030\006 \001(\010\022\"\n"
  "\032ecsEventsIncludeTxMetadata\030\007 \001(\010\"\242\001\n\031EC"
  "SStreamBlockBundleReply\022\023\n\013blockNumber\030\001"
  " \001(\r\022\021\n\tblockHash\030\002 \001(\t\022\026\n\016blockTimestam"
  "p\030\003 \001(\r\022\035\n\025transactionsConfirmed\030\004 \003(\t\022&"
  "\n\tecsEvents\030\005 \003(\0132\023.ecsstream.ECSEvent2\177"
  "\n\020ECSStreamService\022k\n\027SubscribeToStreamL"
  "atest\022&.ecsstream.ECSStreamBlockBundleRe"
  "quest\032$.ecsstream.ECSStreamBlockBundleRe"
  "ply\"\0000\001B\030Z\026protobuf/go/ecs-streamb\006proto"
  "3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ecs_5fstream_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecs_5fstream_2eproto = {
  false, false, 761, descriptor_table_protodef_ecs_5fstream_2eproto, "ecs_stream.proto", 
  &descriptor_table_ecs_5fstream_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_ecs_5fstream_2eproto::offsets,
  file_level_metadata_ecs_5fstream_2eproto, file_level_enum_descriptors_ecs_5fstream_2eproto, file_level_service_descriptors_ecs_5fstream_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ecs_5fstream_2eproto_getter() {
  return &descriptor_table_ecs_5fstream_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ecs_5fstream_2eproto(&descriptor_table_ecs_5fstream_2eproto);
namespace ecsstream {

// ===================================================================

class TxMetadata::_Internal {
 public:
};

TxMetadata::TxMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecsstream.TxMetadata)
}
TxMetadata::TxMetadata(const TxMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ecsstream.TxMetadata)
}

inline void TxMetadata::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = uint64_t{0u};
}

TxMetadata::~TxMetadata() {
  // @@protoc_insertion_point(destructor:ecsstream.TxMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TxMetadata::ArenaDtor(void* object) {
  TxMetadata* _this = reinterpret_cast< TxMetadata* >(object);
  (void)_this;
}
void TxMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ecsstream.TxMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  data_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecsstream.TxMetadata.to"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecsstream.TxMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string to = 2;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecsstream.TxMetadata.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // uint64 value = 4;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecsstream.TxMetadata)
  return target;
}

size_t TxMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecsstream.TxMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 2;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 value = 4;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxMetadata::GetClassData() const { return &_class_data_; }

void TxMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxMetadata *>(to)->MergeFrom(
      static_cast<const TxMetadata &>(from));
}


void TxMetadata::MergeFrom(const TxMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecsstream.TxMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxMetadata::CopyFrom(const TxMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecsstream.TxMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxMetadata::IsInitialized() const {
  return true;
}

void TxMetadata::InternalSwap(TxMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, lhs_arena,
      &other->to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fstream_2eproto_getter, &descriptor_table_ecs_5fstream_2eproto_once,
      file_level_metadata_ecs_5fstream_2eproto[0]);
}

// ===================================================================

class ECSEvent::_Internal {
 public:
  static const ::ecsstream::TxMetadata& txmetadata(const ECSEvent* msg);
};

const ::ecsstream::TxMetadata&
ECSEvent::_Internal::txmetadata(const ECSEvent* msg) {
  return *msg->txmetadata_;
}
ECSEvent::ECSEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecsstream.ECSEvent)
}
ECSEvent::ECSEvent(const ECSEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eventtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    eventtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eventtype().empty()) {
    eventtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_eventtype(), 
      GetArenaForAllocation());
  }
  componentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    componentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_componentid().empty()) {
    componentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_componentid(), 
      GetArenaForAllocation());
  }
  entityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    entityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entityid().empty()) {
    entityid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entityid(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  txhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    txhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_txhash().empty()) {
    txhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txhash(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_txmetadata()) {
    txmetadata_ = new ::ecsstream::TxMetadata(*from.txmetadata_);
  } else {
    txmetadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ecsstream.ECSEvent)
}

inline void ECSEvent::SharedCtor() {
eventtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  eventtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
componentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  componentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
entityid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  entityid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
txhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  txhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
txmetadata_ = nullptr;
}

ECSEvent::~ECSEvent() {
  // @@protoc_insertion_point(destructor:ecsstream.ECSEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECSEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  eventtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  componentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entityid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete txmetadata_;
}

void ECSEvent::ArenaDtor(void* object) {
  ECSEvent* _this = reinterpret_cast< ECSEvent* >(object);
  (void)_this;
}
void ECSEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECSEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECSEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ecsstream.ECSEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventtype_.ClearToEmpty();
  componentid_.ClearToEmpty();
  entityid_.ClearToEmpty();
  value_.ClearToEmpty();
  txhash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && txmetadata_ != nullptr) {
    delete txmetadata_;
  }
  txmetadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECSEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string eventType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_eventtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecsstream.ECSEvent.eventType"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string componentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_componentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecsstream.ECSEvent.componentId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string entityId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_entityid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecsstream.ECSEvent.entityId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string txHash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_txhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecsstream.ECSEvent.txHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ecsstream.TxMetadata txMetadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_txmetadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECSEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecsstream.ECSEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string eventType = 1;
  if (!this->_internal_eventtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eventtype().data(), static_cast<int>(this->_internal_eventtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecsstream.ECSEvent.eventType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_eventtype(), target);
  }

  // string componentId = 2;
  if (!this->_internal_componentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_componentid().data(), static_cast<int>(this->_internal_componentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecsstream.ECSEvent.componentId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_componentid(), target);
  }

  // string entityId = 3;
  if (!this->_internal_entityid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entityid().data(), static_cast<int>(this->_internal_entityid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecsstream.ECSEvent.entityId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_entityid(), target);
  }

  // bytes value = 4;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_value(), target);
  }

  // string txHash = 5;
  if (!this->_internal_txhash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txhash().data(), static_cast<int>(this->_internal_txhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecsstream.ECSEvent.txHash");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_txhash(), target);
  }

  // .ecsstream.TxMetadata txMetadata = 6;
  if (this->_internal_has_txmetadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::txmetadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecsstream.ECSEvent)
  return target;
}

size_t ECSEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecsstream.ECSEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string eventType = 1;
  if (!this->_internal_eventtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eventtype());
  }

  // string componentId = 2;
  if (!this->_internal_componentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_componentid());
  }

  // string entityId = 3;
  if (!this->_internal_entityid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entityid());
  }

  // bytes value = 4;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // string txHash = 5;
  if (!this->_internal_txhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txhash());
  }

  // .ecsstream.TxMetadata txMetadata = 6;
  if (this->_internal_has_txmetadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *txmetadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECSEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECSEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECSEvent::GetClassData() const { return &_class_data_; }

void ECSEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECSEvent *>(to)->MergeFrom(
      static_cast<const ECSEvent &>(from));
}


void ECSEvent::MergeFrom(const ECSEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecsstream.ECSEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_eventtype().empty()) {
    _internal_set_eventtype(from._internal_eventtype());
  }
  if (!from._internal_componentid().empty()) {
    _internal_set_componentid(from._internal_componentid());
  }
  if (!from._internal_entityid().empty()) {
    _internal_set_entityid(from._internal_entityid());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_txhash().empty()) {
    _internal_set_txhash(from._internal_txhash());
  }
  if (from._internal_has_txmetadata()) {
    _internal_mutable_txmetadata()->::ecsstream::TxMetadata::MergeFrom(from._internal_txmetadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECSEvent::CopyFrom(const ECSEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecsstream.ECSEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECSEvent::IsInitialized() const {
  return true;
}

void ECSEvent::InternalSwap(ECSEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &eventtype_, lhs_arena,
      &other->eventtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &componentid_, lhs_arena,
      &other->componentid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &entityid_, lhs_arena,
      &other->entityid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &txhash_, lhs_arena,
      &other->txhash_, rhs_arena
  );
  swap(txmetadata_, other->txmetadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ECSEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fstream_2eproto_getter, &descriptor_table_ecs_5fstream_2eproto_once,
      file_level_metadata_ecs_5fstream_2eproto[1]);
}

// ===================================================================

class ECSStreamBlockBundleRequest::_Internal {
 public:
};

ECSStreamBlockBundleRequest::ECSStreamBlockBundleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecsstream.ECSStreamBlockBundleRequest)
}
ECSStreamBlockBundleRequest::ECSStreamBlockBundleRequest(const ECSStreamBlockBundleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worldaddress().empty()) {
    worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worldaddress(), 
      GetArenaForAllocation());
  }
  ::memcpy(&blocknumber_, &from.blocknumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&ecseventsincludetxmetadata_) -
    reinterpret_cast<char*>(&blocknumber_)) + sizeof(ecseventsincludetxmetadata_));
  // @@protoc_insertion_point(copy_constructor:ecsstream.ECSStreamBlockBundleRequest)
}

inline void ECSStreamBlockBundleRequest::SharedCtor() {
worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blocknumber_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ecseventsincludetxmetadata_) -
    reinterpret_cast<char*>(&blocknumber_)) + sizeof(ecseventsincludetxmetadata_));
}

ECSStreamBlockBundleRequest::~ECSStreamBlockBundleRequest() {
  // @@protoc_insertion_point(destructor:ecsstream.ECSStreamBlockBundleRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECSStreamBlockBundleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  worldaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ECSStreamBlockBundleRequest::ArenaDtor(void* object) {
  ECSStreamBlockBundleRequest* _this = reinterpret_cast< ECSStreamBlockBundleRequest* >(object);
  (void)_this;
}
void ECSStreamBlockBundleRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECSStreamBlockBundleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECSStreamBlockBundleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ecsstream.ECSStreamBlockBundleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldaddress_.ClearToEmpty();
  ::memset(&blocknumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ecseventsincludetxmetadata_) -
      reinterpret_cast<char*>(&blocknumber_)) + sizeof(ecseventsincludetxmetadata_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECSStreamBlockBundleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string worldAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_worldaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecsstream.ECSStreamBlockBundleRequest.worldAddress"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blockNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blockHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          blockhash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blockTimestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          blocktimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool transactionsConfirmed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          transactionsconfirmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ecsEvents = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ecsevents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ecsEventsIncludeTxMetadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ecseventsincludetxmetadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECSStreamBlockBundleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecsstream.ECSStreamBlockBundleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string worldAddress = 1;
  if (!this->_internal_worldaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worldaddress().data(), static_cast<int>(this->_internal_worldaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecsstream.ECSStreamBlockBundleRequest.worldAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worldaddress(), target);
  }

  // bool blockNumber = 2;
  if (this->_internal_blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_blocknumber(), target);
  }

  // bool blockHash = 3;
  if (this->_internal_blockhash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_blockhash(), target);
  }

  // bool blockTimestamp = 4;
  if (this->_internal_blocktimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_blocktimestamp(), target);
  }

  // bool transactionsConfirmed = 5;
  if (this->_internal_transactionsconfirmed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_transactionsconfirmed(), target);
  }

  // bool ecsEvents = 6;
  if (this->_internal_ecsevents() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ecsevents(), target);
  }

  // bool ecsEventsIncludeTxMetadata = 7;
  if (this->_internal_ecseventsincludetxmetadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_ecseventsincludetxmetadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecsstream.ECSStreamBlockBundleRequest)
  return target;
}

size_t ECSStreamBlockBundleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecsstream.ECSStreamBlockBundleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string worldAddress = 1;
  if (!this->_internal_worldaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worldaddress());
  }

  // bool blockNumber = 2;
  if (this->_internal_blocknumber() != 0) {
    total_size += 1 + 1;
  }

  // bool blockHash = 3;
  if (this->_internal_blockhash() != 0) {
    total_size += 1 + 1;
  }

  // bool blockTimestamp = 4;
  if (this->_internal_blocktimestamp() != 0) {
    total_size += 1 + 1;
  }

  // bool transactionsConfirmed = 5;
  if (this->_internal_transactionsconfirmed() != 0) {
    total_size += 1 + 1;
  }

  // bool ecsEvents = 6;
  if (this->_internal_ecsevents() != 0) {
    total_size += 1 + 1;
  }

  // bool ecsEventsIncludeTxMetadata = 7;
  if (this->_internal_ecseventsincludetxmetadata() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECSStreamBlockBundleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECSStreamBlockBundleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECSStreamBlockBundleRequest::GetClassData() const { return &_class_data_; }

void ECSStreamBlockBundleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECSStreamBlockBundleRequest *>(to)->MergeFrom(
      static_cast<const ECSStreamBlockBundleRequest &>(from));
}


void ECSStreamBlockBundleRequest::MergeFrom(const ECSStreamBlockBundleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecsstream.ECSStreamBlockBundleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_worldaddress().empty()) {
    _internal_set_worldaddress(from._internal_worldaddress());
  }
  if (from._internal_blocknumber() != 0) {
    _internal_set_blocknumber(from._internal_blocknumber());
  }
  if (from._internal_blockhash() != 0) {
    _internal_set_blockhash(from._internal_blockhash());
  }
  if (from._internal_blocktimestamp() != 0) {
    _internal_set_blocktimestamp(from._internal_blocktimestamp());
  }
  if (from._internal_transactionsconfirmed() != 0) {
    _internal_set_transactionsconfirmed(from._internal_transactionsconfirmed());
  }
  if (from._internal_ecsevents() != 0) {
    _internal_set_ecsevents(from._internal_ecsevents());
  }
  if (from._internal_ecseventsincludetxmetadata() != 0) {
    _internal_set_ecseventsincludetxmetadata(from._internal_ecseventsincludetxmetadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECSStreamBlockBundleRequest::CopyFrom(const ECSStreamBlockBundleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecsstream.ECSStreamBlockBundleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECSStreamBlockBundleRequest::IsInitialized() const {
  return true;
}

void ECSStreamBlockBundleRequest::InternalSwap(ECSStreamBlockBundleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &worldaddress_, lhs_arena,
      &other->worldaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ECSStreamBlockBundleRequest, ecseventsincludetxmetadata_)
      + sizeof(ECSStreamBlockBundleRequest::ecseventsincludetxmetadata_)
      - PROTOBUF_FIELD_OFFSET(ECSStreamBlockBundleRequest, blocknumber_)>(
          reinterpret_cast<char*>(&blocknumber_),
          reinterpret_cast<char*>(&other->blocknumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ECSStreamBlockBundleRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fstream_2eproto_getter, &descriptor_table_ecs_5fstream_2eproto_once,
      file_level_metadata_ecs_5fstream_2eproto[2]);
}

// ===================================================================

class ECSStreamBlockBundleReply::_Internal {
 public:
};

ECSStreamBlockBundleReply::ECSStreamBlockBundleReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactionsconfirmed_(arena),
  ecsevents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecsstream.ECSStreamBlockBundleReply)
}
ECSStreamBlockBundleReply::ECSStreamBlockBundleReply(const ECSStreamBlockBundleReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactionsconfirmed_(from.transactionsconfirmed_),
      ecsevents_(from.ecsevents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    blockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blockhash().empty()) {
    blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blockhash(), 
      GetArenaForAllocation());
  }
  ::memcpy(&blocknumber_, &from.blocknumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocktimestamp_) -
    reinterpret_cast<char*>(&blocknumber_)) + sizeof(blocktimestamp_));
  // @@protoc_insertion_point(copy_constructor:ecsstream.ECSStreamBlockBundleReply)
}

inline void ECSStreamBlockBundleReply::SharedCtor() {
blockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  blockhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&blocknumber_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&blocktimestamp_) -
    reinterpret_cast<char*>(&blocknumber_)) + sizeof(blocktimestamp_));
}

ECSStreamBlockBundleReply::~ECSStreamBlockBundleReply() {
  // @@protoc_insertion_point(destructor:ecsstream.ECSStreamBlockBundleReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECSStreamBlockBundleReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  blockhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ECSStreamBlockBundleReply::ArenaDtor(void* object) {
  ECSStreamBlockBundleReply* _this = reinterpret_cast< ECSStreamBlockBundleReply* >(object);
  (void)_this;
}
void ECSStreamBlockBundleReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECSStreamBlockBundleReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECSStreamBlockBundleReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ecsstream.ECSStreamBlockBundleReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactionsconfirmed_.Clear();
  ecsevents_.Clear();
  blockhash_.ClearToEmpty();
  ::memset(&blocknumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocktimestamp_) -
      reinterpret_cast<char*>(&blocknumber_)) + sizeof(blocktimestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECSStreamBlockBundleReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 blockNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string blockHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_blockhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecsstream.ECSStreamBlockBundleReply.blockHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 blockTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          blocktimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string transactionsConfirmed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactionsconfirmed();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecsstream.ECSStreamBlockBundleReply.transactionsConfirmed"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ecsstream.ECSEvent ecsEvents = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ecsevents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECSStreamBlockBundleReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecsstream.ECSStreamBlockBundleReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 blockNumber = 1;
  if (this->_internal_blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_blocknumber(), target);
  }

  // string blockHash = 2;
  if (!this->_internal_blockhash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blockhash().data(), static_cast<int>(this->_internal_blockhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecsstream.ECSStreamBlockBundleReply.blockHash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_blockhash(), target);
  }

  // uint32 blockTimestamp = 3;
  if (this->_internal_blocktimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blocktimestamp(), target);
  }

  // repeated string transactionsConfirmed = 4;
  for (int i = 0, n = this->_internal_transactionsconfirmed_size(); i < n; i++) {
    const auto& s = this->_internal_transactionsconfirmed(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecsstream.ECSStreamBlockBundleReply.transactionsConfirmed");
    target = stream->WriteString(4, s, target);
  }

  // repeated .ecsstream.ECSEvent ecsEvents = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ecsevents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ecsevents(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecsstream.ECSStreamBlockBundleReply)
  return target;
}

size_t ECSStreamBlockBundleReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecsstream.ECSStreamBlockBundleReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string transactionsConfirmed = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(transactionsconfirmed_.size());
  for (int i = 0, n = transactionsconfirmed_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      transactionsconfirmed_.Get(i));
  }

  // repeated .ecsstream.ECSEvent ecsEvents = 5;
  total_size += 1UL * this->_internal_ecsevents_size();
  for (const auto& msg : this->ecsevents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string blockHash = 2;
  if (!this->_internal_blockhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blockhash());
  }

  // uint32 blockNumber = 1;
  if (this->_internal_blocknumber() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_blocknumber());
  }

  // uint32 blockTimestamp = 3;
  if (this->_internal_blocktimestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_blocktimestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECSStreamBlockBundleReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECSStreamBlockBundleReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECSStreamBlockBundleReply::GetClassData() const { return &_class_data_; }

void ECSStreamBlockBundleReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECSStreamBlockBundleReply *>(to)->MergeFrom(
      static_cast<const ECSStreamBlockBundleReply &>(from));
}


void ECSStreamBlockBundleReply::MergeFrom(const ECSStreamBlockBundleReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecsstream.ECSStreamBlockBundleReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  transactionsconfirmed_.MergeFrom(from.transactionsconfirmed_);
  ecsevents_.MergeFrom(from.ecsevents_);
  if (!from._internal_blockhash().empty()) {
    _internal_set_blockhash(from._internal_blockhash());
  }
  if (from._internal_blocknumber() != 0) {
    _internal_set_blocknumber(from._internal_blocknumber());
  }
  if (from._internal_blocktimestamp() != 0) {
    _internal_set_blocktimestamp(from._internal_blocktimestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECSStreamBlockBundleReply::CopyFrom(const ECSStreamBlockBundleReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecsstream.ECSStreamBlockBundleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECSStreamBlockBundleReply::IsInitialized() const {
  return true;
}

void ECSStreamBlockBundleReply::InternalSwap(ECSStreamBlockBundleReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactionsconfirmed_.InternalSwap(&other->transactionsconfirmed_);
  ecsevents_.InternalSwap(&other->ecsevents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &blockhash_, lhs_arena,
      &other->blockhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ECSStreamBlockBundleReply, blocktimestamp_)
      + sizeof(ECSStreamBlockBundleReply::blocktimestamp_)
      - PROTOBUF_FIELD_OFFSET(ECSStreamBlockBundleReply, blocknumber_)>(
          reinterpret_cast<char*>(&blocknumber_),
          reinterpret_cast<char*>(&other->blocknumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ECSStreamBlockBundleReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fstream_2eproto_getter, &descriptor_table_ecs_5fstream_2eproto_once,
      file_level_metadata_ecs_5fstream_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ecsstream
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ecsstream::TxMetadata* Arena::CreateMaybeMessage< ::ecsstream::TxMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecsstream::TxMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::ecsstream::ECSEvent* Arena::CreateMaybeMessage< ::ecsstream::ECSEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecsstream::ECSEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ecsstream::ECSStreamBlockBundleRequest* Arena::CreateMaybeMessage< ::ecsstream::ECSStreamBlockBundleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecsstream::ECSStreamBlockBundleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ecsstream::ECSStreamBlockBundleReply* Arena::CreateMaybeMessage< ::ecsstream::ECSStreamBlockBundleReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecsstream::ECSStreamBlockBundleReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
