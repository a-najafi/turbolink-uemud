#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: faucet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_faucet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_faucet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_faucet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_faucet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_faucet_2eproto;
namespace faucet {
class DripDevRequest;
struct DripDevRequestDefaultTypeInternal;
extern DripDevRequestDefaultTypeInternal _DripDevRequest_default_instance_;
class DripRequest;
struct DripRequestDefaultTypeInternal;
extern DripRequestDefaultTypeInternal _DripRequest_default_instance_;
class DripResponse;
struct DripResponseDefaultTypeInternal;
extern DripResponseDefaultTypeInternal _DripResponse_default_instance_;
class FaucetStore;
struct FaucetStoreDefaultTypeInternal;
extern FaucetStoreDefaultTypeInternal _FaucetStore_default_instance_;
class FaucetStore_AddressToUsernameEntry_DoNotUse;
struct FaucetStore_AddressToUsernameEntry_DoNotUseDefaultTypeInternal;
extern FaucetStore_AddressToUsernameEntry_DoNotUseDefaultTypeInternal _FaucetStore_AddressToUsernameEntry_DoNotUse_default_instance_;
class FaucetStore_LatestDripEntry_DoNotUse;
struct FaucetStore_LatestDripEntry_DoNotUseDefaultTypeInternal;
extern FaucetStore_LatestDripEntry_DoNotUseDefaultTypeInternal _FaucetStore_LatestDripEntry_DoNotUse_default_instance_;
class FaucetStore_UsernameToAddressEntry_DoNotUse;
struct FaucetStore_UsernameToAddressEntry_DoNotUseDefaultTypeInternal;
extern FaucetStore_UsernameToAddressEntry_DoNotUseDefaultTypeInternal _FaucetStore_UsernameToAddressEntry_DoNotUse_default_instance_;
class GetLinkedTwittersRequest;
struct GetLinkedTwittersRequestDefaultTypeInternal;
extern GetLinkedTwittersRequestDefaultTypeInternal _GetLinkedTwittersRequest_default_instance_;
class GetLinkedTwittersResponse;
struct GetLinkedTwittersResponseDefaultTypeInternal;
extern GetLinkedTwittersResponseDefaultTypeInternal _GetLinkedTwittersResponse_default_instance_;
class LinkedAddressForTwitterRequest;
struct LinkedAddressForTwitterRequestDefaultTypeInternal;
extern LinkedAddressForTwitterRequestDefaultTypeInternal _LinkedAddressForTwitterRequest_default_instance_;
class LinkedAddressForTwitterResponse;
struct LinkedAddressForTwitterResponseDefaultTypeInternal;
extern LinkedAddressForTwitterResponseDefaultTypeInternal _LinkedAddressForTwitterResponse_default_instance_;
class LinkedTwitterForAddressRequest;
struct LinkedTwitterForAddressRequestDefaultTypeInternal;
extern LinkedTwitterForAddressRequestDefaultTypeInternal _LinkedTwitterForAddressRequest_default_instance_;
class LinkedTwitterForAddressResponse;
struct LinkedTwitterForAddressResponseDefaultTypeInternal;
extern LinkedTwitterForAddressResponseDefaultTypeInternal _LinkedTwitterForAddressResponse_default_instance_;
class LinkedTwitterPair;
struct LinkedTwitterPairDefaultTypeInternal;
extern LinkedTwitterPairDefaultTypeInternal _LinkedTwitterPair_default_instance_;
class SetLinkedTwitterRequest;
struct SetLinkedTwitterRequestDefaultTypeInternal;
extern SetLinkedTwitterRequestDefaultTypeInternal _SetLinkedTwitterRequest_default_instance_;
class SetLinkedTwitterResponse;
struct SetLinkedTwitterResponseDefaultTypeInternal;
extern SetLinkedTwitterResponseDefaultTypeInternal _SetLinkedTwitterResponse_default_instance_;
class TimeUntilDripResponse;
struct TimeUntilDripResponseDefaultTypeInternal;
extern TimeUntilDripResponseDefaultTypeInternal _TimeUntilDripResponse_default_instance_;
}  // namespace faucet
PROTOBUF_NAMESPACE_OPEN
template<> ::faucet::DripDevRequest* Arena::CreateMaybeMessage<::faucet::DripDevRequest>(Arena*);
template<> ::faucet::DripRequest* Arena::CreateMaybeMessage<::faucet::DripRequest>(Arena*);
template<> ::faucet::DripResponse* Arena::CreateMaybeMessage<::faucet::DripResponse>(Arena*);
template<> ::faucet::FaucetStore* Arena::CreateMaybeMessage<::faucet::FaucetStore>(Arena*);
template<> ::faucet::FaucetStore_AddressToUsernameEntry_DoNotUse* Arena::CreateMaybeMessage<::faucet::FaucetStore_AddressToUsernameEntry_DoNotUse>(Arena*);
template<> ::faucet::FaucetStore_LatestDripEntry_DoNotUse* Arena::CreateMaybeMessage<::faucet::FaucetStore_LatestDripEntry_DoNotUse>(Arena*);
template<> ::faucet::FaucetStore_UsernameToAddressEntry_DoNotUse* Arena::CreateMaybeMessage<::faucet::FaucetStore_UsernameToAddressEntry_DoNotUse>(Arena*);
template<> ::faucet::GetLinkedTwittersRequest* Arena::CreateMaybeMessage<::faucet::GetLinkedTwittersRequest>(Arena*);
template<> ::faucet::GetLinkedTwittersResponse* Arena::CreateMaybeMessage<::faucet::GetLinkedTwittersResponse>(Arena*);
template<> ::faucet::LinkedAddressForTwitterRequest* Arena::CreateMaybeMessage<::faucet::LinkedAddressForTwitterRequest>(Arena*);
template<> ::faucet::LinkedAddressForTwitterResponse* Arena::CreateMaybeMessage<::faucet::LinkedAddressForTwitterResponse>(Arena*);
template<> ::faucet::LinkedTwitterForAddressRequest* Arena::CreateMaybeMessage<::faucet::LinkedTwitterForAddressRequest>(Arena*);
template<> ::faucet::LinkedTwitterForAddressResponse* Arena::CreateMaybeMessage<::faucet::LinkedTwitterForAddressResponse>(Arena*);
template<> ::faucet::LinkedTwitterPair* Arena::CreateMaybeMessage<::faucet::LinkedTwitterPair>(Arena*);
template<> ::faucet::SetLinkedTwitterRequest* Arena::CreateMaybeMessage<::faucet::SetLinkedTwitterRequest>(Arena*);
template<> ::faucet::SetLinkedTwitterResponse* Arena::CreateMaybeMessage<::faucet::SetLinkedTwitterResponse>(Arena*);
template<> ::faucet::TimeUntilDripResponse* Arena::CreateMaybeMessage<::faucet::TimeUntilDripResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace faucet {

// ===================================================================

class LinkedTwitterPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faucet.LinkedTwitterPair) */ {
 public:
  inline LinkedTwitterPair() : LinkedTwitterPair(nullptr) {}
  ~LinkedTwitterPair() override;
  explicit constexpr LinkedTwitterPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkedTwitterPair(const LinkedTwitterPair& from);
  LinkedTwitterPair(LinkedTwitterPair&& from) noexcept
    : LinkedTwitterPair() {
    *this = ::std::move(from);
  }

  inline LinkedTwitterPair& operator=(const LinkedTwitterPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkedTwitterPair& operator=(LinkedTwitterPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkedTwitterPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkedTwitterPair* internal_default_instance() {
    return reinterpret_cast<const LinkedTwitterPair*>(
               &_LinkedTwitterPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LinkedTwitterPair& a, LinkedTwitterPair& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkedTwitterPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkedTwitterPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkedTwitterPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkedTwitterPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinkedTwitterPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LinkedTwitterPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkedTwitterPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.LinkedTwitterPair";
  }
  protected:
  explicit LinkedTwitterPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:faucet.LinkedTwitterPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// -------------------------------------------------------------------

class FaucetStore_AddressToUsernameEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaucetStore_AddressToUsernameEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaucetStore_AddressToUsernameEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  FaucetStore_AddressToUsernameEntry_DoNotUse();
  explicit constexpr FaucetStore_AddressToUsernameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FaucetStore_AddressToUsernameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FaucetStore_AddressToUsernameEntry_DoNotUse& other);
  static const FaucetStore_AddressToUsernameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FaucetStore_AddressToUsernameEntry_DoNotUse*>(&_FaucetStore_AddressToUsernameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "faucet.FaucetStore.AddressToUsernameEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "faucet.FaucetStore.AddressToUsernameEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class FaucetStore_UsernameToAddressEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaucetStore_UsernameToAddressEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaucetStore_UsernameToAddressEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  FaucetStore_UsernameToAddressEntry_DoNotUse();
  explicit constexpr FaucetStore_UsernameToAddressEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FaucetStore_UsernameToAddressEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FaucetStore_UsernameToAddressEntry_DoNotUse& other);
  static const FaucetStore_UsernameToAddressEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FaucetStore_UsernameToAddressEntry_DoNotUse*>(&_FaucetStore_UsernameToAddressEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "faucet.FaucetStore.UsernameToAddressEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "faucet.FaucetStore.UsernameToAddressEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class FaucetStore_LatestDripEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaucetStore_LatestDripEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FaucetStore_LatestDripEntry_DoNotUse, 
    std::string, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  FaucetStore_LatestDripEntry_DoNotUse();
  explicit constexpr FaucetStore_LatestDripEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FaucetStore_LatestDripEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FaucetStore_LatestDripEntry_DoNotUse& other);
  static const FaucetStore_LatestDripEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FaucetStore_LatestDripEntry_DoNotUse*>(&_FaucetStore_LatestDripEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "faucet.FaucetStore.LatestDripEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class FaucetStore final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faucet.FaucetStore) */ {
 public:
  inline FaucetStore() : FaucetStore(nullptr) {}
  ~FaucetStore() override;
  explicit constexpr FaucetStore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FaucetStore(const FaucetStore& from);
  FaucetStore(FaucetStore&& from) noexcept
    : FaucetStore() {
    *this = ::std::move(from);
  }

  inline FaucetStore& operator=(const FaucetStore& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaucetStore& operator=(FaucetStore&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FaucetStore& default_instance() {
    return *internal_default_instance();
  }
  static inline const FaucetStore* internal_default_instance() {
    return reinterpret_cast<const FaucetStore*>(
               &_FaucetStore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FaucetStore& a, FaucetStore& b) {
    a.Swap(&b);
  }
  inline void Swap(FaucetStore* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FaucetStore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FaucetStore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FaucetStore>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FaucetStore& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FaucetStore& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaucetStore* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.FaucetStore";
  }
  protected:
  explicit FaucetStore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAddressToUsernameFieldNumber = 1,
    kUsernameToAddressFieldNumber = 2,
    kLatestDripFieldNumber = 3,
    kTotalDripCountFieldNumber = 4,
  };
  // map<string, string> addressToUsername = 1;
  int addresstousername_size() const;
  private:
  int _internal_addresstousername_size() const;
  public:
  void clear_addresstousername();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_addresstousername() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_addresstousername();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      addresstousername() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_addresstousername();

  // map<string, string> usernameToAddress = 2;
  int usernametoaddress_size() const;
  private:
  int _internal_usernametoaddress_size() const;
  public:
  void clear_usernametoaddress();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_usernametoaddress() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_usernametoaddress();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      usernametoaddress() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_usernametoaddress();

  // map<string, int64> latestDrip = 3;
  int latestdrip_size() const;
  private:
  int _internal_latestdrip_size() const;
  public:
  void clear_latestdrip();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      _internal_latestdrip() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      _internal_mutable_latestdrip();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
      latestdrip() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
      mutable_latestdrip();

  // double totalDripCount = 4;
  void clear_totaldripcount();
  double totaldripcount() const;
  void set_totaldripcount(double value);
  private:
  double _internal_totaldripcount() const;
  void _internal_set_totaldripcount(double value);
  public:

  // @@protoc_insertion_point(class_scope:faucet.FaucetStore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FaucetStore_AddressToUsernameEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> addresstousername_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FaucetStore_UsernameToAddressEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> usernametoaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      FaucetStore_LatestDripEntry_DoNotUse,
      std::string, int64_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> latestdrip_;
  double totaldripcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// -------------------------------------------------------------------

class DripRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faucet.DripRequest) */ {
 public:
  inline DripRequest() : DripRequest(nullptr) {}
  ~DripRequest() override;
  explicit constexpr DripRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DripRequest(const DripRequest& from);
  DripRequest(DripRequest&& from) noexcept
    : DripRequest() {
    *this = ::std::move(from);
  }

  inline DripRequest& operator=(const DripRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DripRequest& operator=(DripRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DripRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DripRequest* internal_default_instance() {
    return reinterpret_cast<const DripRequest*>(
               &_DripRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DripRequest& a, DripRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DripRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DripRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DripRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DripRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DripRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DripRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DripRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.DripRequest";
  }
  protected:
  explicit DripRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:faucet.DripRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// -------------------------------------------------------------------

class DripDevRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faucet.DripDevRequest) */ {
 public:
  inline DripDevRequest() : DripDevRequest(nullptr) {}
  ~DripDevRequest() override;
  explicit constexpr DripDevRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DripDevRequest(const DripDevRequest& from);
  DripDevRequest(DripDevRequest&& from) noexcept
    : DripDevRequest() {
    *this = ::std::move(from);
  }

  inline DripDevRequest& operator=(const DripDevRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DripDevRequest& operator=(DripDevRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DripDevRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DripDevRequest* internal_default_instance() {
    return reinterpret_cast<const DripDevRequest*>(
               &_DripDevRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DripDevRequest& a, DripDevRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DripDevRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DripDevRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DripDevRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DripDevRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DripDevRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DripDevRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DripDevRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.DripDevRequest";
  }
  protected:
  explicit DripDevRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:faucet.DripDevRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// -------------------------------------------------------------------

class DripResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faucet.DripResponse) */ {
 public:
  inline DripResponse() : DripResponse(nullptr) {}
  ~DripResponse() override;
  explicit constexpr DripResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DripResponse(const DripResponse& from);
  DripResponse(DripResponse&& from) noexcept
    : DripResponse() {
    *this = ::std::move(from);
  }

  inline DripResponse& operator=(const DripResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DripResponse& operator=(DripResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DripResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DripResponse* internal_default_instance() {
    return reinterpret_cast<const DripResponse*>(
               &_DripResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DripResponse& a, DripResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DripResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DripResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DripResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DripResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DripResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DripResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DripResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.DripResponse";
  }
  protected:
  explicit DripResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDripTxHashFieldNumber = 1,
    kEcsTxHashFieldNumber = 2,
  };
  // string dripTxHash = 1;
  void clear_driptxhash();
  const std::string& driptxhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_driptxhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_driptxhash();
  PROTOBUF_NODISCARD std::string* release_driptxhash();
  void set_allocated_driptxhash(std::string* driptxhash);
  private:
  const std::string& _internal_driptxhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_driptxhash(const std::string& value);
  std::string* _internal_mutable_driptxhash();
  public:

  // string ecsTxHash = 2;
  void clear_ecstxhash();
  const std::string& ecstxhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ecstxhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ecstxhash();
  PROTOBUF_NODISCARD std::string* release_ecstxhash();
  void set_allocated_ecstxhash(std::string* ecstxhash);
  private:
  const std::string& _internal_ecstxhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ecstxhash(const std::string& value);
  std::string* _internal_mutable_ecstxhash();
  public:

  // @@protoc_insertion_point(class_scope:faucet.DripResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driptxhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ecstxhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// -------------------------------------------------------------------

class TimeUntilDripResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faucet.TimeUntilDripResponse) */ {
 public:
  inline TimeUntilDripResponse() : TimeUntilDripResponse(nullptr) {}
  ~TimeUntilDripResponse() override;
  explicit constexpr TimeUntilDripResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeUntilDripResponse(const TimeUntilDripResponse& from);
  TimeUntilDripResponse(TimeUntilDripResponse&& from) noexcept
    : TimeUntilDripResponse() {
    *this = ::std::move(from);
  }

  inline TimeUntilDripResponse& operator=(const TimeUntilDripResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeUntilDripResponse& operator=(TimeUntilDripResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeUntilDripResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeUntilDripResponse* internal_default_instance() {
    return reinterpret_cast<const TimeUntilDripResponse*>(
               &_TimeUntilDripResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TimeUntilDripResponse& a, TimeUntilDripResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeUntilDripResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeUntilDripResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeUntilDripResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeUntilDripResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeUntilDripResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TimeUntilDripResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeUntilDripResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.TimeUntilDripResponse";
  }
  protected:
  explicit TimeUntilDripResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeUntilDripMinutesFieldNumber = 1,
    kTimeUntilDripSecondsFieldNumber = 2,
  };
  // double timeUntilDripMinutes = 1;
  void clear_timeuntildripminutes();
  double timeuntildripminutes() const;
  void set_timeuntildripminutes(double value);
  private:
  double _internal_timeuntildripminutes() const;
  void _internal_set_timeuntildripminutes(double value);
  public:

  // double timeUntilDripSeconds = 2;
  void clear_timeuntildripseconds();
  double timeuntildripseconds() const;
  void set_timeuntildripseconds(double value);
  private:
  double _internal_timeuntildripseconds() const;
  void _internal_set_timeuntildripseconds(double value);
  public:

  // @@protoc_insertion_point(class_scope:faucet.TimeUntilDripResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double timeuntildripminutes_;
  double timeuntildripseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// -------------------------------------------------------------------

class GetLinkedTwittersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:faucet.GetLinkedTwittersRequest) */ {
 public:
  inline GetLinkedTwittersRequest() : GetLinkedTwittersRequest(nullptr) {}
  explicit constexpr GetLinkedTwittersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLinkedTwittersRequest(const GetLinkedTwittersRequest& from);
  GetLinkedTwittersRequest(GetLinkedTwittersRequest&& from) noexcept
    : GetLinkedTwittersRequest() {
    *this = ::std::move(from);
  }

  inline GetLinkedTwittersRequest& operator=(const GetLinkedTwittersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLinkedTwittersRequest& operator=(GetLinkedTwittersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLinkedTwittersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLinkedTwittersRequest* internal_default_instance() {
    return reinterpret_cast<const GetLinkedTwittersRequest*>(
               &_GetLinkedTwittersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetLinkedTwittersRequest& a, GetLinkedTwittersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLinkedTwittersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLinkedTwittersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLinkedTwittersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLinkedTwittersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetLinkedTwittersRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetLinkedTwittersRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.GetLinkedTwittersRequest";
  }
  protected:
  explicit GetLinkedTwittersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:faucet.GetLinkedTwittersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// -------------------------------------------------------------------

class GetLinkedTwittersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faucet.GetLinkedTwittersResponse) */ {
 public:
  inline GetLinkedTwittersResponse() : GetLinkedTwittersResponse(nullptr) {}
  ~GetLinkedTwittersResponse() override;
  explicit constexpr GetLinkedTwittersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLinkedTwittersResponse(const GetLinkedTwittersResponse& from);
  GetLinkedTwittersResponse(GetLinkedTwittersResponse&& from) noexcept
    : GetLinkedTwittersResponse() {
    *this = ::std::move(from);
  }

  inline GetLinkedTwittersResponse& operator=(const GetLinkedTwittersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLinkedTwittersResponse& operator=(GetLinkedTwittersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLinkedTwittersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLinkedTwittersResponse* internal_default_instance() {
    return reinterpret_cast<const GetLinkedTwittersResponse*>(
               &_GetLinkedTwittersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetLinkedTwittersResponse& a, GetLinkedTwittersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLinkedTwittersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLinkedTwittersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLinkedTwittersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLinkedTwittersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLinkedTwittersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLinkedTwittersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLinkedTwittersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.GetLinkedTwittersResponse";
  }
  protected:
  explicit GetLinkedTwittersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkedTwittersFieldNumber = 1,
  };
  // repeated .faucet.LinkedTwitterPair linkedTwitters = 1;
  int linkedtwitters_size() const;
  private:
  int _internal_linkedtwitters_size() const;
  public:
  void clear_linkedtwitters();
  ::faucet::LinkedTwitterPair* mutable_linkedtwitters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faucet::LinkedTwitterPair >*
      mutable_linkedtwitters();
  private:
  const ::faucet::LinkedTwitterPair& _internal_linkedtwitters(int index) const;
  ::faucet::LinkedTwitterPair* _internal_add_linkedtwitters();
  public:
  const ::faucet::LinkedTwitterPair& linkedtwitters(int index) const;
  ::faucet::LinkedTwitterPair* add_linkedtwitters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faucet::LinkedTwitterPair >&
      linkedtwitters() const;

  // @@protoc_insertion_point(class_scope:faucet.GetLinkedTwittersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faucet::LinkedTwitterPair > linkedtwitters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// -------------------------------------------------------------------

class LinkedTwitterForAddressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faucet.LinkedTwitterForAddressRequest) */ {
 public:
  inline LinkedTwitterForAddressRequest() : LinkedTwitterForAddressRequest(nullptr) {}
  ~LinkedTwitterForAddressRequest() override;
  explicit constexpr LinkedTwitterForAddressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkedTwitterForAddressRequest(const LinkedTwitterForAddressRequest& from);
  LinkedTwitterForAddressRequest(LinkedTwitterForAddressRequest&& from) noexcept
    : LinkedTwitterForAddressRequest() {
    *this = ::std::move(from);
  }

  inline LinkedTwitterForAddressRequest& operator=(const LinkedTwitterForAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkedTwitterForAddressRequest& operator=(LinkedTwitterForAddressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkedTwitterForAddressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkedTwitterForAddressRequest* internal_default_instance() {
    return reinterpret_cast<const LinkedTwitterForAddressRequest*>(
               &_LinkedTwitterForAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LinkedTwitterForAddressRequest& a, LinkedTwitterForAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkedTwitterForAddressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkedTwitterForAddressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkedTwitterForAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkedTwitterForAddressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinkedTwitterForAddressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LinkedTwitterForAddressRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkedTwitterForAddressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.LinkedTwitterForAddressRequest";
  }
  protected:
  explicit LinkedTwitterForAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:faucet.LinkedTwitterForAddressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// -------------------------------------------------------------------

class LinkedTwitterForAddressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faucet.LinkedTwitterForAddressResponse) */ {
 public:
  inline LinkedTwitterForAddressResponse() : LinkedTwitterForAddressResponse(nullptr) {}
  ~LinkedTwitterForAddressResponse() override;
  explicit constexpr LinkedTwitterForAddressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkedTwitterForAddressResponse(const LinkedTwitterForAddressResponse& from);
  LinkedTwitterForAddressResponse(LinkedTwitterForAddressResponse&& from) noexcept
    : LinkedTwitterForAddressResponse() {
    *this = ::std::move(from);
  }

  inline LinkedTwitterForAddressResponse& operator=(const LinkedTwitterForAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkedTwitterForAddressResponse& operator=(LinkedTwitterForAddressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkedTwitterForAddressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkedTwitterForAddressResponse* internal_default_instance() {
    return reinterpret_cast<const LinkedTwitterForAddressResponse*>(
               &_LinkedTwitterForAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LinkedTwitterForAddressResponse& a, LinkedTwitterForAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkedTwitterForAddressResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkedTwitterForAddressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkedTwitterForAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkedTwitterForAddressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinkedTwitterForAddressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LinkedTwitterForAddressResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkedTwitterForAddressResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.LinkedTwitterForAddressResponse";
  }
  protected:
  explicit LinkedTwitterForAddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:faucet.LinkedTwitterForAddressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// -------------------------------------------------------------------

class LinkedAddressForTwitterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faucet.LinkedAddressForTwitterRequest) */ {
 public:
  inline LinkedAddressForTwitterRequest() : LinkedAddressForTwitterRequest(nullptr) {}
  ~LinkedAddressForTwitterRequest() override;
  explicit constexpr LinkedAddressForTwitterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkedAddressForTwitterRequest(const LinkedAddressForTwitterRequest& from);
  LinkedAddressForTwitterRequest(LinkedAddressForTwitterRequest&& from) noexcept
    : LinkedAddressForTwitterRequest() {
    *this = ::std::move(from);
  }

  inline LinkedAddressForTwitterRequest& operator=(const LinkedAddressForTwitterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkedAddressForTwitterRequest& operator=(LinkedAddressForTwitterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkedAddressForTwitterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkedAddressForTwitterRequest* internal_default_instance() {
    return reinterpret_cast<const LinkedAddressForTwitterRequest*>(
               &_LinkedAddressForTwitterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LinkedAddressForTwitterRequest& a, LinkedAddressForTwitterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkedAddressForTwitterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkedAddressForTwitterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkedAddressForTwitterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkedAddressForTwitterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinkedAddressForTwitterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LinkedAddressForTwitterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkedAddressForTwitterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.LinkedAddressForTwitterRequest";
  }
  protected:
  explicit LinkedAddressForTwitterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:faucet.LinkedAddressForTwitterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// -------------------------------------------------------------------

class LinkedAddressForTwitterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faucet.LinkedAddressForTwitterResponse) */ {
 public:
  inline LinkedAddressForTwitterResponse() : LinkedAddressForTwitterResponse(nullptr) {}
  ~LinkedAddressForTwitterResponse() override;
  explicit constexpr LinkedAddressForTwitterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkedAddressForTwitterResponse(const LinkedAddressForTwitterResponse& from);
  LinkedAddressForTwitterResponse(LinkedAddressForTwitterResponse&& from) noexcept
    : LinkedAddressForTwitterResponse() {
    *this = ::std::move(from);
  }

  inline LinkedAddressForTwitterResponse& operator=(const LinkedAddressForTwitterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkedAddressForTwitterResponse& operator=(LinkedAddressForTwitterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkedAddressForTwitterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkedAddressForTwitterResponse* internal_default_instance() {
    return reinterpret_cast<const LinkedAddressForTwitterResponse*>(
               &_LinkedAddressForTwitterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LinkedAddressForTwitterResponse& a, LinkedAddressForTwitterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkedAddressForTwitterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkedAddressForTwitterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkedAddressForTwitterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkedAddressForTwitterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinkedAddressForTwitterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LinkedAddressForTwitterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkedAddressForTwitterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.LinkedAddressForTwitterResponse";
  }
  protected:
  explicit LinkedAddressForTwitterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:faucet.LinkedAddressForTwitterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// -------------------------------------------------------------------

class SetLinkedTwitterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:faucet.SetLinkedTwitterRequest) */ {
 public:
  inline SetLinkedTwitterRequest() : SetLinkedTwitterRequest(nullptr) {}
  ~SetLinkedTwitterRequest() override;
  explicit constexpr SetLinkedTwitterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLinkedTwitterRequest(const SetLinkedTwitterRequest& from);
  SetLinkedTwitterRequest(SetLinkedTwitterRequest&& from) noexcept
    : SetLinkedTwitterRequest() {
    *this = ::std::move(from);
  }

  inline SetLinkedTwitterRequest& operator=(const SetLinkedTwitterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLinkedTwitterRequest& operator=(SetLinkedTwitterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetLinkedTwitterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLinkedTwitterRequest* internal_default_instance() {
    return reinterpret_cast<const SetLinkedTwitterRequest*>(
               &_SetLinkedTwitterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetLinkedTwitterRequest& a, SetLinkedTwitterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLinkedTwitterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLinkedTwitterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetLinkedTwitterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetLinkedTwitterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetLinkedTwitterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetLinkedTwitterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLinkedTwitterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.SetLinkedTwitterRequest";
  }
  protected:
  explicit SetLinkedTwitterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kSignatureFieldNumber = 3,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string signature = 3;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:faucet.SetLinkedTwitterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// -------------------------------------------------------------------

class SetLinkedTwitterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:faucet.SetLinkedTwitterResponse) */ {
 public:
  inline SetLinkedTwitterResponse() : SetLinkedTwitterResponse(nullptr) {}
  explicit constexpr SetLinkedTwitterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLinkedTwitterResponse(const SetLinkedTwitterResponse& from);
  SetLinkedTwitterResponse(SetLinkedTwitterResponse&& from) noexcept
    : SetLinkedTwitterResponse() {
    *this = ::std::move(from);
  }

  inline SetLinkedTwitterResponse& operator=(const SetLinkedTwitterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLinkedTwitterResponse& operator=(SetLinkedTwitterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetLinkedTwitterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLinkedTwitterResponse* internal_default_instance() {
    return reinterpret_cast<const SetLinkedTwitterResponse*>(
               &_SetLinkedTwitterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetLinkedTwitterResponse& a, SetLinkedTwitterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLinkedTwitterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLinkedTwitterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetLinkedTwitterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetLinkedTwitterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetLinkedTwitterResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetLinkedTwitterResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "faucet.SetLinkedTwitterResponse";
  }
  protected:
  explicit SetLinkedTwitterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:faucet.SetLinkedTwitterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_faucet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LinkedTwitterPair

// string username = 1;
inline void LinkedTwitterPair::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& LinkedTwitterPair::username() const {
  // @@protoc_insertion_point(field_get:faucet.LinkedTwitterPair.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LinkedTwitterPair::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.LinkedTwitterPair.username)
}
inline std::string* LinkedTwitterPair::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:faucet.LinkedTwitterPair.username)
  return _s;
}
inline const std::string& LinkedTwitterPair::_internal_username() const {
  return username_.Get();
}
inline void LinkedTwitterPair::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LinkedTwitterPair::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LinkedTwitterPair::release_username() {
  // @@protoc_insertion_point(field_release:faucet.LinkedTwitterPair.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LinkedTwitterPair::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.LinkedTwitterPair.username)
}

// string address = 2;
inline void LinkedTwitterPair::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& LinkedTwitterPair::address() const {
  // @@protoc_insertion_point(field_get:faucet.LinkedTwitterPair.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LinkedTwitterPair::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.LinkedTwitterPair.address)
}
inline std::string* LinkedTwitterPair::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:faucet.LinkedTwitterPair.address)
  return _s;
}
inline const std::string& LinkedTwitterPair::_internal_address() const {
  return address_.Get();
}
inline void LinkedTwitterPair::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LinkedTwitterPair::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LinkedTwitterPair::release_address() {
  // @@protoc_insertion_point(field_release:faucet.LinkedTwitterPair.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LinkedTwitterPair::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.LinkedTwitterPair.address)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FaucetStore

// map<string, string> addressToUsername = 1;
inline int FaucetStore::_internal_addresstousername_size() const {
  return addresstousername_.size();
}
inline int FaucetStore::addresstousername_size() const {
  return _internal_addresstousername_size();
}
inline void FaucetStore::clear_addresstousername() {
  addresstousername_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
FaucetStore::_internal_addresstousername() const {
  return addresstousername_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
FaucetStore::addresstousername() const {
  // @@protoc_insertion_point(field_map:faucet.FaucetStore.addressToUsername)
  return _internal_addresstousername();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
FaucetStore::_internal_mutable_addresstousername() {
  return addresstousername_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
FaucetStore::mutable_addresstousername() {
  // @@protoc_insertion_point(field_mutable_map:faucet.FaucetStore.addressToUsername)
  return _internal_mutable_addresstousername();
}

// map<string, string> usernameToAddress = 2;
inline int FaucetStore::_internal_usernametoaddress_size() const {
  return usernametoaddress_.size();
}
inline int FaucetStore::usernametoaddress_size() const {
  return _internal_usernametoaddress_size();
}
inline void FaucetStore::clear_usernametoaddress() {
  usernametoaddress_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
FaucetStore::_internal_usernametoaddress() const {
  return usernametoaddress_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
FaucetStore::usernametoaddress() const {
  // @@protoc_insertion_point(field_map:faucet.FaucetStore.usernameToAddress)
  return _internal_usernametoaddress();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
FaucetStore::_internal_mutable_usernametoaddress() {
  return usernametoaddress_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
FaucetStore::mutable_usernametoaddress() {
  // @@protoc_insertion_point(field_mutable_map:faucet.FaucetStore.usernameToAddress)
  return _internal_mutable_usernametoaddress();
}

// map<string, int64> latestDrip = 3;
inline int FaucetStore::_internal_latestdrip_size() const {
  return latestdrip_.size();
}
inline int FaucetStore::latestdrip_size() const {
  return _internal_latestdrip_size();
}
inline void FaucetStore::clear_latestdrip() {
  latestdrip_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
FaucetStore::_internal_latestdrip() const {
  return latestdrip_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >&
FaucetStore::latestdrip() const {
  // @@protoc_insertion_point(field_map:faucet.FaucetStore.latestDrip)
  return _internal_latestdrip();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
FaucetStore::_internal_mutable_latestdrip() {
  return latestdrip_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >*
FaucetStore::mutable_latestdrip() {
  // @@protoc_insertion_point(field_mutable_map:faucet.FaucetStore.latestDrip)
  return _internal_mutable_latestdrip();
}

// double totalDripCount = 4;
inline void FaucetStore::clear_totaldripcount() {
  totaldripcount_ = 0;
}
inline double FaucetStore::_internal_totaldripcount() const {
  return totaldripcount_;
}
inline double FaucetStore::totaldripcount() const {
  // @@protoc_insertion_point(field_get:faucet.FaucetStore.totalDripCount)
  return _internal_totaldripcount();
}
inline void FaucetStore::_internal_set_totaldripcount(double value) {
  
  totaldripcount_ = value;
}
inline void FaucetStore::set_totaldripcount(double value) {
  _internal_set_totaldripcount(value);
  // @@protoc_insertion_point(field_set:faucet.FaucetStore.totalDripCount)
}

// -------------------------------------------------------------------

// DripRequest

// string username = 1;
inline void DripRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& DripRequest::username() const {
  // @@protoc_insertion_point(field_get:faucet.DripRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DripRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.DripRequest.username)
}
inline std::string* DripRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:faucet.DripRequest.username)
  return _s;
}
inline const std::string& DripRequest::_internal_username() const {
  return username_.Get();
}
inline void DripRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DripRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DripRequest::release_username() {
  // @@protoc_insertion_point(field_release:faucet.DripRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DripRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.DripRequest.username)
}

// string address = 2;
inline void DripRequest::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& DripRequest::address() const {
  // @@protoc_insertion_point(field_get:faucet.DripRequest.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DripRequest::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.DripRequest.address)
}
inline std::string* DripRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:faucet.DripRequest.address)
  return _s;
}
inline const std::string& DripRequest::_internal_address() const {
  return address_.Get();
}
inline void DripRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DripRequest::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DripRequest::release_address() {
  // @@protoc_insertion_point(field_release:faucet.DripRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DripRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.DripRequest.address)
}

// -------------------------------------------------------------------

// DripDevRequest

// string address = 1;
inline void DripDevRequest::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& DripDevRequest::address() const {
  // @@protoc_insertion_point(field_get:faucet.DripDevRequest.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DripDevRequest::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.DripDevRequest.address)
}
inline std::string* DripDevRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:faucet.DripDevRequest.address)
  return _s;
}
inline const std::string& DripDevRequest::_internal_address() const {
  return address_.Get();
}
inline void DripDevRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DripDevRequest::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DripDevRequest::release_address() {
  // @@protoc_insertion_point(field_release:faucet.DripDevRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DripDevRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.DripDevRequest.address)
}

// -------------------------------------------------------------------

// DripResponse

// string dripTxHash = 1;
inline void DripResponse::clear_driptxhash() {
  driptxhash_.ClearToEmpty();
}
inline const std::string& DripResponse::driptxhash() const {
  // @@protoc_insertion_point(field_get:faucet.DripResponse.dripTxHash)
  return _internal_driptxhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DripResponse::set_driptxhash(ArgT0&& arg0, ArgT... args) {
 
 driptxhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.DripResponse.dripTxHash)
}
inline std::string* DripResponse::mutable_driptxhash() {
  std::string* _s = _internal_mutable_driptxhash();
  // @@protoc_insertion_point(field_mutable:faucet.DripResponse.dripTxHash)
  return _s;
}
inline const std::string& DripResponse::_internal_driptxhash() const {
  return driptxhash_.Get();
}
inline void DripResponse::_internal_set_driptxhash(const std::string& value) {
  
  driptxhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DripResponse::_internal_mutable_driptxhash() {
  
  return driptxhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DripResponse::release_driptxhash() {
  // @@protoc_insertion_point(field_release:faucet.DripResponse.dripTxHash)
  return driptxhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DripResponse::set_allocated_driptxhash(std::string* driptxhash) {
  if (driptxhash != nullptr) {
    
  } else {
    
  }
  driptxhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driptxhash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (driptxhash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    driptxhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.DripResponse.dripTxHash)
}

// string ecsTxHash = 2;
inline void DripResponse::clear_ecstxhash() {
  ecstxhash_.ClearToEmpty();
}
inline const std::string& DripResponse::ecstxhash() const {
  // @@protoc_insertion_point(field_get:faucet.DripResponse.ecsTxHash)
  return _internal_ecstxhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DripResponse::set_ecstxhash(ArgT0&& arg0, ArgT... args) {
 
 ecstxhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.DripResponse.ecsTxHash)
}
inline std::string* DripResponse::mutable_ecstxhash() {
  std::string* _s = _internal_mutable_ecstxhash();
  // @@protoc_insertion_point(field_mutable:faucet.DripResponse.ecsTxHash)
  return _s;
}
inline const std::string& DripResponse::_internal_ecstxhash() const {
  return ecstxhash_.Get();
}
inline void DripResponse::_internal_set_ecstxhash(const std::string& value) {
  
  ecstxhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DripResponse::_internal_mutable_ecstxhash() {
  
  return ecstxhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DripResponse::release_ecstxhash() {
  // @@protoc_insertion_point(field_release:faucet.DripResponse.ecsTxHash)
  return ecstxhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DripResponse::set_allocated_ecstxhash(std::string* ecstxhash) {
  if (ecstxhash != nullptr) {
    
  } else {
    
  }
  ecstxhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ecstxhash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ecstxhash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ecstxhash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.DripResponse.ecsTxHash)
}

// -------------------------------------------------------------------

// TimeUntilDripResponse

// double timeUntilDripMinutes = 1;
inline void TimeUntilDripResponse::clear_timeuntildripminutes() {
  timeuntildripminutes_ = 0;
}
inline double TimeUntilDripResponse::_internal_timeuntildripminutes() const {
  return timeuntildripminutes_;
}
inline double TimeUntilDripResponse::timeuntildripminutes() const {
  // @@protoc_insertion_point(field_get:faucet.TimeUntilDripResponse.timeUntilDripMinutes)
  return _internal_timeuntildripminutes();
}
inline void TimeUntilDripResponse::_internal_set_timeuntildripminutes(double value) {
  
  timeuntildripminutes_ = value;
}
inline void TimeUntilDripResponse::set_timeuntildripminutes(double value) {
  _internal_set_timeuntildripminutes(value);
  // @@protoc_insertion_point(field_set:faucet.TimeUntilDripResponse.timeUntilDripMinutes)
}

// double timeUntilDripSeconds = 2;
inline void TimeUntilDripResponse::clear_timeuntildripseconds() {
  timeuntildripseconds_ = 0;
}
inline double TimeUntilDripResponse::_internal_timeuntildripseconds() const {
  return timeuntildripseconds_;
}
inline double TimeUntilDripResponse::timeuntildripseconds() const {
  // @@protoc_insertion_point(field_get:faucet.TimeUntilDripResponse.timeUntilDripSeconds)
  return _internal_timeuntildripseconds();
}
inline void TimeUntilDripResponse::_internal_set_timeuntildripseconds(double value) {
  
  timeuntildripseconds_ = value;
}
inline void TimeUntilDripResponse::set_timeuntildripseconds(double value) {
  _internal_set_timeuntildripseconds(value);
  // @@protoc_insertion_point(field_set:faucet.TimeUntilDripResponse.timeUntilDripSeconds)
}

// -------------------------------------------------------------------

// GetLinkedTwittersRequest

// -------------------------------------------------------------------

// GetLinkedTwittersResponse

// repeated .faucet.LinkedTwitterPair linkedTwitters = 1;
inline int GetLinkedTwittersResponse::_internal_linkedtwitters_size() const {
  return linkedtwitters_.size();
}
inline int GetLinkedTwittersResponse::linkedtwitters_size() const {
  return _internal_linkedtwitters_size();
}
inline void GetLinkedTwittersResponse::clear_linkedtwitters() {
  linkedtwitters_.Clear();
}
inline ::faucet::LinkedTwitterPair* GetLinkedTwittersResponse::mutable_linkedtwitters(int index) {
  // @@protoc_insertion_point(field_mutable:faucet.GetLinkedTwittersResponse.linkedTwitters)
  return linkedtwitters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faucet::LinkedTwitterPair >*
GetLinkedTwittersResponse::mutable_linkedtwitters() {
  // @@protoc_insertion_point(field_mutable_list:faucet.GetLinkedTwittersResponse.linkedTwitters)
  return &linkedtwitters_;
}
inline const ::faucet::LinkedTwitterPair& GetLinkedTwittersResponse::_internal_linkedtwitters(int index) const {
  return linkedtwitters_.Get(index);
}
inline const ::faucet::LinkedTwitterPair& GetLinkedTwittersResponse::linkedtwitters(int index) const {
  // @@protoc_insertion_point(field_get:faucet.GetLinkedTwittersResponse.linkedTwitters)
  return _internal_linkedtwitters(index);
}
inline ::faucet::LinkedTwitterPair* GetLinkedTwittersResponse::_internal_add_linkedtwitters() {
  return linkedtwitters_.Add();
}
inline ::faucet::LinkedTwitterPair* GetLinkedTwittersResponse::add_linkedtwitters() {
  ::faucet::LinkedTwitterPair* _add = _internal_add_linkedtwitters();
  // @@protoc_insertion_point(field_add:faucet.GetLinkedTwittersResponse.linkedTwitters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::faucet::LinkedTwitterPair >&
GetLinkedTwittersResponse::linkedtwitters() const {
  // @@protoc_insertion_point(field_list:faucet.GetLinkedTwittersResponse.linkedTwitters)
  return linkedtwitters_;
}

// -------------------------------------------------------------------

// LinkedTwitterForAddressRequest

// string address = 1;
inline void LinkedTwitterForAddressRequest::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& LinkedTwitterForAddressRequest::address() const {
  // @@protoc_insertion_point(field_get:faucet.LinkedTwitterForAddressRequest.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LinkedTwitterForAddressRequest::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.LinkedTwitterForAddressRequest.address)
}
inline std::string* LinkedTwitterForAddressRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:faucet.LinkedTwitterForAddressRequest.address)
  return _s;
}
inline const std::string& LinkedTwitterForAddressRequest::_internal_address() const {
  return address_.Get();
}
inline void LinkedTwitterForAddressRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LinkedTwitterForAddressRequest::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LinkedTwitterForAddressRequest::release_address() {
  // @@protoc_insertion_point(field_release:faucet.LinkedTwitterForAddressRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LinkedTwitterForAddressRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.LinkedTwitterForAddressRequest.address)
}

// -------------------------------------------------------------------

// LinkedTwitterForAddressResponse

// string username = 1;
inline void LinkedTwitterForAddressResponse::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& LinkedTwitterForAddressResponse::username() const {
  // @@protoc_insertion_point(field_get:faucet.LinkedTwitterForAddressResponse.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LinkedTwitterForAddressResponse::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.LinkedTwitterForAddressResponse.username)
}
inline std::string* LinkedTwitterForAddressResponse::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:faucet.LinkedTwitterForAddressResponse.username)
  return _s;
}
inline const std::string& LinkedTwitterForAddressResponse::_internal_username() const {
  return username_.Get();
}
inline void LinkedTwitterForAddressResponse::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LinkedTwitterForAddressResponse::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LinkedTwitterForAddressResponse::release_username() {
  // @@protoc_insertion_point(field_release:faucet.LinkedTwitterForAddressResponse.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LinkedTwitterForAddressResponse::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.LinkedTwitterForAddressResponse.username)
}

// -------------------------------------------------------------------

// LinkedAddressForTwitterRequest

// string username = 1;
inline void LinkedAddressForTwitterRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& LinkedAddressForTwitterRequest::username() const {
  // @@protoc_insertion_point(field_get:faucet.LinkedAddressForTwitterRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LinkedAddressForTwitterRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.LinkedAddressForTwitterRequest.username)
}
inline std::string* LinkedAddressForTwitterRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:faucet.LinkedAddressForTwitterRequest.username)
  return _s;
}
inline const std::string& LinkedAddressForTwitterRequest::_internal_username() const {
  return username_.Get();
}
inline void LinkedAddressForTwitterRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LinkedAddressForTwitterRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LinkedAddressForTwitterRequest::release_username() {
  // @@protoc_insertion_point(field_release:faucet.LinkedAddressForTwitterRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LinkedAddressForTwitterRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.LinkedAddressForTwitterRequest.username)
}

// -------------------------------------------------------------------

// LinkedAddressForTwitterResponse

// string address = 1;
inline void LinkedAddressForTwitterResponse::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& LinkedAddressForTwitterResponse::address() const {
  // @@protoc_insertion_point(field_get:faucet.LinkedAddressForTwitterResponse.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LinkedAddressForTwitterResponse::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.LinkedAddressForTwitterResponse.address)
}
inline std::string* LinkedAddressForTwitterResponse::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:faucet.LinkedAddressForTwitterResponse.address)
  return _s;
}
inline const std::string& LinkedAddressForTwitterResponse::_internal_address() const {
  return address_.Get();
}
inline void LinkedAddressForTwitterResponse::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LinkedAddressForTwitterResponse::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LinkedAddressForTwitterResponse::release_address() {
  // @@protoc_insertion_point(field_release:faucet.LinkedAddressForTwitterResponse.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LinkedAddressForTwitterResponse::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.LinkedAddressForTwitterResponse.address)
}

// -------------------------------------------------------------------

// SetLinkedTwitterRequest

// string address = 1;
inline void SetLinkedTwitterRequest::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& SetLinkedTwitterRequest::address() const {
  // @@protoc_insertion_point(field_get:faucet.SetLinkedTwitterRequest.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetLinkedTwitterRequest::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.SetLinkedTwitterRequest.address)
}
inline std::string* SetLinkedTwitterRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:faucet.SetLinkedTwitterRequest.address)
  return _s;
}
inline const std::string& SetLinkedTwitterRequest::_internal_address() const {
  return address_.Get();
}
inline void SetLinkedTwitterRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetLinkedTwitterRequest::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetLinkedTwitterRequest::release_address() {
  // @@protoc_insertion_point(field_release:faucet.SetLinkedTwitterRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetLinkedTwitterRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.SetLinkedTwitterRequest.address)
}

// string username = 2;
inline void SetLinkedTwitterRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& SetLinkedTwitterRequest::username() const {
  // @@protoc_insertion_point(field_get:faucet.SetLinkedTwitterRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetLinkedTwitterRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.SetLinkedTwitterRequest.username)
}
inline std::string* SetLinkedTwitterRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:faucet.SetLinkedTwitterRequest.username)
  return _s;
}
inline const std::string& SetLinkedTwitterRequest::_internal_username() const {
  return username_.Get();
}
inline void SetLinkedTwitterRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetLinkedTwitterRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetLinkedTwitterRequest::release_username() {
  // @@protoc_insertion_point(field_release:faucet.SetLinkedTwitterRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetLinkedTwitterRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.SetLinkedTwitterRequest.username)
}

// string signature = 3;
inline void SetLinkedTwitterRequest::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& SetLinkedTwitterRequest::signature() const {
  // @@protoc_insertion_point(field_get:faucet.SetLinkedTwitterRequest.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetLinkedTwitterRequest::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:faucet.SetLinkedTwitterRequest.signature)
}
inline std::string* SetLinkedTwitterRequest::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:faucet.SetLinkedTwitterRequest.signature)
  return _s;
}
inline const std::string& SetLinkedTwitterRequest::_internal_signature() const {
  return signature_.Get();
}
inline void SetLinkedTwitterRequest::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetLinkedTwitterRequest::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetLinkedTwitterRequest::release_signature() {
  // @@protoc_insertion_point(field_release:faucet.SetLinkedTwitterRequest.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetLinkedTwitterRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:faucet.SetLinkedTwitterRequest.signature)
}

// -------------------------------------------------------------------

// SetLinkedTwitterResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace faucet

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_faucet_2eproto
