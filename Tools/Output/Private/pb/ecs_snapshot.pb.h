#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecs_snapshot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ecs_5fsnapshot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ecs_5fsnapshot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ecs_5fsnapshot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ecs_5fsnapshot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecs_5fsnapshot_2eproto;
namespace ecssnapshot {
class ECSState;
struct ECSStateDefaultTypeInternal;
extern ECSStateDefaultTypeInternal _ECSState_default_instance_;
class ECSStateBlockReply;
struct ECSStateBlockReplyDefaultTypeInternal;
extern ECSStateBlockReplyDefaultTypeInternal _ECSStateBlockReply_default_instance_;
class ECSStateBlockRequestLatest;
struct ECSStateBlockRequestLatestDefaultTypeInternal;
extern ECSStateBlockRequestLatestDefaultTypeInternal _ECSStateBlockRequestLatest_default_instance_;
class ECSStateReply;
struct ECSStateReplyDefaultTypeInternal;
extern ECSStateReplyDefaultTypeInternal _ECSStateReply_default_instance_;
class ECSStateReplyV2;
struct ECSStateReplyV2DefaultTypeInternal;
extern ECSStateReplyV2DefaultTypeInternal _ECSStateReplyV2_default_instance_;
class ECSStateRequestAtBlock;
struct ECSStateRequestAtBlockDefaultTypeInternal;
extern ECSStateRequestAtBlockDefaultTypeInternal _ECSStateRequestAtBlock_default_instance_;
class ECSStateRequestLatest;
struct ECSStateRequestLatestDefaultTypeInternal;
extern ECSStateRequestLatestDefaultTypeInternal _ECSStateRequestLatest_default_instance_;
class ECSStateRequestLatestStream;
struct ECSStateRequestLatestStreamDefaultTypeInternal;
extern ECSStateRequestLatestStreamDefaultTypeInternal _ECSStateRequestLatestStream_default_instance_;
class ECSStateRequestLatestStreamPruned;
struct ECSStateRequestLatestStreamPrunedDefaultTypeInternal;
extern ECSStateRequestLatestStreamPrunedDefaultTypeInternal _ECSStateRequestLatestStreamPruned_default_instance_;
class ECSStateSnapshot;
struct ECSStateSnapshotDefaultTypeInternal;
extern ECSStateSnapshotDefaultTypeInternal _ECSStateSnapshot_default_instance_;
class Worlds;
struct WorldsDefaultTypeInternal;
extern WorldsDefaultTypeInternal _Worlds_default_instance_;
class WorldsRequest;
struct WorldsRequestDefaultTypeInternal;
extern WorldsRequestDefaultTypeInternal _WorldsRequest_default_instance_;
}  // namespace ecssnapshot
PROTOBUF_NAMESPACE_OPEN
template<> ::ecssnapshot::ECSState* Arena::CreateMaybeMessage<::ecssnapshot::ECSState>(Arena*);
template<> ::ecssnapshot::ECSStateBlockReply* Arena::CreateMaybeMessage<::ecssnapshot::ECSStateBlockReply>(Arena*);
template<> ::ecssnapshot::ECSStateBlockRequestLatest* Arena::CreateMaybeMessage<::ecssnapshot::ECSStateBlockRequestLatest>(Arena*);
template<> ::ecssnapshot::ECSStateReply* Arena::CreateMaybeMessage<::ecssnapshot::ECSStateReply>(Arena*);
template<> ::ecssnapshot::ECSStateReplyV2* Arena::CreateMaybeMessage<::ecssnapshot::ECSStateReplyV2>(Arena*);
template<> ::ecssnapshot::ECSStateRequestAtBlock* Arena::CreateMaybeMessage<::ecssnapshot::ECSStateRequestAtBlock>(Arena*);
template<> ::ecssnapshot::ECSStateRequestLatest* Arena::CreateMaybeMessage<::ecssnapshot::ECSStateRequestLatest>(Arena*);
template<> ::ecssnapshot::ECSStateRequestLatestStream* Arena::CreateMaybeMessage<::ecssnapshot::ECSStateRequestLatestStream>(Arena*);
template<> ::ecssnapshot::ECSStateRequestLatestStreamPruned* Arena::CreateMaybeMessage<::ecssnapshot::ECSStateRequestLatestStreamPruned>(Arena*);
template<> ::ecssnapshot::ECSStateSnapshot* Arena::CreateMaybeMessage<::ecssnapshot::ECSStateSnapshot>(Arena*);
template<> ::ecssnapshot::Worlds* Arena::CreateMaybeMessage<::ecssnapshot::Worlds>(Arena*);
template<> ::ecssnapshot::WorldsRequest* Arena::CreateMaybeMessage<::ecssnapshot::WorldsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ecssnapshot {

// ===================================================================

class ECSState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecssnapshot.ECSState) */ {
 public:
  inline ECSState() : ECSState(nullptr) {}
  ~ECSState() override;
  explicit constexpr ECSState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECSState(const ECSState& from);
  ECSState(ECSState&& from) noexcept
    : ECSState() {
    *this = ::std::move(from);
  }

  inline ECSState& operator=(const ECSState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECSState& operator=(ECSState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ECSState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECSState* internal_default_instance() {
    return reinterpret_cast<const ECSState*>(
               &_ECSState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ECSState& a, ECSState& b) {
    a.Swap(&b);
  }
  inline void Swap(ECSState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECSState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ECSState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ECSState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ECSState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ECSState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECSState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecssnapshot.ECSState";
  }
  protected:
  explicit ECSState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kComponentIdIdxFieldNumber = 1,
    kEntityIdIdxFieldNumber = 2,
  };
  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 component_id_idx = 1;
  void clear_component_id_idx();
  uint32_t component_id_idx() const;
  void set_component_id_idx(uint32_t value);
  private:
  uint32_t _internal_component_id_idx() const;
  void _internal_set_component_id_idx(uint32_t value);
  public:

  // uint32 entity_id_idx = 2;
  void clear_entity_id_idx();
  uint32_t entity_id_idx() const;
  void set_entity_id_idx(uint32_t value);
  private:
  uint32_t _internal_entity_id_idx() const;
  void _internal_set_entity_id_idx(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ecssnapshot.ECSState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  uint32_t component_id_idx_;
  uint32_t entity_id_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecs_5fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ECSStateSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecssnapshot.ECSStateSnapshot) */ {
 public:
  inline ECSStateSnapshot() : ECSStateSnapshot(nullptr) {}
  ~ECSStateSnapshot() override;
  explicit constexpr ECSStateSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECSStateSnapshot(const ECSStateSnapshot& from);
  ECSStateSnapshot(ECSStateSnapshot&& from) noexcept
    : ECSStateSnapshot() {
    *this = ::std::move(from);
  }

  inline ECSStateSnapshot& operator=(const ECSStateSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECSStateSnapshot& operator=(ECSStateSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ECSStateSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECSStateSnapshot* internal_default_instance() {
    return reinterpret_cast<const ECSStateSnapshot*>(
               &_ECSStateSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ECSStateSnapshot& a, ECSStateSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(ECSStateSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECSStateSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ECSStateSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ECSStateSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ECSStateSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ECSStateSnapshot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECSStateSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecssnapshot.ECSStateSnapshot";
  }
  protected:
  explicit ECSStateSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kStateComponentsFieldNumber = 2,
    kStateEntitiesFieldNumber = 3,
    kStateHashFieldNumber = 4,
    kWorldAddressFieldNumber = 7,
    kStartBlockNumberFieldNumber = 5,
    kEndBlockNumberFieldNumber = 6,
  };
  // repeated .ecssnapshot.ECSState state = 1;
  int state_size() const;
  private:
  int _internal_state_size() const;
  public:
  void clear_state();
  ::ecssnapshot::ECSState* mutable_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState >*
      mutable_state();
  private:
  const ::ecssnapshot::ECSState& _internal_state(int index) const;
  ::ecssnapshot::ECSState* _internal_add_state();
  public:
  const ::ecssnapshot::ECSState& state(int index) const;
  ::ecssnapshot::ECSState* add_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState >&
      state() const;

  // repeated string stateComponents = 2;
  int statecomponents_size() const;
  private:
  int _internal_statecomponents_size() const;
  public:
  void clear_statecomponents();
  const std::string& statecomponents(int index) const;
  std::string* mutable_statecomponents(int index);
  void set_statecomponents(int index, const std::string& value);
  void set_statecomponents(int index, std::string&& value);
  void set_statecomponents(int index, const char* value);
  void set_statecomponents(int index, const char* value, size_t size);
  std::string* add_statecomponents();
  void add_statecomponents(const std::string& value);
  void add_statecomponents(std::string&& value);
  void add_statecomponents(const char* value);
  void add_statecomponents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& statecomponents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_statecomponents();
  private:
  const std::string& _internal_statecomponents(int index) const;
  std::string* _internal_add_statecomponents();
  public:

  // repeated string stateEntities = 3;
  int stateentities_size() const;
  private:
  int _internal_stateentities_size() const;
  public:
  void clear_stateentities();
  const std::string& stateentities(int index) const;
  std::string* mutable_stateentities(int index);
  void set_stateentities(int index, const std::string& value);
  void set_stateentities(int index, std::string&& value);
  void set_stateentities(int index, const char* value);
  void set_stateentities(int index, const char* value, size_t size);
  std::string* add_stateentities();
  void add_stateentities(const std::string& value);
  void add_stateentities(std::string&& value);
  void add_stateentities(const char* value);
  void add_stateentities(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stateentities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stateentities();
  private:
  const std::string& _internal_stateentities(int index) const;
  std::string* _internal_add_stateentities();
  public:

  // string stateHash = 4;
  void clear_statehash();
  const std::string& statehash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_statehash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_statehash();
  PROTOBUF_NODISCARD std::string* release_statehash();
  void set_allocated_statehash(std::string* statehash);
  private:
  const std::string& _internal_statehash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statehash(const std::string& value);
  std::string* _internal_mutable_statehash();
  public:

  // string worldAddress = 7;
  void clear_worldaddress();
  const std::string& worldaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldaddress();
  PROTOBUF_NODISCARD std::string* release_worldaddress();
  void set_allocated_worldaddress(std::string* worldaddress);
  private:
  const std::string& _internal_worldaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldaddress(const std::string& value);
  std::string* _internal_mutable_worldaddress();
  public:

  // uint32 startBlockNumber = 5;
  void clear_startblocknumber();
  uint32_t startblocknumber() const;
  void set_startblocknumber(uint32_t value);
  private:
  uint32_t _internal_startblocknumber() const;
  void _internal_set_startblocknumber(uint32_t value);
  public:

  // uint32 endBlockNumber = 6;
  void clear_endblocknumber();
  uint32_t endblocknumber() const;
  void set_endblocknumber(uint32_t value);
  private:
  uint32_t _internal_endblocknumber() const;
  void _internal_set_endblocknumber(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ecssnapshot.ECSStateSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState > state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> statecomponents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stateentities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statehash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldaddress_;
  uint32_t startblocknumber_;
  uint32_t endblocknumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecs_5fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class Worlds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecssnapshot.Worlds) */ {
 public:
  inline Worlds() : Worlds(nullptr) {}
  ~Worlds() override;
  explicit constexpr Worlds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Worlds(const Worlds& from);
  Worlds(Worlds&& from) noexcept
    : Worlds() {
    *this = ::std::move(from);
  }

  inline Worlds& operator=(const Worlds& from) {
    CopyFrom(from);
    return *this;
  }
  inline Worlds& operator=(Worlds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Worlds& default_instance() {
    return *internal_default_instance();
  }
  static inline const Worlds* internal_default_instance() {
    return reinterpret_cast<const Worlds*>(
               &_Worlds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Worlds& a, Worlds& b) {
    a.Swap(&b);
  }
  inline void Swap(Worlds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Worlds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Worlds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Worlds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Worlds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Worlds& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Worlds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecssnapshot.Worlds";
  }
  protected:
  explicit Worlds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldAddressFieldNumber = 1,
  };
  // repeated string worldAddress = 1;
  int worldaddress_size() const;
  private:
  int _internal_worldaddress_size() const;
  public:
  void clear_worldaddress();
  const std::string& worldaddress(int index) const;
  std::string* mutable_worldaddress(int index);
  void set_worldaddress(int index, const std::string& value);
  void set_worldaddress(int index, std::string&& value);
  void set_worldaddress(int index, const char* value);
  void set_worldaddress(int index, const char* value, size_t size);
  std::string* add_worldaddress();
  void add_worldaddress(const std::string& value);
  void add_worldaddress(std::string&& value);
  void add_worldaddress(const char* value);
  void add_worldaddress(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& worldaddress() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_worldaddress();
  private:
  const std::string& _internal_worldaddress(int index) const;
  std::string* _internal_add_worldaddress();
  public:

  // @@protoc_insertion_point(class_scope:ecssnapshot.Worlds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> worldaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecs_5fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ECSStateRequestLatest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecssnapshot.ECSStateRequestLatest) */ {
 public:
  inline ECSStateRequestLatest() : ECSStateRequestLatest(nullptr) {}
  ~ECSStateRequestLatest() override;
  explicit constexpr ECSStateRequestLatest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECSStateRequestLatest(const ECSStateRequestLatest& from);
  ECSStateRequestLatest(ECSStateRequestLatest&& from) noexcept
    : ECSStateRequestLatest() {
    *this = ::std::move(from);
  }

  inline ECSStateRequestLatest& operator=(const ECSStateRequestLatest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECSStateRequestLatest& operator=(ECSStateRequestLatest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ECSStateRequestLatest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECSStateRequestLatest* internal_default_instance() {
    return reinterpret_cast<const ECSStateRequestLatest*>(
               &_ECSStateRequestLatest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ECSStateRequestLatest& a, ECSStateRequestLatest& b) {
    a.Swap(&b);
  }
  inline void Swap(ECSStateRequestLatest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECSStateRequestLatest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ECSStateRequestLatest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ECSStateRequestLatest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ECSStateRequestLatest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ECSStateRequestLatest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECSStateRequestLatest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecssnapshot.ECSStateRequestLatest";
  }
  protected:
  explicit ECSStateRequestLatest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldAddressFieldNumber = 1,
  };
  // string worldAddress = 1;
  void clear_worldaddress();
  const std::string& worldaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldaddress();
  PROTOBUF_NODISCARD std::string* release_worldaddress();
  void set_allocated_worldaddress(std::string* worldaddress);
  private:
  const std::string& _internal_worldaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldaddress(const std::string& value);
  std::string* _internal_mutable_worldaddress();
  public:

  // @@protoc_insertion_point(class_scope:ecssnapshot.ECSStateRequestLatest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecs_5fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ECSStateRequestLatestStreamPruned final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecssnapshot.ECSStateRequestLatestStreamPruned) */ {
 public:
  inline ECSStateRequestLatestStreamPruned() : ECSStateRequestLatestStreamPruned(nullptr) {}
  ~ECSStateRequestLatestStreamPruned() override;
  explicit constexpr ECSStateRequestLatestStreamPruned(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECSStateRequestLatestStreamPruned(const ECSStateRequestLatestStreamPruned& from);
  ECSStateRequestLatestStreamPruned(ECSStateRequestLatestStreamPruned&& from) noexcept
    : ECSStateRequestLatestStreamPruned() {
    *this = ::std::move(from);
  }

  inline ECSStateRequestLatestStreamPruned& operator=(const ECSStateRequestLatestStreamPruned& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECSStateRequestLatestStreamPruned& operator=(ECSStateRequestLatestStreamPruned&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ECSStateRequestLatestStreamPruned& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECSStateRequestLatestStreamPruned* internal_default_instance() {
    return reinterpret_cast<const ECSStateRequestLatestStreamPruned*>(
               &_ECSStateRequestLatestStreamPruned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ECSStateRequestLatestStreamPruned& a, ECSStateRequestLatestStreamPruned& b) {
    a.Swap(&b);
  }
  inline void Swap(ECSStateRequestLatestStreamPruned* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECSStateRequestLatestStreamPruned* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ECSStateRequestLatestStreamPruned* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ECSStateRequestLatestStreamPruned>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ECSStateRequestLatestStreamPruned& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ECSStateRequestLatestStreamPruned& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECSStateRequestLatestStreamPruned* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecssnapshot.ECSStateRequestLatestStreamPruned";
  }
  protected:
  explicit ECSStateRequestLatestStreamPruned(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldAddressFieldNumber = 1,
    kPruneAddressFieldNumber = 2,
    kPruneComponentIdFieldNumber = 3,
    kChunkPercentageFieldNumber = 4,
  };
  // string worldAddress = 1;
  void clear_worldaddress();
  const std::string& worldaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldaddress();
  PROTOBUF_NODISCARD std::string* release_worldaddress();
  void set_allocated_worldaddress(std::string* worldaddress);
  private:
  const std::string& _internal_worldaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldaddress(const std::string& value);
  std::string* _internal_mutable_worldaddress();
  public:

  // string pruneAddress = 2;
  void clear_pruneaddress();
  const std::string& pruneaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pruneaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pruneaddress();
  PROTOBUF_NODISCARD std::string* release_pruneaddress();
  void set_allocated_pruneaddress(std::string* pruneaddress);
  private:
  const std::string& _internal_pruneaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pruneaddress(const std::string& value);
  std::string* _internal_mutable_pruneaddress();
  public:

  // string pruneComponentId = 3;
  void clear_prunecomponentid();
  const std::string& prunecomponentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prunecomponentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prunecomponentid();
  PROTOBUF_NODISCARD std::string* release_prunecomponentid();
  void set_allocated_prunecomponentid(std::string* prunecomponentid);
  private:
  const std::string& _internal_prunecomponentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prunecomponentid(const std::string& value);
  std::string* _internal_mutable_prunecomponentid();
  public:

  // uint32 chunkPercentage = 4;
  void clear_chunkpercentage();
  uint32_t chunkpercentage() const;
  void set_chunkpercentage(uint32_t value);
  private:
  uint32_t _internal_chunkpercentage() const;
  void _internal_set_chunkpercentage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ecssnapshot.ECSStateRequestLatestStreamPruned)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pruneaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prunecomponentid_;
  uint32_t chunkpercentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecs_5fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ECSStateRequestLatestStream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecssnapshot.ECSStateRequestLatestStream) */ {
 public:
  inline ECSStateRequestLatestStream() : ECSStateRequestLatestStream(nullptr) {}
  ~ECSStateRequestLatestStream() override;
  explicit constexpr ECSStateRequestLatestStream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECSStateRequestLatestStream(const ECSStateRequestLatestStream& from);
  ECSStateRequestLatestStream(ECSStateRequestLatestStream&& from) noexcept
    : ECSStateRequestLatestStream() {
    *this = ::std::move(from);
  }

  inline ECSStateRequestLatestStream& operator=(const ECSStateRequestLatestStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECSStateRequestLatestStream& operator=(ECSStateRequestLatestStream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ECSStateRequestLatestStream& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECSStateRequestLatestStream* internal_default_instance() {
    return reinterpret_cast<const ECSStateRequestLatestStream*>(
               &_ECSStateRequestLatestStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ECSStateRequestLatestStream& a, ECSStateRequestLatestStream& b) {
    a.Swap(&b);
  }
  inline void Swap(ECSStateRequestLatestStream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECSStateRequestLatestStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ECSStateRequestLatestStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ECSStateRequestLatestStream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ECSStateRequestLatestStream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ECSStateRequestLatestStream& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECSStateRequestLatestStream* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecssnapshot.ECSStateRequestLatestStream";
  }
  protected:
  explicit ECSStateRequestLatestStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldAddressFieldNumber = 1,
    kChunkPercentageFieldNumber = 2,
  };
  // string worldAddress = 1;
  void clear_worldaddress();
  const std::string& worldaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldaddress();
  PROTOBUF_NODISCARD std::string* release_worldaddress();
  void set_allocated_worldaddress(std::string* worldaddress);
  private:
  const std::string& _internal_worldaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldaddress(const std::string& value);
  std::string* _internal_mutable_worldaddress();
  public:

  // uint32 chunkPercentage = 2;
  void clear_chunkpercentage();
  uint32_t chunkpercentage() const;
  void set_chunkpercentage(uint32_t value);
  private:
  uint32_t _internal_chunkpercentage() const;
  void _internal_set_chunkpercentage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ecssnapshot.ECSStateRequestLatestStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldaddress_;
  uint32_t chunkpercentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecs_5fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ECSStateBlockRequestLatest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecssnapshot.ECSStateBlockRequestLatest) */ {
 public:
  inline ECSStateBlockRequestLatest() : ECSStateBlockRequestLatest(nullptr) {}
  ~ECSStateBlockRequestLatest() override;
  explicit constexpr ECSStateBlockRequestLatest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECSStateBlockRequestLatest(const ECSStateBlockRequestLatest& from);
  ECSStateBlockRequestLatest(ECSStateBlockRequestLatest&& from) noexcept
    : ECSStateBlockRequestLatest() {
    *this = ::std::move(from);
  }

  inline ECSStateBlockRequestLatest& operator=(const ECSStateBlockRequestLatest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECSStateBlockRequestLatest& operator=(ECSStateBlockRequestLatest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ECSStateBlockRequestLatest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECSStateBlockRequestLatest* internal_default_instance() {
    return reinterpret_cast<const ECSStateBlockRequestLatest*>(
               &_ECSStateBlockRequestLatest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ECSStateBlockRequestLatest& a, ECSStateBlockRequestLatest& b) {
    a.Swap(&b);
  }
  inline void Swap(ECSStateBlockRequestLatest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECSStateBlockRequestLatest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ECSStateBlockRequestLatest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ECSStateBlockRequestLatest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ECSStateBlockRequestLatest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ECSStateBlockRequestLatest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECSStateBlockRequestLatest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecssnapshot.ECSStateBlockRequestLatest";
  }
  protected:
  explicit ECSStateBlockRequestLatest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldAddressFieldNumber = 1,
  };
  // string worldAddress = 1;
  void clear_worldaddress();
  const std::string& worldaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldaddress();
  PROTOBUF_NODISCARD std::string* release_worldaddress();
  void set_allocated_worldaddress(std::string* worldaddress);
  private:
  const std::string& _internal_worldaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldaddress(const std::string& value);
  std::string* _internal_mutable_worldaddress();
  public:

  // @@protoc_insertion_point(class_scope:ecssnapshot.ECSStateBlockRequestLatest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecs_5fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ECSStateRequestAtBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecssnapshot.ECSStateRequestAtBlock) */ {
 public:
  inline ECSStateRequestAtBlock() : ECSStateRequestAtBlock(nullptr) {}
  ~ECSStateRequestAtBlock() override;
  explicit constexpr ECSStateRequestAtBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECSStateRequestAtBlock(const ECSStateRequestAtBlock& from);
  ECSStateRequestAtBlock(ECSStateRequestAtBlock&& from) noexcept
    : ECSStateRequestAtBlock() {
    *this = ::std::move(from);
  }

  inline ECSStateRequestAtBlock& operator=(const ECSStateRequestAtBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECSStateRequestAtBlock& operator=(ECSStateRequestAtBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ECSStateRequestAtBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECSStateRequestAtBlock* internal_default_instance() {
    return reinterpret_cast<const ECSStateRequestAtBlock*>(
               &_ECSStateRequestAtBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ECSStateRequestAtBlock& a, ECSStateRequestAtBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(ECSStateRequestAtBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECSStateRequestAtBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ECSStateRequestAtBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ECSStateRequestAtBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ECSStateRequestAtBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ECSStateRequestAtBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECSStateRequestAtBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecssnapshot.ECSStateRequestAtBlock";
  }
  protected:
  explicit ECSStateRequestAtBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockNumberFieldNumber = 1,
  };
  // uint64 blockNumber = 1;
  void clear_blocknumber();
  uint64_t blocknumber() const;
  void set_blocknumber(uint64_t value);
  private:
  uint64_t _internal_blocknumber() const;
  void _internal_set_blocknumber(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ecssnapshot.ECSStateRequestAtBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t blocknumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecs_5fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class WorldsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ecssnapshot.WorldsRequest) */ {
 public:
  inline WorldsRequest() : WorldsRequest(nullptr) {}
  explicit constexpr WorldsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldsRequest(const WorldsRequest& from);
  WorldsRequest(WorldsRequest&& from) noexcept
    : WorldsRequest() {
    *this = ::std::move(from);
  }

  inline WorldsRequest& operator=(const WorldsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldsRequest& operator=(WorldsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldsRequest* internal_default_instance() {
    return reinterpret_cast<const WorldsRequest*>(
               &_WorldsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WorldsRequest& a, WorldsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const WorldsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const WorldsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecssnapshot.WorldsRequest";
  }
  protected:
  explicit WorldsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ecssnapshot.WorldsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecs_5fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ECSStateReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecssnapshot.ECSStateReply) */ {
 public:
  inline ECSStateReply() : ECSStateReply(nullptr) {}
  ~ECSStateReply() override;
  explicit constexpr ECSStateReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECSStateReply(const ECSStateReply& from);
  ECSStateReply(ECSStateReply&& from) noexcept
    : ECSStateReply() {
    *this = ::std::move(from);
  }

  inline ECSStateReply& operator=(const ECSStateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECSStateReply& operator=(ECSStateReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ECSStateReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECSStateReply* internal_default_instance() {
    return reinterpret_cast<const ECSStateReply*>(
               &_ECSStateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ECSStateReply& a, ECSStateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ECSStateReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECSStateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ECSStateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ECSStateReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ECSStateReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ECSStateReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECSStateReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecssnapshot.ECSStateReply";
  }
  protected:
  explicit ECSStateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kStateComponentsFieldNumber = 2,
    kStateEntitiesFieldNumber = 3,
    kStateHashFieldNumber = 4,
    kBlockNumberFieldNumber = 5,
  };
  // repeated .ecssnapshot.ECSState state = 1;
  int state_size() const;
  private:
  int _internal_state_size() const;
  public:
  void clear_state();
  ::ecssnapshot::ECSState* mutable_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState >*
      mutable_state();
  private:
  const ::ecssnapshot::ECSState& _internal_state(int index) const;
  ::ecssnapshot::ECSState* _internal_add_state();
  public:
  const ::ecssnapshot::ECSState& state(int index) const;
  ::ecssnapshot::ECSState* add_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState >&
      state() const;

  // repeated string stateComponents = 2;
  int statecomponents_size() const;
  private:
  int _internal_statecomponents_size() const;
  public:
  void clear_statecomponents();
  const std::string& statecomponents(int index) const;
  std::string* mutable_statecomponents(int index);
  void set_statecomponents(int index, const std::string& value);
  void set_statecomponents(int index, std::string&& value);
  void set_statecomponents(int index, const char* value);
  void set_statecomponents(int index, const char* value, size_t size);
  std::string* add_statecomponents();
  void add_statecomponents(const std::string& value);
  void add_statecomponents(std::string&& value);
  void add_statecomponents(const char* value);
  void add_statecomponents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& statecomponents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_statecomponents();
  private:
  const std::string& _internal_statecomponents(int index) const;
  std::string* _internal_add_statecomponents();
  public:

  // repeated string stateEntities = 3;
  int stateentities_size() const;
  private:
  int _internal_stateentities_size() const;
  public:
  void clear_stateentities();
  const std::string& stateentities(int index) const;
  std::string* mutable_stateentities(int index);
  void set_stateentities(int index, const std::string& value);
  void set_stateentities(int index, std::string&& value);
  void set_stateentities(int index, const char* value);
  void set_stateentities(int index, const char* value, size_t size);
  std::string* add_stateentities();
  void add_stateentities(const std::string& value);
  void add_stateentities(std::string&& value);
  void add_stateentities(const char* value);
  void add_stateentities(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stateentities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stateentities();
  private:
  const std::string& _internal_stateentities(int index) const;
  std::string* _internal_add_stateentities();
  public:

  // string stateHash = 4;
  void clear_statehash();
  const std::string& statehash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_statehash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_statehash();
  PROTOBUF_NODISCARD std::string* release_statehash();
  void set_allocated_statehash(std::string* statehash);
  private:
  const std::string& _internal_statehash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statehash(const std::string& value);
  std::string* _internal_mutable_statehash();
  public:

  // uint32 blockNumber = 5;
  void clear_blocknumber();
  uint32_t blocknumber() const;
  void set_blocknumber(uint32_t value);
  private:
  uint32_t _internal_blocknumber() const;
  void _internal_set_blocknumber(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ecssnapshot.ECSStateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState > state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> statecomponents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stateentities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statehash_;
  uint32_t blocknumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecs_5fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ECSStateReplyV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecssnapshot.ECSStateReplyV2) */ {
 public:
  inline ECSStateReplyV2() : ECSStateReplyV2(nullptr) {}
  ~ECSStateReplyV2() override;
  explicit constexpr ECSStateReplyV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECSStateReplyV2(const ECSStateReplyV2& from);
  ECSStateReplyV2(ECSStateReplyV2&& from) noexcept
    : ECSStateReplyV2() {
    *this = ::std::move(from);
  }

  inline ECSStateReplyV2& operator=(const ECSStateReplyV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECSStateReplyV2& operator=(ECSStateReplyV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ECSStateReplyV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECSStateReplyV2* internal_default_instance() {
    return reinterpret_cast<const ECSStateReplyV2*>(
               &_ECSStateReplyV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ECSStateReplyV2& a, ECSStateReplyV2& b) {
    a.Swap(&b);
  }
  inline void Swap(ECSStateReplyV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECSStateReplyV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ECSStateReplyV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ECSStateReplyV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ECSStateReplyV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ECSStateReplyV2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECSStateReplyV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecssnapshot.ECSStateReplyV2";
  }
  protected:
  explicit ECSStateReplyV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kStateComponentsFieldNumber = 2,
    kStateEntitiesFieldNumber = 3,
    kStateHashFieldNumber = 4,
    kBlockNumberFieldNumber = 5,
  };
  // repeated .ecssnapshot.ECSState state = 1;
  int state_size() const;
  private:
  int _internal_state_size() const;
  public:
  void clear_state();
  ::ecssnapshot::ECSState* mutable_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState >*
      mutable_state();
  private:
  const ::ecssnapshot::ECSState& _internal_state(int index) const;
  ::ecssnapshot::ECSState* _internal_add_state();
  public:
  const ::ecssnapshot::ECSState& state(int index) const;
  ::ecssnapshot::ECSState* add_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState >&
      state() const;

  // repeated string stateComponents = 2;
  int statecomponents_size() const;
  private:
  int _internal_statecomponents_size() const;
  public:
  void clear_statecomponents();
  const std::string& statecomponents(int index) const;
  std::string* mutable_statecomponents(int index);
  void set_statecomponents(int index, const std::string& value);
  void set_statecomponents(int index, std::string&& value);
  void set_statecomponents(int index, const char* value);
  void set_statecomponents(int index, const char* value, size_t size);
  std::string* add_statecomponents();
  void add_statecomponents(const std::string& value);
  void add_statecomponents(std::string&& value);
  void add_statecomponents(const char* value);
  void add_statecomponents(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& statecomponents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_statecomponents();
  private:
  const std::string& _internal_statecomponents(int index) const;
  std::string* _internal_add_statecomponents();
  public:

  // repeated bytes stateEntities = 3;
  int stateentities_size() const;
  private:
  int _internal_stateentities_size() const;
  public:
  void clear_stateentities();
  const std::string& stateentities(int index) const;
  std::string* mutable_stateentities(int index);
  void set_stateentities(int index, const std::string& value);
  void set_stateentities(int index, std::string&& value);
  void set_stateentities(int index, const char* value);
  void set_stateentities(int index, const void* value, size_t size);
  std::string* add_stateentities();
  void add_stateentities(const std::string& value);
  void add_stateentities(std::string&& value);
  void add_stateentities(const char* value);
  void add_stateentities(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stateentities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stateentities();
  private:
  const std::string& _internal_stateentities(int index) const;
  std::string* _internal_add_stateentities();
  public:

  // string stateHash = 4;
  void clear_statehash();
  const std::string& statehash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_statehash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_statehash();
  PROTOBUF_NODISCARD std::string* release_statehash();
  void set_allocated_statehash(std::string* statehash);
  private:
  const std::string& _internal_statehash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statehash(const std::string& value);
  std::string* _internal_mutable_statehash();
  public:

  // uint32 blockNumber = 5;
  void clear_blocknumber();
  uint32_t blocknumber() const;
  void set_blocknumber(uint32_t value);
  private:
  uint32_t _internal_blocknumber() const;
  void _internal_set_blocknumber(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ecssnapshot.ECSStateReplyV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState > state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> statecomponents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stateentities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statehash_;
  uint32_t blocknumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecs_5fsnapshot_2eproto;
};
// -------------------------------------------------------------------

class ECSStateBlockReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecssnapshot.ECSStateBlockReply) */ {
 public:
  inline ECSStateBlockReply() : ECSStateBlockReply(nullptr) {}
  ~ECSStateBlockReply() override;
  explicit constexpr ECSStateBlockReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECSStateBlockReply(const ECSStateBlockReply& from);
  ECSStateBlockReply(ECSStateBlockReply&& from) noexcept
    : ECSStateBlockReply() {
    *this = ::std::move(from);
  }

  inline ECSStateBlockReply& operator=(const ECSStateBlockReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECSStateBlockReply& operator=(ECSStateBlockReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ECSStateBlockReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECSStateBlockReply* internal_default_instance() {
    return reinterpret_cast<const ECSStateBlockReply*>(
               &_ECSStateBlockReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ECSStateBlockReply& a, ECSStateBlockReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ECSStateBlockReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECSStateBlockReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ECSStateBlockReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ECSStateBlockReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ECSStateBlockReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ECSStateBlockReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECSStateBlockReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecssnapshot.ECSStateBlockReply";
  }
  protected:
  explicit ECSStateBlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockNumberFieldNumber = 1,
  };
  // uint32 blockNumber = 1;
  void clear_blocknumber();
  uint32_t blocknumber() const;
  void set_blocknumber(uint32_t value);
  private:
  uint32_t _internal_blocknumber() const;
  void _internal_set_blocknumber(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ecssnapshot.ECSStateBlockReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t blocknumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ecs_5fsnapshot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ECSState

// uint32 component_id_idx = 1;
inline void ECSState::clear_component_id_idx() {
  component_id_idx_ = 0u;
}
inline uint32_t ECSState::_internal_component_id_idx() const {
  return component_id_idx_;
}
inline uint32_t ECSState::component_id_idx() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSState.component_id_idx)
  return _internal_component_id_idx();
}
inline void ECSState::_internal_set_component_id_idx(uint32_t value) {
  
  component_id_idx_ = value;
}
inline void ECSState::set_component_id_idx(uint32_t value) {
  _internal_set_component_id_idx(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSState.component_id_idx)
}

// uint32 entity_id_idx = 2;
inline void ECSState::clear_entity_id_idx() {
  entity_id_idx_ = 0u;
}
inline uint32_t ECSState::_internal_entity_id_idx() const {
  return entity_id_idx_;
}
inline uint32_t ECSState::entity_id_idx() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSState.entity_id_idx)
  return _internal_entity_id_idx();
}
inline void ECSState::_internal_set_entity_id_idx(uint32_t value) {
  
  entity_id_idx_ = value;
}
inline void ECSState::set_entity_id_idx(uint32_t value) {
  _internal_set_entity_id_idx(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSState.entity_id_idx)
}

// bytes value = 3;
inline void ECSState::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& ECSState::value() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSState.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECSState::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSState.value)
}
inline std::string* ECSState::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSState.value)
  return _s;
}
inline const std::string& ECSState::_internal_value() const {
  return value_.Get();
}
inline void ECSState::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECSState::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECSState::release_value() {
  // @@protoc_insertion_point(field_release:ecssnapshot.ECSState.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECSState::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ecssnapshot.ECSState.value)
}

// -------------------------------------------------------------------

// ECSStateSnapshot

// repeated .ecssnapshot.ECSState state = 1;
inline int ECSStateSnapshot::_internal_state_size() const {
  return state_.size();
}
inline int ECSStateSnapshot::state_size() const {
  return _internal_state_size();
}
inline void ECSStateSnapshot::clear_state() {
  state_.Clear();
}
inline ::ecssnapshot::ECSState* ECSStateSnapshot::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateSnapshot.state)
  return state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState >*
ECSStateSnapshot::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:ecssnapshot.ECSStateSnapshot.state)
  return &state_;
}
inline const ::ecssnapshot::ECSState& ECSStateSnapshot::_internal_state(int index) const {
  return state_.Get(index);
}
inline const ::ecssnapshot::ECSState& ECSStateSnapshot::state(int index) const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateSnapshot.state)
  return _internal_state(index);
}
inline ::ecssnapshot::ECSState* ECSStateSnapshot::_internal_add_state() {
  return state_.Add();
}
inline ::ecssnapshot::ECSState* ECSStateSnapshot::add_state() {
  ::ecssnapshot::ECSState* _add = _internal_add_state();
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateSnapshot.state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState >&
ECSStateSnapshot::state() const {
  // @@protoc_insertion_point(field_list:ecssnapshot.ECSStateSnapshot.state)
  return state_;
}

// repeated string stateComponents = 2;
inline int ECSStateSnapshot::_internal_statecomponents_size() const {
  return statecomponents_.size();
}
inline int ECSStateSnapshot::statecomponents_size() const {
  return _internal_statecomponents_size();
}
inline void ECSStateSnapshot::clear_statecomponents() {
  statecomponents_.Clear();
}
inline std::string* ECSStateSnapshot::add_statecomponents() {
  std::string* _s = _internal_add_statecomponents();
  // @@protoc_insertion_point(field_add_mutable:ecssnapshot.ECSStateSnapshot.stateComponents)
  return _s;
}
inline const std::string& ECSStateSnapshot::_internal_statecomponents(int index) const {
  return statecomponents_.Get(index);
}
inline const std::string& ECSStateSnapshot::statecomponents(int index) const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateSnapshot.stateComponents)
  return _internal_statecomponents(index);
}
inline std::string* ECSStateSnapshot::mutable_statecomponents(int index) {
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateSnapshot.stateComponents)
  return statecomponents_.Mutable(index);
}
inline void ECSStateSnapshot::set_statecomponents(int index, const std::string& value) {
  statecomponents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateSnapshot.stateComponents)
}
inline void ECSStateSnapshot::set_statecomponents(int index, std::string&& value) {
  statecomponents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateSnapshot.stateComponents)
}
inline void ECSStateSnapshot::set_statecomponents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statecomponents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ecssnapshot.ECSStateSnapshot.stateComponents)
}
inline void ECSStateSnapshot::set_statecomponents(int index, const char* value, size_t size) {
  statecomponents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecssnapshot.ECSStateSnapshot.stateComponents)
}
inline std::string* ECSStateSnapshot::_internal_add_statecomponents() {
  return statecomponents_.Add();
}
inline void ECSStateSnapshot::add_statecomponents(const std::string& value) {
  statecomponents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateSnapshot.stateComponents)
}
inline void ECSStateSnapshot::add_statecomponents(std::string&& value) {
  statecomponents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateSnapshot.stateComponents)
}
inline void ECSStateSnapshot::add_statecomponents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statecomponents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ecssnapshot.ECSStateSnapshot.stateComponents)
}
inline void ECSStateSnapshot::add_statecomponents(const char* value, size_t size) {
  statecomponents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ecssnapshot.ECSStateSnapshot.stateComponents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ECSStateSnapshot::statecomponents() const {
  // @@protoc_insertion_point(field_list:ecssnapshot.ECSStateSnapshot.stateComponents)
  return statecomponents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ECSStateSnapshot::mutable_statecomponents() {
  // @@protoc_insertion_point(field_mutable_list:ecssnapshot.ECSStateSnapshot.stateComponents)
  return &statecomponents_;
}

// repeated string stateEntities = 3;
inline int ECSStateSnapshot::_internal_stateentities_size() const {
  return stateentities_.size();
}
inline int ECSStateSnapshot::stateentities_size() const {
  return _internal_stateentities_size();
}
inline void ECSStateSnapshot::clear_stateentities() {
  stateentities_.Clear();
}
inline std::string* ECSStateSnapshot::add_stateentities() {
  std::string* _s = _internal_add_stateentities();
  // @@protoc_insertion_point(field_add_mutable:ecssnapshot.ECSStateSnapshot.stateEntities)
  return _s;
}
inline const std::string& ECSStateSnapshot::_internal_stateentities(int index) const {
  return stateentities_.Get(index);
}
inline const std::string& ECSStateSnapshot::stateentities(int index) const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateSnapshot.stateEntities)
  return _internal_stateentities(index);
}
inline std::string* ECSStateSnapshot::mutable_stateentities(int index) {
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateSnapshot.stateEntities)
  return stateentities_.Mutable(index);
}
inline void ECSStateSnapshot::set_stateentities(int index, const std::string& value) {
  stateentities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateSnapshot.stateEntities)
}
inline void ECSStateSnapshot::set_stateentities(int index, std::string&& value) {
  stateentities_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateSnapshot.stateEntities)
}
inline void ECSStateSnapshot::set_stateentities(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stateentities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ecssnapshot.ECSStateSnapshot.stateEntities)
}
inline void ECSStateSnapshot::set_stateentities(int index, const char* value, size_t size) {
  stateentities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecssnapshot.ECSStateSnapshot.stateEntities)
}
inline std::string* ECSStateSnapshot::_internal_add_stateentities() {
  return stateentities_.Add();
}
inline void ECSStateSnapshot::add_stateentities(const std::string& value) {
  stateentities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateSnapshot.stateEntities)
}
inline void ECSStateSnapshot::add_stateentities(std::string&& value) {
  stateentities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateSnapshot.stateEntities)
}
inline void ECSStateSnapshot::add_stateentities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stateentities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ecssnapshot.ECSStateSnapshot.stateEntities)
}
inline void ECSStateSnapshot::add_stateentities(const char* value, size_t size) {
  stateentities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ecssnapshot.ECSStateSnapshot.stateEntities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ECSStateSnapshot::stateentities() const {
  // @@protoc_insertion_point(field_list:ecssnapshot.ECSStateSnapshot.stateEntities)
  return stateentities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ECSStateSnapshot::mutable_stateentities() {
  // @@protoc_insertion_point(field_mutable_list:ecssnapshot.ECSStateSnapshot.stateEntities)
  return &stateentities_;
}

// string stateHash = 4;
inline void ECSStateSnapshot::clear_statehash() {
  statehash_.ClearToEmpty();
}
inline const std::string& ECSStateSnapshot::statehash() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateSnapshot.stateHash)
  return _internal_statehash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECSStateSnapshot::set_statehash(ArgT0&& arg0, ArgT... args) {
 
 statehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateSnapshot.stateHash)
}
inline std::string* ECSStateSnapshot::mutable_statehash() {
  std::string* _s = _internal_mutable_statehash();
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateSnapshot.stateHash)
  return _s;
}
inline const std::string& ECSStateSnapshot::_internal_statehash() const {
  return statehash_.Get();
}
inline void ECSStateSnapshot::_internal_set_statehash(const std::string& value) {
  
  statehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECSStateSnapshot::_internal_mutable_statehash() {
  
  return statehash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECSStateSnapshot::release_statehash() {
  // @@protoc_insertion_point(field_release:ecssnapshot.ECSStateSnapshot.stateHash)
  return statehash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECSStateSnapshot::set_allocated_statehash(std::string* statehash) {
  if (statehash != nullptr) {
    
  } else {
    
  }
  statehash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statehash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (statehash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    statehash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ecssnapshot.ECSStateSnapshot.stateHash)
}

// uint32 startBlockNumber = 5;
inline void ECSStateSnapshot::clear_startblocknumber() {
  startblocknumber_ = 0u;
}
inline uint32_t ECSStateSnapshot::_internal_startblocknumber() const {
  return startblocknumber_;
}
inline uint32_t ECSStateSnapshot::startblocknumber() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateSnapshot.startBlockNumber)
  return _internal_startblocknumber();
}
inline void ECSStateSnapshot::_internal_set_startblocknumber(uint32_t value) {
  
  startblocknumber_ = value;
}
inline void ECSStateSnapshot::set_startblocknumber(uint32_t value) {
  _internal_set_startblocknumber(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateSnapshot.startBlockNumber)
}

// uint32 endBlockNumber = 6;
inline void ECSStateSnapshot::clear_endblocknumber() {
  endblocknumber_ = 0u;
}
inline uint32_t ECSStateSnapshot::_internal_endblocknumber() const {
  return endblocknumber_;
}
inline uint32_t ECSStateSnapshot::endblocknumber() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateSnapshot.endBlockNumber)
  return _internal_endblocknumber();
}
inline void ECSStateSnapshot::_internal_set_endblocknumber(uint32_t value) {
  
  endblocknumber_ = value;
}
inline void ECSStateSnapshot::set_endblocknumber(uint32_t value) {
  _internal_set_endblocknumber(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateSnapshot.endBlockNumber)
}

// string worldAddress = 7;
inline void ECSStateSnapshot::clear_worldaddress() {
  worldaddress_.ClearToEmpty();
}
inline const std::string& ECSStateSnapshot::worldaddress() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateSnapshot.worldAddress)
  return _internal_worldaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECSStateSnapshot::set_worldaddress(ArgT0&& arg0, ArgT... args) {
 
 worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateSnapshot.worldAddress)
}
inline std::string* ECSStateSnapshot::mutable_worldaddress() {
  std::string* _s = _internal_mutable_worldaddress();
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateSnapshot.worldAddress)
  return _s;
}
inline const std::string& ECSStateSnapshot::_internal_worldaddress() const {
  return worldaddress_.Get();
}
inline void ECSStateSnapshot::_internal_set_worldaddress(const std::string& value) {
  
  worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECSStateSnapshot::_internal_mutable_worldaddress() {
  
  return worldaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECSStateSnapshot::release_worldaddress() {
  // @@protoc_insertion_point(field_release:ecssnapshot.ECSStateSnapshot.worldAddress)
  return worldaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECSStateSnapshot::set_allocated_worldaddress(std::string* worldaddress) {
  if (worldaddress != nullptr) {
    
  } else {
    
  }
  worldaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worldaddress,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (worldaddress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ecssnapshot.ECSStateSnapshot.worldAddress)
}

// -------------------------------------------------------------------

// Worlds

// repeated string worldAddress = 1;
inline int Worlds::_internal_worldaddress_size() const {
  return worldaddress_.size();
}
inline int Worlds::worldaddress_size() const {
  return _internal_worldaddress_size();
}
inline void Worlds::clear_worldaddress() {
  worldaddress_.Clear();
}
inline std::string* Worlds::add_worldaddress() {
  std::string* _s = _internal_add_worldaddress();
  // @@protoc_insertion_point(field_add_mutable:ecssnapshot.Worlds.worldAddress)
  return _s;
}
inline const std::string& Worlds::_internal_worldaddress(int index) const {
  return worldaddress_.Get(index);
}
inline const std::string& Worlds::worldaddress(int index) const {
  // @@protoc_insertion_point(field_get:ecssnapshot.Worlds.worldAddress)
  return _internal_worldaddress(index);
}
inline std::string* Worlds::mutable_worldaddress(int index) {
  // @@protoc_insertion_point(field_mutable:ecssnapshot.Worlds.worldAddress)
  return worldaddress_.Mutable(index);
}
inline void Worlds::set_worldaddress(int index, const std::string& value) {
  worldaddress_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.Worlds.worldAddress)
}
inline void Worlds::set_worldaddress(int index, std::string&& value) {
  worldaddress_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ecssnapshot.Worlds.worldAddress)
}
inline void Worlds::set_worldaddress(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  worldaddress_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ecssnapshot.Worlds.worldAddress)
}
inline void Worlds::set_worldaddress(int index, const char* value, size_t size) {
  worldaddress_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecssnapshot.Worlds.worldAddress)
}
inline std::string* Worlds::_internal_add_worldaddress() {
  return worldaddress_.Add();
}
inline void Worlds::add_worldaddress(const std::string& value) {
  worldaddress_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ecssnapshot.Worlds.worldAddress)
}
inline void Worlds::add_worldaddress(std::string&& value) {
  worldaddress_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ecssnapshot.Worlds.worldAddress)
}
inline void Worlds::add_worldaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  worldaddress_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ecssnapshot.Worlds.worldAddress)
}
inline void Worlds::add_worldaddress(const char* value, size_t size) {
  worldaddress_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ecssnapshot.Worlds.worldAddress)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Worlds::worldaddress() const {
  // @@protoc_insertion_point(field_list:ecssnapshot.Worlds.worldAddress)
  return worldaddress_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Worlds::mutable_worldaddress() {
  // @@protoc_insertion_point(field_mutable_list:ecssnapshot.Worlds.worldAddress)
  return &worldaddress_;
}

// -------------------------------------------------------------------

// ECSStateRequestLatest

// string worldAddress = 1;
inline void ECSStateRequestLatest::clear_worldaddress() {
  worldaddress_.ClearToEmpty();
}
inline const std::string& ECSStateRequestLatest::worldaddress() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateRequestLatest.worldAddress)
  return _internal_worldaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECSStateRequestLatest::set_worldaddress(ArgT0&& arg0, ArgT... args) {
 
 worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateRequestLatest.worldAddress)
}
inline std::string* ECSStateRequestLatest::mutable_worldaddress() {
  std::string* _s = _internal_mutable_worldaddress();
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateRequestLatest.worldAddress)
  return _s;
}
inline const std::string& ECSStateRequestLatest::_internal_worldaddress() const {
  return worldaddress_.Get();
}
inline void ECSStateRequestLatest::_internal_set_worldaddress(const std::string& value) {
  
  worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECSStateRequestLatest::_internal_mutable_worldaddress() {
  
  return worldaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECSStateRequestLatest::release_worldaddress() {
  // @@protoc_insertion_point(field_release:ecssnapshot.ECSStateRequestLatest.worldAddress)
  return worldaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECSStateRequestLatest::set_allocated_worldaddress(std::string* worldaddress) {
  if (worldaddress != nullptr) {
    
  } else {
    
  }
  worldaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worldaddress,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (worldaddress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ecssnapshot.ECSStateRequestLatest.worldAddress)
}

// -------------------------------------------------------------------

// ECSStateRequestLatestStreamPruned

// string worldAddress = 1;
inline void ECSStateRequestLatestStreamPruned::clear_worldaddress() {
  worldaddress_.ClearToEmpty();
}
inline const std::string& ECSStateRequestLatestStreamPruned::worldaddress() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateRequestLatestStreamPruned.worldAddress)
  return _internal_worldaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECSStateRequestLatestStreamPruned::set_worldaddress(ArgT0&& arg0, ArgT... args) {
 
 worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateRequestLatestStreamPruned.worldAddress)
}
inline std::string* ECSStateRequestLatestStreamPruned::mutable_worldaddress() {
  std::string* _s = _internal_mutable_worldaddress();
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateRequestLatestStreamPruned.worldAddress)
  return _s;
}
inline const std::string& ECSStateRequestLatestStreamPruned::_internal_worldaddress() const {
  return worldaddress_.Get();
}
inline void ECSStateRequestLatestStreamPruned::_internal_set_worldaddress(const std::string& value) {
  
  worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECSStateRequestLatestStreamPruned::_internal_mutable_worldaddress() {
  
  return worldaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECSStateRequestLatestStreamPruned::release_worldaddress() {
  // @@protoc_insertion_point(field_release:ecssnapshot.ECSStateRequestLatestStreamPruned.worldAddress)
  return worldaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECSStateRequestLatestStreamPruned::set_allocated_worldaddress(std::string* worldaddress) {
  if (worldaddress != nullptr) {
    
  } else {
    
  }
  worldaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worldaddress,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (worldaddress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ecssnapshot.ECSStateRequestLatestStreamPruned.worldAddress)
}

// string pruneAddress = 2;
inline void ECSStateRequestLatestStreamPruned::clear_pruneaddress() {
  pruneaddress_.ClearToEmpty();
}
inline const std::string& ECSStateRequestLatestStreamPruned::pruneaddress() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateRequestLatestStreamPruned.pruneAddress)
  return _internal_pruneaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECSStateRequestLatestStreamPruned::set_pruneaddress(ArgT0&& arg0, ArgT... args) {
 
 pruneaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateRequestLatestStreamPruned.pruneAddress)
}
inline std::string* ECSStateRequestLatestStreamPruned::mutable_pruneaddress() {
  std::string* _s = _internal_mutable_pruneaddress();
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateRequestLatestStreamPruned.pruneAddress)
  return _s;
}
inline const std::string& ECSStateRequestLatestStreamPruned::_internal_pruneaddress() const {
  return pruneaddress_.Get();
}
inline void ECSStateRequestLatestStreamPruned::_internal_set_pruneaddress(const std::string& value) {
  
  pruneaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECSStateRequestLatestStreamPruned::_internal_mutable_pruneaddress() {
  
  return pruneaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECSStateRequestLatestStreamPruned::release_pruneaddress() {
  // @@protoc_insertion_point(field_release:ecssnapshot.ECSStateRequestLatestStreamPruned.pruneAddress)
  return pruneaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECSStateRequestLatestStreamPruned::set_allocated_pruneaddress(std::string* pruneaddress) {
  if (pruneaddress != nullptr) {
    
  } else {
    
  }
  pruneaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pruneaddress,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pruneaddress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pruneaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ecssnapshot.ECSStateRequestLatestStreamPruned.pruneAddress)
}

// string pruneComponentId = 3;
inline void ECSStateRequestLatestStreamPruned::clear_prunecomponentid() {
  prunecomponentid_.ClearToEmpty();
}
inline const std::string& ECSStateRequestLatestStreamPruned::prunecomponentid() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateRequestLatestStreamPruned.pruneComponentId)
  return _internal_prunecomponentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECSStateRequestLatestStreamPruned::set_prunecomponentid(ArgT0&& arg0, ArgT... args) {
 
 prunecomponentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateRequestLatestStreamPruned.pruneComponentId)
}
inline std::string* ECSStateRequestLatestStreamPruned::mutable_prunecomponentid() {
  std::string* _s = _internal_mutable_prunecomponentid();
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateRequestLatestStreamPruned.pruneComponentId)
  return _s;
}
inline const std::string& ECSStateRequestLatestStreamPruned::_internal_prunecomponentid() const {
  return prunecomponentid_.Get();
}
inline void ECSStateRequestLatestStreamPruned::_internal_set_prunecomponentid(const std::string& value) {
  
  prunecomponentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECSStateRequestLatestStreamPruned::_internal_mutable_prunecomponentid() {
  
  return prunecomponentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECSStateRequestLatestStreamPruned::release_prunecomponentid() {
  // @@protoc_insertion_point(field_release:ecssnapshot.ECSStateRequestLatestStreamPruned.pruneComponentId)
  return prunecomponentid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECSStateRequestLatestStreamPruned::set_allocated_prunecomponentid(std::string* prunecomponentid) {
  if (prunecomponentid != nullptr) {
    
  } else {
    
  }
  prunecomponentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prunecomponentid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (prunecomponentid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    prunecomponentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ecssnapshot.ECSStateRequestLatestStreamPruned.pruneComponentId)
}

// uint32 chunkPercentage = 4;
inline void ECSStateRequestLatestStreamPruned::clear_chunkpercentage() {
  chunkpercentage_ = 0u;
}
inline uint32_t ECSStateRequestLatestStreamPruned::_internal_chunkpercentage() const {
  return chunkpercentage_;
}
inline uint32_t ECSStateRequestLatestStreamPruned::chunkpercentage() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateRequestLatestStreamPruned.chunkPercentage)
  return _internal_chunkpercentage();
}
inline void ECSStateRequestLatestStreamPruned::_internal_set_chunkpercentage(uint32_t value) {
  
  chunkpercentage_ = value;
}
inline void ECSStateRequestLatestStreamPruned::set_chunkpercentage(uint32_t value) {
  _internal_set_chunkpercentage(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateRequestLatestStreamPruned.chunkPercentage)
}

// -------------------------------------------------------------------

// ECSStateRequestLatestStream

// string worldAddress = 1;
inline void ECSStateRequestLatestStream::clear_worldaddress() {
  worldaddress_.ClearToEmpty();
}
inline const std::string& ECSStateRequestLatestStream::worldaddress() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateRequestLatestStream.worldAddress)
  return _internal_worldaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECSStateRequestLatestStream::set_worldaddress(ArgT0&& arg0, ArgT... args) {
 
 worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateRequestLatestStream.worldAddress)
}
inline std::string* ECSStateRequestLatestStream::mutable_worldaddress() {
  std::string* _s = _internal_mutable_worldaddress();
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateRequestLatestStream.worldAddress)
  return _s;
}
inline const std::string& ECSStateRequestLatestStream::_internal_worldaddress() const {
  return worldaddress_.Get();
}
inline void ECSStateRequestLatestStream::_internal_set_worldaddress(const std::string& value) {
  
  worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECSStateRequestLatestStream::_internal_mutable_worldaddress() {
  
  return worldaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECSStateRequestLatestStream::release_worldaddress() {
  // @@protoc_insertion_point(field_release:ecssnapshot.ECSStateRequestLatestStream.worldAddress)
  return worldaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECSStateRequestLatestStream::set_allocated_worldaddress(std::string* worldaddress) {
  if (worldaddress != nullptr) {
    
  } else {
    
  }
  worldaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worldaddress,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (worldaddress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ecssnapshot.ECSStateRequestLatestStream.worldAddress)
}

// uint32 chunkPercentage = 2;
inline void ECSStateRequestLatestStream::clear_chunkpercentage() {
  chunkpercentage_ = 0u;
}
inline uint32_t ECSStateRequestLatestStream::_internal_chunkpercentage() const {
  return chunkpercentage_;
}
inline uint32_t ECSStateRequestLatestStream::chunkpercentage() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateRequestLatestStream.chunkPercentage)
  return _internal_chunkpercentage();
}
inline void ECSStateRequestLatestStream::_internal_set_chunkpercentage(uint32_t value) {
  
  chunkpercentage_ = value;
}
inline void ECSStateRequestLatestStream::set_chunkpercentage(uint32_t value) {
  _internal_set_chunkpercentage(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateRequestLatestStream.chunkPercentage)
}

// -------------------------------------------------------------------

// ECSStateBlockRequestLatest

// string worldAddress = 1;
inline void ECSStateBlockRequestLatest::clear_worldaddress() {
  worldaddress_.ClearToEmpty();
}
inline const std::string& ECSStateBlockRequestLatest::worldaddress() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateBlockRequestLatest.worldAddress)
  return _internal_worldaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECSStateBlockRequestLatest::set_worldaddress(ArgT0&& arg0, ArgT... args) {
 
 worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateBlockRequestLatest.worldAddress)
}
inline std::string* ECSStateBlockRequestLatest::mutable_worldaddress() {
  std::string* _s = _internal_mutable_worldaddress();
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateBlockRequestLatest.worldAddress)
  return _s;
}
inline const std::string& ECSStateBlockRequestLatest::_internal_worldaddress() const {
  return worldaddress_.Get();
}
inline void ECSStateBlockRequestLatest::_internal_set_worldaddress(const std::string& value) {
  
  worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECSStateBlockRequestLatest::_internal_mutable_worldaddress() {
  
  return worldaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECSStateBlockRequestLatest::release_worldaddress() {
  // @@protoc_insertion_point(field_release:ecssnapshot.ECSStateBlockRequestLatest.worldAddress)
  return worldaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECSStateBlockRequestLatest::set_allocated_worldaddress(std::string* worldaddress) {
  if (worldaddress != nullptr) {
    
  } else {
    
  }
  worldaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worldaddress,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (worldaddress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ecssnapshot.ECSStateBlockRequestLatest.worldAddress)
}

// -------------------------------------------------------------------

// ECSStateRequestAtBlock

// uint64 blockNumber = 1;
inline void ECSStateRequestAtBlock::clear_blocknumber() {
  blocknumber_ = uint64_t{0u};
}
inline uint64_t ECSStateRequestAtBlock::_internal_blocknumber() const {
  return blocknumber_;
}
inline uint64_t ECSStateRequestAtBlock::blocknumber() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateRequestAtBlock.blockNumber)
  return _internal_blocknumber();
}
inline void ECSStateRequestAtBlock::_internal_set_blocknumber(uint64_t value) {
  
  blocknumber_ = value;
}
inline void ECSStateRequestAtBlock::set_blocknumber(uint64_t value) {
  _internal_set_blocknumber(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateRequestAtBlock.blockNumber)
}

// -------------------------------------------------------------------

// WorldsRequest

// -------------------------------------------------------------------

// ECSStateReply

// repeated .ecssnapshot.ECSState state = 1;
inline int ECSStateReply::_internal_state_size() const {
  return state_.size();
}
inline int ECSStateReply::state_size() const {
  return _internal_state_size();
}
inline void ECSStateReply::clear_state() {
  state_.Clear();
}
inline ::ecssnapshot::ECSState* ECSStateReply::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateReply.state)
  return state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState >*
ECSStateReply::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:ecssnapshot.ECSStateReply.state)
  return &state_;
}
inline const ::ecssnapshot::ECSState& ECSStateReply::_internal_state(int index) const {
  return state_.Get(index);
}
inline const ::ecssnapshot::ECSState& ECSStateReply::state(int index) const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateReply.state)
  return _internal_state(index);
}
inline ::ecssnapshot::ECSState* ECSStateReply::_internal_add_state() {
  return state_.Add();
}
inline ::ecssnapshot::ECSState* ECSStateReply::add_state() {
  ::ecssnapshot::ECSState* _add = _internal_add_state();
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateReply.state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState >&
ECSStateReply::state() const {
  // @@protoc_insertion_point(field_list:ecssnapshot.ECSStateReply.state)
  return state_;
}

// repeated string stateComponents = 2;
inline int ECSStateReply::_internal_statecomponents_size() const {
  return statecomponents_.size();
}
inline int ECSStateReply::statecomponents_size() const {
  return _internal_statecomponents_size();
}
inline void ECSStateReply::clear_statecomponents() {
  statecomponents_.Clear();
}
inline std::string* ECSStateReply::add_statecomponents() {
  std::string* _s = _internal_add_statecomponents();
  // @@protoc_insertion_point(field_add_mutable:ecssnapshot.ECSStateReply.stateComponents)
  return _s;
}
inline const std::string& ECSStateReply::_internal_statecomponents(int index) const {
  return statecomponents_.Get(index);
}
inline const std::string& ECSStateReply::statecomponents(int index) const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateReply.stateComponents)
  return _internal_statecomponents(index);
}
inline std::string* ECSStateReply::mutable_statecomponents(int index) {
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateReply.stateComponents)
  return statecomponents_.Mutable(index);
}
inline void ECSStateReply::set_statecomponents(int index, const std::string& value) {
  statecomponents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateReply.stateComponents)
}
inline void ECSStateReply::set_statecomponents(int index, std::string&& value) {
  statecomponents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateReply.stateComponents)
}
inline void ECSStateReply::set_statecomponents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statecomponents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ecssnapshot.ECSStateReply.stateComponents)
}
inline void ECSStateReply::set_statecomponents(int index, const char* value, size_t size) {
  statecomponents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecssnapshot.ECSStateReply.stateComponents)
}
inline std::string* ECSStateReply::_internal_add_statecomponents() {
  return statecomponents_.Add();
}
inline void ECSStateReply::add_statecomponents(const std::string& value) {
  statecomponents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateReply.stateComponents)
}
inline void ECSStateReply::add_statecomponents(std::string&& value) {
  statecomponents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateReply.stateComponents)
}
inline void ECSStateReply::add_statecomponents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statecomponents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ecssnapshot.ECSStateReply.stateComponents)
}
inline void ECSStateReply::add_statecomponents(const char* value, size_t size) {
  statecomponents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ecssnapshot.ECSStateReply.stateComponents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ECSStateReply::statecomponents() const {
  // @@protoc_insertion_point(field_list:ecssnapshot.ECSStateReply.stateComponents)
  return statecomponents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ECSStateReply::mutable_statecomponents() {
  // @@protoc_insertion_point(field_mutable_list:ecssnapshot.ECSStateReply.stateComponents)
  return &statecomponents_;
}

// repeated string stateEntities = 3;
inline int ECSStateReply::_internal_stateentities_size() const {
  return stateentities_.size();
}
inline int ECSStateReply::stateentities_size() const {
  return _internal_stateentities_size();
}
inline void ECSStateReply::clear_stateentities() {
  stateentities_.Clear();
}
inline std::string* ECSStateReply::add_stateentities() {
  std::string* _s = _internal_add_stateentities();
  // @@protoc_insertion_point(field_add_mutable:ecssnapshot.ECSStateReply.stateEntities)
  return _s;
}
inline const std::string& ECSStateReply::_internal_stateentities(int index) const {
  return stateentities_.Get(index);
}
inline const std::string& ECSStateReply::stateentities(int index) const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateReply.stateEntities)
  return _internal_stateentities(index);
}
inline std::string* ECSStateReply::mutable_stateentities(int index) {
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateReply.stateEntities)
  return stateentities_.Mutable(index);
}
inline void ECSStateReply::set_stateentities(int index, const std::string& value) {
  stateentities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateReply.stateEntities)
}
inline void ECSStateReply::set_stateentities(int index, std::string&& value) {
  stateentities_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateReply.stateEntities)
}
inline void ECSStateReply::set_stateentities(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stateentities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ecssnapshot.ECSStateReply.stateEntities)
}
inline void ECSStateReply::set_stateentities(int index, const char* value, size_t size) {
  stateentities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecssnapshot.ECSStateReply.stateEntities)
}
inline std::string* ECSStateReply::_internal_add_stateentities() {
  return stateentities_.Add();
}
inline void ECSStateReply::add_stateentities(const std::string& value) {
  stateentities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateReply.stateEntities)
}
inline void ECSStateReply::add_stateentities(std::string&& value) {
  stateentities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateReply.stateEntities)
}
inline void ECSStateReply::add_stateentities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stateentities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ecssnapshot.ECSStateReply.stateEntities)
}
inline void ECSStateReply::add_stateentities(const char* value, size_t size) {
  stateentities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ecssnapshot.ECSStateReply.stateEntities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ECSStateReply::stateentities() const {
  // @@protoc_insertion_point(field_list:ecssnapshot.ECSStateReply.stateEntities)
  return stateentities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ECSStateReply::mutable_stateentities() {
  // @@protoc_insertion_point(field_mutable_list:ecssnapshot.ECSStateReply.stateEntities)
  return &stateentities_;
}

// string stateHash = 4;
inline void ECSStateReply::clear_statehash() {
  statehash_.ClearToEmpty();
}
inline const std::string& ECSStateReply::statehash() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateReply.stateHash)
  return _internal_statehash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECSStateReply::set_statehash(ArgT0&& arg0, ArgT... args) {
 
 statehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateReply.stateHash)
}
inline std::string* ECSStateReply::mutable_statehash() {
  std::string* _s = _internal_mutable_statehash();
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateReply.stateHash)
  return _s;
}
inline const std::string& ECSStateReply::_internal_statehash() const {
  return statehash_.Get();
}
inline void ECSStateReply::_internal_set_statehash(const std::string& value) {
  
  statehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECSStateReply::_internal_mutable_statehash() {
  
  return statehash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECSStateReply::release_statehash() {
  // @@protoc_insertion_point(field_release:ecssnapshot.ECSStateReply.stateHash)
  return statehash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECSStateReply::set_allocated_statehash(std::string* statehash) {
  if (statehash != nullptr) {
    
  } else {
    
  }
  statehash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statehash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (statehash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    statehash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ecssnapshot.ECSStateReply.stateHash)
}

// uint32 blockNumber = 5;
inline void ECSStateReply::clear_blocknumber() {
  blocknumber_ = 0u;
}
inline uint32_t ECSStateReply::_internal_blocknumber() const {
  return blocknumber_;
}
inline uint32_t ECSStateReply::blocknumber() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateReply.blockNumber)
  return _internal_blocknumber();
}
inline void ECSStateReply::_internal_set_blocknumber(uint32_t value) {
  
  blocknumber_ = value;
}
inline void ECSStateReply::set_blocknumber(uint32_t value) {
  _internal_set_blocknumber(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateReply.blockNumber)
}

// -------------------------------------------------------------------

// ECSStateReplyV2

// repeated .ecssnapshot.ECSState state = 1;
inline int ECSStateReplyV2::_internal_state_size() const {
  return state_.size();
}
inline int ECSStateReplyV2::state_size() const {
  return _internal_state_size();
}
inline void ECSStateReplyV2::clear_state() {
  state_.Clear();
}
inline ::ecssnapshot::ECSState* ECSStateReplyV2::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateReplyV2.state)
  return state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState >*
ECSStateReplyV2::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:ecssnapshot.ECSStateReplyV2.state)
  return &state_;
}
inline const ::ecssnapshot::ECSState& ECSStateReplyV2::_internal_state(int index) const {
  return state_.Get(index);
}
inline const ::ecssnapshot::ECSState& ECSStateReplyV2::state(int index) const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateReplyV2.state)
  return _internal_state(index);
}
inline ::ecssnapshot::ECSState* ECSStateReplyV2::_internal_add_state() {
  return state_.Add();
}
inline ::ecssnapshot::ECSState* ECSStateReplyV2::add_state() {
  ::ecssnapshot::ECSState* _add = _internal_add_state();
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateReplyV2.state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecssnapshot::ECSState >&
ECSStateReplyV2::state() const {
  // @@protoc_insertion_point(field_list:ecssnapshot.ECSStateReplyV2.state)
  return state_;
}

// repeated string stateComponents = 2;
inline int ECSStateReplyV2::_internal_statecomponents_size() const {
  return statecomponents_.size();
}
inline int ECSStateReplyV2::statecomponents_size() const {
  return _internal_statecomponents_size();
}
inline void ECSStateReplyV2::clear_statecomponents() {
  statecomponents_.Clear();
}
inline std::string* ECSStateReplyV2::add_statecomponents() {
  std::string* _s = _internal_add_statecomponents();
  // @@protoc_insertion_point(field_add_mutable:ecssnapshot.ECSStateReplyV2.stateComponents)
  return _s;
}
inline const std::string& ECSStateReplyV2::_internal_statecomponents(int index) const {
  return statecomponents_.Get(index);
}
inline const std::string& ECSStateReplyV2::statecomponents(int index) const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateReplyV2.stateComponents)
  return _internal_statecomponents(index);
}
inline std::string* ECSStateReplyV2::mutable_statecomponents(int index) {
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateReplyV2.stateComponents)
  return statecomponents_.Mutable(index);
}
inline void ECSStateReplyV2::set_statecomponents(int index, const std::string& value) {
  statecomponents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateReplyV2.stateComponents)
}
inline void ECSStateReplyV2::set_statecomponents(int index, std::string&& value) {
  statecomponents_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateReplyV2.stateComponents)
}
inline void ECSStateReplyV2::set_statecomponents(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statecomponents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ecssnapshot.ECSStateReplyV2.stateComponents)
}
inline void ECSStateReplyV2::set_statecomponents(int index, const char* value, size_t size) {
  statecomponents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecssnapshot.ECSStateReplyV2.stateComponents)
}
inline std::string* ECSStateReplyV2::_internal_add_statecomponents() {
  return statecomponents_.Add();
}
inline void ECSStateReplyV2::add_statecomponents(const std::string& value) {
  statecomponents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateReplyV2.stateComponents)
}
inline void ECSStateReplyV2::add_statecomponents(std::string&& value) {
  statecomponents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateReplyV2.stateComponents)
}
inline void ECSStateReplyV2::add_statecomponents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  statecomponents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ecssnapshot.ECSStateReplyV2.stateComponents)
}
inline void ECSStateReplyV2::add_statecomponents(const char* value, size_t size) {
  statecomponents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ecssnapshot.ECSStateReplyV2.stateComponents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ECSStateReplyV2::statecomponents() const {
  // @@protoc_insertion_point(field_list:ecssnapshot.ECSStateReplyV2.stateComponents)
  return statecomponents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ECSStateReplyV2::mutable_statecomponents() {
  // @@protoc_insertion_point(field_mutable_list:ecssnapshot.ECSStateReplyV2.stateComponents)
  return &statecomponents_;
}

// repeated bytes stateEntities = 3;
inline int ECSStateReplyV2::_internal_stateentities_size() const {
  return stateentities_.size();
}
inline int ECSStateReplyV2::stateentities_size() const {
  return _internal_stateentities_size();
}
inline void ECSStateReplyV2::clear_stateentities() {
  stateentities_.Clear();
}
inline std::string* ECSStateReplyV2::add_stateentities() {
  std::string* _s = _internal_add_stateentities();
  // @@protoc_insertion_point(field_add_mutable:ecssnapshot.ECSStateReplyV2.stateEntities)
  return _s;
}
inline const std::string& ECSStateReplyV2::_internal_stateentities(int index) const {
  return stateentities_.Get(index);
}
inline const std::string& ECSStateReplyV2::stateentities(int index) const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateReplyV2.stateEntities)
  return _internal_stateentities(index);
}
inline std::string* ECSStateReplyV2::mutable_stateentities(int index) {
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateReplyV2.stateEntities)
  return stateentities_.Mutable(index);
}
inline void ECSStateReplyV2::set_stateentities(int index, const std::string& value) {
  stateentities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateReplyV2.stateEntities)
}
inline void ECSStateReplyV2::set_stateentities(int index, std::string&& value) {
  stateentities_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateReplyV2.stateEntities)
}
inline void ECSStateReplyV2::set_stateentities(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stateentities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ecssnapshot.ECSStateReplyV2.stateEntities)
}
inline void ECSStateReplyV2::set_stateentities(int index, const void* value, size_t size) {
  stateentities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecssnapshot.ECSStateReplyV2.stateEntities)
}
inline std::string* ECSStateReplyV2::_internal_add_stateentities() {
  return stateentities_.Add();
}
inline void ECSStateReplyV2::add_stateentities(const std::string& value) {
  stateentities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateReplyV2.stateEntities)
}
inline void ECSStateReplyV2::add_stateentities(std::string&& value) {
  stateentities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ecssnapshot.ECSStateReplyV2.stateEntities)
}
inline void ECSStateReplyV2::add_stateentities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stateentities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ecssnapshot.ECSStateReplyV2.stateEntities)
}
inline void ECSStateReplyV2::add_stateentities(const void* value, size_t size) {
  stateentities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ecssnapshot.ECSStateReplyV2.stateEntities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ECSStateReplyV2::stateentities() const {
  // @@protoc_insertion_point(field_list:ecssnapshot.ECSStateReplyV2.stateEntities)
  return stateentities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ECSStateReplyV2::mutable_stateentities() {
  // @@protoc_insertion_point(field_mutable_list:ecssnapshot.ECSStateReplyV2.stateEntities)
  return &stateentities_;
}

// string stateHash = 4;
inline void ECSStateReplyV2::clear_statehash() {
  statehash_.ClearToEmpty();
}
inline const std::string& ECSStateReplyV2::statehash() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateReplyV2.stateHash)
  return _internal_statehash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ECSStateReplyV2::set_statehash(ArgT0&& arg0, ArgT... args) {
 
 statehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateReplyV2.stateHash)
}
inline std::string* ECSStateReplyV2::mutable_statehash() {
  std::string* _s = _internal_mutable_statehash();
  // @@protoc_insertion_point(field_mutable:ecssnapshot.ECSStateReplyV2.stateHash)
  return _s;
}
inline const std::string& ECSStateReplyV2::_internal_statehash() const {
  return statehash_.Get();
}
inline void ECSStateReplyV2::_internal_set_statehash(const std::string& value) {
  
  statehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ECSStateReplyV2::_internal_mutable_statehash() {
  
  return statehash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ECSStateReplyV2::release_statehash() {
  // @@protoc_insertion_point(field_release:ecssnapshot.ECSStateReplyV2.stateHash)
  return statehash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ECSStateReplyV2::set_allocated_statehash(std::string* statehash) {
  if (statehash != nullptr) {
    
  } else {
    
  }
  statehash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statehash,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (statehash_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    statehash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ecssnapshot.ECSStateReplyV2.stateHash)
}

// uint32 blockNumber = 5;
inline void ECSStateReplyV2::clear_blocknumber() {
  blocknumber_ = 0u;
}
inline uint32_t ECSStateReplyV2::_internal_blocknumber() const {
  return blocknumber_;
}
inline uint32_t ECSStateReplyV2::blocknumber() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateReplyV2.blockNumber)
  return _internal_blocknumber();
}
inline void ECSStateReplyV2::_internal_set_blocknumber(uint32_t value) {
  
  blocknumber_ = value;
}
inline void ECSStateReplyV2::set_blocknumber(uint32_t value) {
  _internal_set_blocknumber(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateReplyV2.blockNumber)
}

// -------------------------------------------------------------------

// ECSStateBlockReply

// uint32 blockNumber = 1;
inline void ECSStateBlockReply::clear_blocknumber() {
  blocknumber_ = 0u;
}
inline uint32_t ECSStateBlockReply::_internal_blocknumber() const {
  return blocknumber_;
}
inline uint32_t ECSStateBlockReply::blocknumber() const {
  // @@protoc_insertion_point(field_get:ecssnapshot.ECSStateBlockReply.blockNumber)
  return _internal_blocknumber();
}
inline void ECSStateBlockReply::_internal_set_blocknumber(uint32_t value) {
  
  blocknumber_ = value;
}
inline void ECSStateBlockReply::set_blocknumber(uint32_t value) {
  _internal_set_blocknumber(value);
  // @@protoc_insertion_point(field_set:ecssnapshot.ECSStateBlockReply.blockNumber)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ecssnapshot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ecs_5fsnapshot_2eproto
