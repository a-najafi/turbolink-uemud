//Generated by TurboLink CodeGenerator, do not edit!
#include "SEcssnapshot/EcsSnapshotClient.h"
#include "SEcssnapshot/EcsSnapshotService.h"
#include "EcsSnapshotContext.h"
#include "TurboLinkGrpcManager_Private.h"
#include "Templates/SharedPointer.h"

FGrpcContextHandle UECSStateSnapshotServiceClient::InitGetStateLatest()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSStateSnapshotService_GetStateLatest>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSStateSnapshotServiceClient::GetStateLatest(FGrpcContextHandle Handle, const FGrpcEcssnapshotECSStateRequestLatest& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextGetStateLatest = StaticCastSharedPtr<GrpcContext_ECSStateSnapshotService_GetStateLatest>(*context);
		contextGetStateLatest->Call(Request);
	}
}
FGrpcContextHandle UECSStateSnapshotServiceClient::InitGetStateLatestStream()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSStateSnapshotService_GetStateLatestStream>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSStateSnapshotServiceClient::GetStateLatestStream(FGrpcContextHandle Handle, const FGrpcEcssnapshotECSStateRequestLatestStream& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextGetStateLatestStream = StaticCastSharedPtr<GrpcContext_ECSStateSnapshotService_GetStateLatestStream>(*context);
		contextGetStateLatestStream->Call(Request);
	}
}
FGrpcContextHandle UECSStateSnapshotServiceClient::InitGetStateLatestStreamV2()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSStateSnapshotService_GetStateLatestStreamV2>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSStateSnapshotServiceClient::GetStateLatestStreamV2(FGrpcContextHandle Handle, const FGrpcEcssnapshotECSStateRequestLatestStream& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextGetStateLatestStreamV2 = StaticCastSharedPtr<GrpcContext_ECSStateSnapshotService_GetStateLatestStreamV2>(*context);
		contextGetStateLatestStreamV2->Call(Request);
	}
}
FGrpcContextHandle UECSStateSnapshotServiceClient::InitGetStateLatestStreamPruned()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSStateSnapshotService_GetStateLatestStreamPruned>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSStateSnapshotServiceClient::GetStateLatestStreamPruned(FGrpcContextHandle Handle, const FGrpcEcssnapshotECSStateRequestLatestStreamPruned& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextGetStateLatestStreamPruned = StaticCastSharedPtr<GrpcContext_ECSStateSnapshotService_GetStateLatestStreamPruned>(*context);
		contextGetStateLatestStreamPruned->Call(Request);
	}
}
FGrpcContextHandle UECSStateSnapshotServiceClient::InitGetStateLatestStreamPrunedV2()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSStateSnapshotService_GetStateLatestStreamPrunedV2>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSStateSnapshotServiceClient::GetStateLatestStreamPrunedV2(FGrpcContextHandle Handle, const FGrpcEcssnapshotECSStateRequestLatestStreamPruned& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextGetStateLatestStreamPrunedV2 = StaticCastSharedPtr<GrpcContext_ECSStateSnapshotService_GetStateLatestStreamPrunedV2>(*context);
		contextGetStateLatestStreamPrunedV2->Call(Request);
	}
}
FGrpcContextHandle UECSStateSnapshotServiceClient::InitGetStateBlockLatest()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSStateSnapshotService_GetStateBlockLatest>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSStateSnapshotServiceClient::GetStateBlockLatest(FGrpcContextHandle Handle, const FGrpcEcssnapshotECSStateBlockRequestLatest& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextGetStateBlockLatest = StaticCastSharedPtr<GrpcContext_ECSStateSnapshotService_GetStateBlockLatest>(*context);
		contextGetStateBlockLatest->Call(Request);
	}
}
FGrpcContextHandle UECSStateSnapshotServiceClient::InitGetStateAtBlock()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSStateSnapshotService_GetStateAtBlock>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSStateSnapshotServiceClient::GetStateAtBlock(FGrpcContextHandle Handle, const FGrpcEcssnapshotECSStateRequestAtBlock& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextGetStateAtBlock = StaticCastSharedPtr<GrpcContext_ECSStateSnapshotService_GetStateAtBlock>(*context);
		contextGetStateAtBlock->Call(Request);
	}
}
FGrpcContextHandle UECSStateSnapshotServiceClient::InitGetWorlds()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ECSStateSnapshotService_GetWorlds>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UECSStateSnapshotServiceClient::GetWorlds(FGrpcContextHandle Handle, const FGrpcEcssnapshotWorldsRequest& Request)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextGetWorlds = StaticCastSharedPtr<GrpcContext_ECSStateSnapshotService_GetWorlds>(*context);
		contextGetWorlds->Call(Request);
	}
}
void UECSStateSnapshotServiceClient::TryCancel(FGrpcContextHandle Handle)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		(*context)->TryCancel();
	}
}

void UECSStateSnapshotServiceClient::Shutdown()
{
	OnGetStateLatestResponse.Clear();
	OnGetStateLatestStreamResponse.Clear();
	OnGetStateLatestStreamV2Response.Clear();
	OnGetStateLatestStreamPrunedResponse.Clear();
	OnGetStateLatestStreamPrunedV2Response.Clear();
	OnGetStateBlockLatestResponse.Clear();
	OnGetStateAtBlockResponse.Clear();
	OnGetWorldsResponse.Clear();
	Super::Shutdown();
}
