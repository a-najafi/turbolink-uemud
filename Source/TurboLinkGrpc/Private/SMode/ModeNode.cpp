//Generated by TurboLink CodeGenerator, do not edit!
#include "SMode/ModeNode.h"
#include "SMode/ModeService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Launch/Resources/Version.h"

UCallQueryLayerGetState* UCallQueryLayerGetState::GetState(UObject* WorldContextObject, const FGrpcModeStateRequest& Request)
{
	UCallQueryLayerGetState* node = NewObject<UCallQueryLayerGetState>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->QueryLayer = Cast<UQueryLayer>(turboLinkManager->MakeService("QueryLayer"));
	if (node->QueryLayer == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->QueryLayer->OnServiceStateChanged.AddUniqueDynamic(node, &UCallQueryLayerGetState::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->QueryLayer->Connect();
	}));
	return node;
}

void UCallQueryLayerGetState::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcModeQueryLayerStateResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		QueryLayerClient = QueryLayer->MakeClient();
		QueryLayerClient->OnContextStateChange.AddUniqueDynamic(this, &UCallQueryLayerGetState::OnContextStateChange);
		QueryLayerClient->OnGetStateResponse.AddUniqueDynamic(this, &UCallQueryLayerGetState::OnResponse);

		Context = QueryLayerClient->InitGetState();
		QueryLayerClient->GetState(Context, Request);
	}
}

void UCallQueryLayerGetState::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallQueryLayerGetState::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcModeQueryLayerStateResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallQueryLayerGetState::Shutdown()
{
	QueryLayer->OnServiceStateChanged.RemoveDynamic(this, &UCallQueryLayerGetState::OnServiceStateChanged);
	if (QueryLayerClient != nullptr)
	{
		QueryLayer->RemoveClient(QueryLayerClient);
		QueryLayerClient->Shutdown();
		QueryLayerClient = nullptr;
	}

	if (QueryLayer != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(QueryLayer);
		QueryLayer = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallQueryLayerSingle__GetState* UCallQueryLayerSingle__GetState::Single__GetState(UObject* WorldContextObject, const FGrpcModeSingle__StateRequest& Request)
{
	UCallQueryLayerSingle__GetState* node = NewObject<UCallQueryLayerSingle__GetState>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->QueryLayer = Cast<UQueryLayer>(turboLinkManager->MakeService("QueryLayer"));
	if (node->QueryLayer == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->QueryLayer->OnServiceStateChanged.AddUniqueDynamic(node, &UCallQueryLayerSingle__GetState::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->QueryLayer->Connect();
	}));
	return node;
}

void UCallQueryLayerSingle__GetState::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcModeQueryLayerStateResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		QueryLayerClient = QueryLayer->MakeClient();
		QueryLayerClient->OnContextStateChange.AddUniqueDynamic(this, &UCallQueryLayerSingle__GetState::OnContextStateChange);
		QueryLayerClient->OnSingle__GetStateResponse.AddUniqueDynamic(this, &UCallQueryLayerSingle__GetState::OnResponse);

		Context = QueryLayerClient->InitSingle__GetState();
		QueryLayerClient->Single__GetState(Context, Request);
	}
}

void UCallQueryLayerSingle__GetState::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallQueryLayerSingle__GetState::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcModeQueryLayerStateResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallQueryLayerSingle__GetState::Shutdown()
{
	QueryLayer->OnServiceStateChanged.RemoveDynamic(this, &UCallQueryLayerSingle__GetState::OnServiceStateChanged);
	if (QueryLayerClient != nullptr)
	{
		QueryLayer->RemoveClient(QueryLayerClient);
		QueryLayerClient->Shutdown();
		QueryLayerClient = nullptr;
	}

	if (QueryLayer != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(QueryLayer);
		QueryLayer = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
