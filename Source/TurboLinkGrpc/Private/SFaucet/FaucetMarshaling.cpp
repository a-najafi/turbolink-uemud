//Generated by TurboLink CodeGenerator, do not edit!
#include "FaucetMarshaling.h"

void GRPC_TO_TURBOLINK(const ::faucet::LinkedTwitterPair* in, FGrpcFaucetLinkedTwitterPair* out)
{
    out->Username=UTF8_TO_TCHAR(in->username().c_str());
    out->Address=UTF8_TO_TCHAR(in->address().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetLinkedTwitterPair* in, ::faucet::LinkedTwitterPair* out)
{
    out->set_username(TCHAR_TO_UTF8(*(in->Username)));
    out->set_address(TCHAR_TO_UTF8(*(in->Address)));
}

void GRPC_TO_TURBOLINK(const ::faucet::FaucetStore* in, FGrpcFaucetFaucetStore* out)
{
    out->AddressToUsername.Empty();
    for (const auto& item : in->addresstousername()) {
        auto& value = out->AddressToUsername.Add(UTF8_TO_TCHAR(item.first.c_str()));
        value = UTF8_TO_TCHAR(item.second.c_str());
    }
    out->UsernameToAddress.Empty();
    for (const auto& item : in->usernametoaddress()) {
        auto& value = out->UsernameToAddress.Add(UTF8_TO_TCHAR(item.first.c_str()));
        value = UTF8_TO_TCHAR(item.second.c_str());
    }
    out->LatestDrip.Empty();
    for (const auto& item : in->latestdrip()) {
        auto& value = out->LatestDrip.Add(UTF8_TO_TCHAR(item.first.c_str()));
        value = item.second;
    }
    out->TotalDripCount=in->totaldripcount();
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetFaucetStore* in, ::faucet::FaucetStore* out)
{
    for (const auto& item : in->AddressToUsername) {
        (*(out->mutable_addresstousername()))[TCHAR_TO_UTF8(*(item.Key))] = TCHAR_TO_UTF8(*(item.Value));
    }
    for (const auto& item : in->UsernameToAddress) {
        (*(out->mutable_usernametoaddress()))[TCHAR_TO_UTF8(*(item.Key))] = TCHAR_TO_UTF8(*(item.Value));
    }
    for (const auto& item : in->LatestDrip) {
        (*(out->mutable_latestdrip()))[TCHAR_TO_UTF8(*(item.Key))] = item.Value;
    }
    out->set_totaldripcount(in->TotalDripCount);
}

void GRPC_TO_TURBOLINK(const ::faucet::DripRequest* in, FGrpcFaucetDripRequest* out)
{
    out->Username=UTF8_TO_TCHAR(in->username().c_str());
    out->Address=UTF8_TO_TCHAR(in->address().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetDripRequest* in, ::faucet::DripRequest* out)
{
    out->set_username(TCHAR_TO_UTF8(*(in->Username)));
    out->set_address(TCHAR_TO_UTF8(*(in->Address)));
}

void GRPC_TO_TURBOLINK(const ::faucet::DripDevRequest* in, FGrpcFaucetDripDevRequest* out)
{
    out->Address=UTF8_TO_TCHAR(in->address().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetDripDevRequest* in, ::faucet::DripDevRequest* out)
{
    out->set_address(TCHAR_TO_UTF8(*(in->Address)));
}

void GRPC_TO_TURBOLINK(const ::faucet::DripResponse* in, FGrpcFaucetDripResponse* out)
{
    out->DripTxHash=UTF8_TO_TCHAR(in->driptxhash().c_str());
    out->EcsTxHash=UTF8_TO_TCHAR(in->ecstxhash().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetDripResponse* in, ::faucet::DripResponse* out)
{
    out->set_driptxhash(TCHAR_TO_UTF8(*(in->DripTxHash)));
    out->set_ecstxhash(TCHAR_TO_UTF8(*(in->EcsTxHash)));
}

void GRPC_TO_TURBOLINK(const ::faucet::TimeUntilDripResponse* in, FGrpcFaucetTimeUntilDripResponse* out)
{
    out->TimeUntilDripMinutes=in->timeuntildripminutes();
    out->TimeUntilDripSeconds=in->timeuntildripseconds();
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetTimeUntilDripResponse* in, ::faucet::TimeUntilDripResponse* out)
{
    out->set_timeuntildripminutes(in->TimeUntilDripMinutes);
    out->set_timeuntildripseconds(in->TimeUntilDripSeconds);
}

void GRPC_TO_TURBOLINK(const ::faucet::GetLinkedTwittersRequest* in, FGrpcFaucetGetLinkedTwittersRequest* out)
{
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetGetLinkedTwittersRequest* in, ::faucet::GetLinkedTwittersRequest* out)
{
}

void GRPC_TO_TURBOLINK(const ::faucet::GetLinkedTwittersResponse* in, FGrpcFaucetGetLinkedTwittersResponse* out)
{
    out->LinkedTwitters.Empty();
    for (int i=0; i<in->linkedtwitters_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->linkedtwitters(i)), &(out->LinkedTwitters.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetGetLinkedTwittersResponse* in, ::faucet::GetLinkedTwittersResponse* out)
{
    for(const auto& value : in->LinkedTwitters) {
        TURBOLINK_TO_GRPC(&value, out->add_linkedtwitters());
    } 
}

void GRPC_TO_TURBOLINK(const ::faucet::LinkedTwitterForAddressRequest* in, FGrpcFaucetLinkedTwitterForAddressRequest* out)
{
    out->Address=UTF8_TO_TCHAR(in->address().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetLinkedTwitterForAddressRequest* in, ::faucet::LinkedTwitterForAddressRequest* out)
{
    out->set_address(TCHAR_TO_UTF8(*(in->Address)));
}

void GRPC_TO_TURBOLINK(const ::faucet::LinkedTwitterForAddressResponse* in, FGrpcFaucetLinkedTwitterForAddressResponse* out)
{
    out->Username=UTF8_TO_TCHAR(in->username().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetLinkedTwitterForAddressResponse* in, ::faucet::LinkedTwitterForAddressResponse* out)
{
    out->set_username(TCHAR_TO_UTF8(*(in->Username)));
}

void GRPC_TO_TURBOLINK(const ::faucet::LinkedAddressForTwitterRequest* in, FGrpcFaucetLinkedAddressForTwitterRequest* out)
{
    out->Username=UTF8_TO_TCHAR(in->username().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetLinkedAddressForTwitterRequest* in, ::faucet::LinkedAddressForTwitterRequest* out)
{
    out->set_username(TCHAR_TO_UTF8(*(in->Username)));
}

void GRPC_TO_TURBOLINK(const ::faucet::LinkedAddressForTwitterResponse* in, FGrpcFaucetLinkedAddressForTwitterResponse* out)
{
    out->Address=UTF8_TO_TCHAR(in->address().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetLinkedAddressForTwitterResponse* in, ::faucet::LinkedAddressForTwitterResponse* out)
{
    out->set_address(TCHAR_TO_UTF8(*(in->Address)));
}

void GRPC_TO_TURBOLINK(const ::faucet::SetLinkedTwitterRequest* in, FGrpcFaucetSetLinkedTwitterRequest* out)
{
    out->Address=UTF8_TO_TCHAR(in->address().c_str());
    out->Username=UTF8_TO_TCHAR(in->username().c_str());
    out->Signature=UTF8_TO_TCHAR(in->signature().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetSetLinkedTwitterRequest* in, ::faucet::SetLinkedTwitterRequest* out)
{
    out->set_address(TCHAR_TO_UTF8(*(in->Address)));
    out->set_username(TCHAR_TO_UTF8(*(in->Username)));
    out->set_signature(TCHAR_TO_UTF8(*(in->Signature)));
}

void GRPC_TO_TURBOLINK(const ::faucet::SetLinkedTwitterResponse* in, FGrpcFaucetSetLinkedTwitterResponse* out)
{
}

void TURBOLINK_TO_GRPC(const FGrpcFaucetSetLinkedTwitterResponse* in, ::faucet::SetLinkedTwitterResponse* out)
{
}

