// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mode.proto

#include "mode.pb.h"
#include "mode.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mode {

static const char* QueryLayer_method_names[] = {
  "/mode.QueryLayer/GetState",
  "/mode.QueryLayer/StreamState",
  "/mode.QueryLayer/Single__GetState",
  "/mode.QueryLayer/Single__StreamState",
};

std::unique_ptr< QueryLayer::Stub> QueryLayer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< QueryLayer::Stub> stub(new QueryLayer::Stub(channel, options));
  return stub;
}

QueryLayer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetState_(QueryLayer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamState_(QueryLayer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Single__GetState_(QueryLayer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Single__StreamState_(QueryLayer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status QueryLayer::Stub::GetState(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::mode::QueryLayerStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mode::StateRequest, ::mode::QueryLayerStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetState_, context, request, response);
}

void QueryLayer::Stub::async::GetState(::grpc::ClientContext* context, const ::mode::StateRequest* request, ::mode::QueryLayerStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mode::StateRequest, ::mode::QueryLayerStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, std::move(f));
}

void QueryLayer::Stub::async::GetState(::grpc::ClientContext* context, const ::mode::StateRequest* request, ::mode::QueryLayerStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>* QueryLayer::Stub::PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mode::QueryLayerStateResponse, ::mode::StateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>* QueryLayer::Stub::AsyncGetStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::mode::QueryLayerStateStreamResponse>* QueryLayer::Stub::StreamStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mode::QueryLayerStateStreamResponse>::Create(channel_.get(), rpcmethod_StreamState_, context, request);
}

void QueryLayer::Stub::async::StreamState(::grpc::ClientContext* context, const ::mode::StateRequest* request, ::grpc::ClientReadReactor< ::mode::QueryLayerStateStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mode::QueryLayerStateStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamState_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>* QueryLayer::Stub::AsyncStreamStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mode::QueryLayerStateStreamResponse>::Create(channel_.get(), cq, rpcmethod_StreamState_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>* QueryLayer::Stub::PrepareAsyncStreamStateRaw(::grpc::ClientContext* context, const ::mode::StateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mode::QueryLayerStateStreamResponse>::Create(channel_.get(), cq, rpcmethod_StreamState_, context, request, false, nullptr);
}

::grpc::Status QueryLayer::Stub::Single__GetState(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::mode::QueryLayerStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mode::Single__StateRequest, ::mode::QueryLayerStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Single__GetState_, context, request, response);
}

void QueryLayer::Stub::async::Single__GetState(::grpc::ClientContext* context, const ::mode::Single__StateRequest* request, ::mode::QueryLayerStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mode::Single__StateRequest, ::mode::QueryLayerStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Single__GetState_, context, request, response, std::move(f));
}

void QueryLayer::Stub::async::Single__GetState(::grpc::ClientContext* context, const ::mode::Single__StateRequest* request, ::mode::QueryLayerStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Single__GetState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>* QueryLayer::Stub::PrepareAsyncSingle__GetStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mode::QueryLayerStateResponse, ::mode::Single__StateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Single__GetState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mode::QueryLayerStateResponse>* QueryLayer::Stub::AsyncSingle__GetStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSingle__GetStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::mode::QueryLayerStateStreamResponse>* QueryLayer::Stub::Single__StreamStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mode::QueryLayerStateStreamResponse>::Create(channel_.get(), rpcmethod_Single__StreamState_, context, request);
}

void QueryLayer::Stub::async::Single__StreamState(::grpc::ClientContext* context, const ::mode::Single__StateRequest* request, ::grpc::ClientReadReactor< ::mode::QueryLayerStateStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mode::QueryLayerStateStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Single__StreamState_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>* QueryLayer::Stub::AsyncSingle__StreamStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mode::QueryLayerStateStreamResponse>::Create(channel_.get(), cq, rpcmethod_Single__StreamState_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mode::QueryLayerStateStreamResponse>* QueryLayer::Stub::PrepareAsyncSingle__StreamStateRaw(::grpc::ClientContext* context, const ::mode::Single__StateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mode::QueryLayerStateStreamResponse>::Create(channel_.get(), cq, rpcmethod_Single__StreamState_, context, request, false, nullptr);
}

QueryLayer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryLayer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryLayer::Service, ::mode::StateRequest, ::mode::QueryLayerStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](QueryLayer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mode::StateRequest* req,
             ::mode::QueryLayerStateResponse* resp) {
               return service->GetState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryLayer_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< QueryLayer::Service, ::mode::StateRequest, ::mode::QueryLayerStateStreamResponse>(
          [](QueryLayer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mode::StateRequest* req,
             ::grpc::ServerWriter<::mode::QueryLayerStateStreamResponse>* writer) {
               return service->StreamState(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryLayer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryLayer::Service, ::mode::Single__StateRequest, ::mode::QueryLayerStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](QueryLayer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mode::Single__StateRequest* req,
             ::mode::QueryLayerStateResponse* resp) {
               return service->Single__GetState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryLayer_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< QueryLayer::Service, ::mode::Single__StateRequest, ::mode::QueryLayerStateStreamResponse>(
          [](QueryLayer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mode::Single__StateRequest* req,
             ::grpc::ServerWriter<::mode::QueryLayerStateStreamResponse>* writer) {
               return service->Single__StreamState(ctx, req, writer);
             }, this)));
}

QueryLayer::Service::~Service() {
}

::grpc::Status QueryLayer::Service::GetState(::grpc::ServerContext* context, const ::mode::StateRequest* request, ::mode::QueryLayerStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryLayer::Service::StreamState(::grpc::ServerContext* context, const ::mode::StateRequest* request, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryLayer::Service::Single__GetState(::grpc::ServerContext* context, const ::mode::Single__StateRequest* request, ::mode::QueryLayerStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryLayer::Service::Single__StreamState(::grpc::ServerContext* context, const ::mode::Single__StateRequest* request, ::grpc::ServerWriter< ::mode::QueryLayerStateStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mode

