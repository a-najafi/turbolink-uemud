// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ecs_snapshot.proto

#include "ecs_snapshot.pb.h"
#include "ecs_snapshot.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ecssnapshot {

static const char* ECSStateSnapshotService_method_names[] = {
  "/ecssnapshot.ECSStateSnapshotService/GetStateLatest",
  "/ecssnapshot.ECSStateSnapshotService/GetStateLatestStream",
  "/ecssnapshot.ECSStateSnapshotService/GetStateLatestStreamV2",
  "/ecssnapshot.ECSStateSnapshotService/GetStateLatestStreamPruned",
  "/ecssnapshot.ECSStateSnapshotService/GetStateLatestStreamPrunedV2",
  "/ecssnapshot.ECSStateSnapshotService/GetStateBlockLatest",
  "/ecssnapshot.ECSStateSnapshotService/GetStateAtBlock",
  "/ecssnapshot.ECSStateSnapshotService/GetWorlds",
};

std::unique_ptr< ECSStateSnapshotService::Stub> ECSStateSnapshotService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ECSStateSnapshotService::Stub> stub(new ECSStateSnapshotService::Stub(channel, options));
  return stub;
}

ECSStateSnapshotService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetStateLatest_(ECSStateSnapshotService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStateLatestStream_(ECSStateSnapshotService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetStateLatestStreamV2_(ECSStateSnapshotService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetStateLatestStreamPruned_(ECSStateSnapshotService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetStateLatestStreamPrunedV2_(ECSStateSnapshotService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetStateBlockLatest_(ECSStateSnapshotService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStateAtBlock_(ECSStateSnapshotService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWorlds_(ECSStateSnapshotService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ECSStateSnapshotService::Stub::GetStateLatest(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatest& request, ::ecssnapshot::ECSStateReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ecssnapshot::ECSStateRequestLatest, ::ecssnapshot::ECSStateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStateLatest_, context, request, response);
}

void ECSStateSnapshotService::Stub::async::GetStateLatest(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatest* request, ::ecssnapshot::ECSStateReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ecssnapshot::ECSStateRequestLatest, ::ecssnapshot::ECSStateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStateLatest_, context, request, response, std::move(f));
}

void ECSStateSnapshotService::Stub::async::GetStateLatest(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatest* request, ::ecssnapshot::ECSStateReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStateLatest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ecssnapshot::ECSStateReply>* ECSStateSnapshotService::Stub::PrepareAsyncGetStateLatestRaw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ecssnapshot::ECSStateReply, ::ecssnapshot::ECSStateRequestLatest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStateLatest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ecssnapshot::ECSStateReply>* ECSStateSnapshotService::Stub::AsyncGetStateLatestRaw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStateLatestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::ecssnapshot::ECSStateReply>* ECSStateSnapshotService::Stub::GetStateLatestStreamRaw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStream& request) {
  return ::grpc::internal::ClientReaderFactory< ::ecssnapshot::ECSStateReply>::Create(channel_.get(), rpcmethod_GetStateLatestStream_, context, request);
}

void ECSStateSnapshotService::Stub::async::GetStateLatestStream(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStream* request, ::grpc::ClientReadReactor< ::ecssnapshot::ECSStateReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ecssnapshot::ECSStateReply>::Create(stub_->channel_.get(), stub_->rpcmethod_GetStateLatestStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ecssnapshot::ECSStateReply>* ECSStateSnapshotService::Stub::AsyncGetStateLatestStreamRaw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStream& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ecssnapshot::ECSStateReply>::Create(channel_.get(), cq, rpcmethod_GetStateLatestStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ecssnapshot::ECSStateReply>* ECSStateSnapshotService::Stub::PrepareAsyncGetStateLatestStreamRaw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStream& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ecssnapshot::ECSStateReply>::Create(channel_.get(), cq, rpcmethod_GetStateLatestStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::ecssnapshot::ECSStateReplyV2>* ECSStateSnapshotService::Stub::GetStateLatestStreamV2Raw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStream& request) {
  return ::grpc::internal::ClientReaderFactory< ::ecssnapshot::ECSStateReplyV2>::Create(channel_.get(), rpcmethod_GetStateLatestStreamV2_, context, request);
}

void ECSStateSnapshotService::Stub::async::GetStateLatestStreamV2(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStream* request, ::grpc::ClientReadReactor< ::ecssnapshot::ECSStateReplyV2>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ecssnapshot::ECSStateReplyV2>::Create(stub_->channel_.get(), stub_->rpcmethod_GetStateLatestStreamV2_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ecssnapshot::ECSStateReplyV2>* ECSStateSnapshotService::Stub::AsyncGetStateLatestStreamV2Raw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStream& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ecssnapshot::ECSStateReplyV2>::Create(channel_.get(), cq, rpcmethod_GetStateLatestStreamV2_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ecssnapshot::ECSStateReplyV2>* ECSStateSnapshotService::Stub::PrepareAsyncGetStateLatestStreamV2Raw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStream& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ecssnapshot::ECSStateReplyV2>::Create(channel_.get(), cq, rpcmethod_GetStateLatestStreamV2_, context, request, false, nullptr);
}

::grpc::ClientReader< ::ecssnapshot::ECSStateReply>* ECSStateSnapshotService::Stub::GetStateLatestStreamPrunedRaw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStreamPruned& request) {
  return ::grpc::internal::ClientReaderFactory< ::ecssnapshot::ECSStateReply>::Create(channel_.get(), rpcmethod_GetStateLatestStreamPruned_, context, request);
}

void ECSStateSnapshotService::Stub::async::GetStateLatestStreamPruned(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStreamPruned* request, ::grpc::ClientReadReactor< ::ecssnapshot::ECSStateReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ecssnapshot::ECSStateReply>::Create(stub_->channel_.get(), stub_->rpcmethod_GetStateLatestStreamPruned_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ecssnapshot::ECSStateReply>* ECSStateSnapshotService::Stub::AsyncGetStateLatestStreamPrunedRaw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStreamPruned& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ecssnapshot::ECSStateReply>::Create(channel_.get(), cq, rpcmethod_GetStateLatestStreamPruned_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ecssnapshot::ECSStateReply>* ECSStateSnapshotService::Stub::PrepareAsyncGetStateLatestStreamPrunedRaw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStreamPruned& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ecssnapshot::ECSStateReply>::Create(channel_.get(), cq, rpcmethod_GetStateLatestStreamPruned_, context, request, false, nullptr);
}

::grpc::ClientReader< ::ecssnapshot::ECSStateReplyV2>* ECSStateSnapshotService::Stub::GetStateLatestStreamPrunedV2Raw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStreamPruned& request) {
  return ::grpc::internal::ClientReaderFactory< ::ecssnapshot::ECSStateReplyV2>::Create(channel_.get(), rpcmethod_GetStateLatestStreamPrunedV2_, context, request);
}

void ECSStateSnapshotService::Stub::async::GetStateLatestStreamPrunedV2(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStreamPruned* request, ::grpc::ClientReadReactor< ::ecssnapshot::ECSStateReplyV2>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ecssnapshot::ECSStateReplyV2>::Create(stub_->channel_.get(), stub_->rpcmethod_GetStateLatestStreamPrunedV2_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ecssnapshot::ECSStateReplyV2>* ECSStateSnapshotService::Stub::AsyncGetStateLatestStreamPrunedV2Raw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStreamPruned& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ecssnapshot::ECSStateReplyV2>::Create(channel_.get(), cq, rpcmethod_GetStateLatestStreamPrunedV2_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ecssnapshot::ECSStateReplyV2>* ECSStateSnapshotService::Stub::PrepareAsyncGetStateLatestStreamPrunedV2Raw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestLatestStreamPruned& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ecssnapshot::ECSStateReplyV2>::Create(channel_.get(), cq, rpcmethod_GetStateLatestStreamPrunedV2_, context, request, false, nullptr);
}

::grpc::Status ECSStateSnapshotService::Stub::GetStateBlockLatest(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateBlockRequestLatest& request, ::ecssnapshot::ECSStateBlockReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ecssnapshot::ECSStateBlockRequestLatest, ::ecssnapshot::ECSStateBlockReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStateBlockLatest_, context, request, response);
}

void ECSStateSnapshotService::Stub::async::GetStateBlockLatest(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateBlockRequestLatest* request, ::ecssnapshot::ECSStateBlockReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ecssnapshot::ECSStateBlockRequestLatest, ::ecssnapshot::ECSStateBlockReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStateBlockLatest_, context, request, response, std::move(f));
}

void ECSStateSnapshotService::Stub::async::GetStateBlockLatest(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateBlockRequestLatest* request, ::ecssnapshot::ECSStateBlockReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStateBlockLatest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ecssnapshot::ECSStateBlockReply>* ECSStateSnapshotService::Stub::PrepareAsyncGetStateBlockLatestRaw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateBlockRequestLatest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ecssnapshot::ECSStateBlockReply, ::ecssnapshot::ECSStateBlockRequestLatest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStateBlockLatest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ecssnapshot::ECSStateBlockReply>* ECSStateSnapshotService::Stub::AsyncGetStateBlockLatestRaw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateBlockRequestLatest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStateBlockLatestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ECSStateSnapshotService::Stub::GetStateAtBlock(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestAtBlock& request, ::ecssnapshot::ECSStateReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ecssnapshot::ECSStateRequestAtBlock, ::ecssnapshot::ECSStateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStateAtBlock_, context, request, response);
}

void ECSStateSnapshotService::Stub::async::GetStateAtBlock(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestAtBlock* request, ::ecssnapshot::ECSStateReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ecssnapshot::ECSStateRequestAtBlock, ::ecssnapshot::ECSStateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStateAtBlock_, context, request, response, std::move(f));
}

void ECSStateSnapshotService::Stub::async::GetStateAtBlock(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestAtBlock* request, ::ecssnapshot::ECSStateReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStateAtBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ecssnapshot::ECSStateReply>* ECSStateSnapshotService::Stub::PrepareAsyncGetStateAtBlockRaw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestAtBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ecssnapshot::ECSStateReply, ::ecssnapshot::ECSStateRequestAtBlock, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStateAtBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ecssnapshot::ECSStateReply>* ECSStateSnapshotService::Stub::AsyncGetStateAtBlockRaw(::grpc::ClientContext* context, const ::ecssnapshot::ECSStateRequestAtBlock& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStateAtBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ECSStateSnapshotService::Stub::GetWorlds(::grpc::ClientContext* context, const ::ecssnapshot::WorldsRequest& request, ::ecssnapshot::Worlds* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ecssnapshot::WorldsRequest, ::ecssnapshot::Worlds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWorlds_, context, request, response);
}

void ECSStateSnapshotService::Stub::async::GetWorlds(::grpc::ClientContext* context, const ::ecssnapshot::WorldsRequest* request, ::ecssnapshot::Worlds* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ecssnapshot::WorldsRequest, ::ecssnapshot::Worlds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWorlds_, context, request, response, std::move(f));
}

void ECSStateSnapshotService::Stub::async::GetWorlds(::grpc::ClientContext* context, const ::ecssnapshot::WorldsRequest* request, ::ecssnapshot::Worlds* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWorlds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ecssnapshot::Worlds>* ECSStateSnapshotService::Stub::PrepareAsyncGetWorldsRaw(::grpc::ClientContext* context, const ::ecssnapshot::WorldsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ecssnapshot::Worlds, ::ecssnapshot::WorldsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWorlds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ecssnapshot::Worlds>* ECSStateSnapshotService::Stub::AsyncGetWorldsRaw(::grpc::ClientContext* context, const ::ecssnapshot::WorldsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWorldsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ECSStateSnapshotService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSStateSnapshotService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ECSStateSnapshotService::Service, ::ecssnapshot::ECSStateRequestLatest, ::ecssnapshot::ECSStateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ECSStateSnapshotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecssnapshot::ECSStateRequestLatest* req,
             ::ecssnapshot::ECSStateReply* resp) {
               return service->GetStateLatest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSStateSnapshotService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ECSStateSnapshotService::Service, ::ecssnapshot::ECSStateRequestLatestStream, ::ecssnapshot::ECSStateReply>(
          [](ECSStateSnapshotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecssnapshot::ECSStateRequestLatestStream* req,
             ::grpc::ServerWriter<::ecssnapshot::ECSStateReply>* writer) {
               return service->GetStateLatestStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSStateSnapshotService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ECSStateSnapshotService::Service, ::ecssnapshot::ECSStateRequestLatestStream, ::ecssnapshot::ECSStateReplyV2>(
          [](ECSStateSnapshotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecssnapshot::ECSStateRequestLatestStream* req,
             ::grpc::ServerWriter<::ecssnapshot::ECSStateReplyV2>* writer) {
               return service->GetStateLatestStreamV2(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSStateSnapshotService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ECSStateSnapshotService::Service, ::ecssnapshot::ECSStateRequestLatestStreamPruned, ::ecssnapshot::ECSStateReply>(
          [](ECSStateSnapshotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecssnapshot::ECSStateRequestLatestStreamPruned* req,
             ::grpc::ServerWriter<::ecssnapshot::ECSStateReply>* writer) {
               return service->GetStateLatestStreamPruned(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSStateSnapshotService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ECSStateSnapshotService::Service, ::ecssnapshot::ECSStateRequestLatestStreamPruned, ::ecssnapshot::ECSStateReplyV2>(
          [](ECSStateSnapshotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecssnapshot::ECSStateRequestLatestStreamPruned* req,
             ::grpc::ServerWriter<::ecssnapshot::ECSStateReplyV2>* writer) {
               return service->GetStateLatestStreamPrunedV2(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSStateSnapshotService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ECSStateSnapshotService::Service, ::ecssnapshot::ECSStateBlockRequestLatest, ::ecssnapshot::ECSStateBlockReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ECSStateSnapshotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecssnapshot::ECSStateBlockRequestLatest* req,
             ::ecssnapshot::ECSStateBlockReply* resp) {
               return service->GetStateBlockLatest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSStateSnapshotService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ECSStateSnapshotService::Service, ::ecssnapshot::ECSStateRequestAtBlock, ::ecssnapshot::ECSStateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ECSStateSnapshotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecssnapshot::ECSStateRequestAtBlock* req,
             ::ecssnapshot::ECSStateReply* resp) {
               return service->GetStateAtBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ECSStateSnapshotService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ECSStateSnapshotService::Service, ::ecssnapshot::WorldsRequest, ::ecssnapshot::Worlds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ECSStateSnapshotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ecssnapshot::WorldsRequest* req,
             ::ecssnapshot::Worlds* resp) {
               return service->GetWorlds(ctx, req, resp);
             }, this)));
}

ECSStateSnapshotService::Service::~Service() {
}

::grpc::Status ECSStateSnapshotService::Service::GetStateLatest(::grpc::ServerContext* context, const ::ecssnapshot::ECSStateRequestLatest* request, ::ecssnapshot::ECSStateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSStateSnapshotService::Service::GetStateLatestStream(::grpc::ServerContext* context, const ::ecssnapshot::ECSStateRequestLatestStream* request, ::grpc::ServerWriter< ::ecssnapshot::ECSStateReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSStateSnapshotService::Service::GetStateLatestStreamV2(::grpc::ServerContext* context, const ::ecssnapshot::ECSStateRequestLatestStream* request, ::grpc::ServerWriter< ::ecssnapshot::ECSStateReplyV2>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSStateSnapshotService::Service::GetStateLatestStreamPruned(::grpc::ServerContext* context, const ::ecssnapshot::ECSStateRequestLatestStreamPruned* request, ::grpc::ServerWriter< ::ecssnapshot::ECSStateReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSStateSnapshotService::Service::GetStateLatestStreamPrunedV2(::grpc::ServerContext* context, const ::ecssnapshot::ECSStateRequestLatestStreamPruned* request, ::grpc::ServerWriter< ::ecssnapshot::ECSStateReplyV2>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSStateSnapshotService::Service::GetStateBlockLatest(::grpc::ServerContext* context, const ::ecssnapshot::ECSStateBlockRequestLatest* request, ::ecssnapshot::ECSStateBlockReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSStateSnapshotService::Service::GetStateAtBlock(::grpc::ServerContext* context, const ::ecssnapshot::ECSStateRequestAtBlock* request, ::ecssnapshot::ECSStateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ECSStateSnapshotService::Service::GetWorlds(::grpc::ServerContext* context, const ::ecssnapshot::WorldsRequest* request, ::ecssnapshot::Worlds* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ecssnapshot

