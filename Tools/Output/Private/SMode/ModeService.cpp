//Generated by TurboLink CodeGenerator, do not edit!
#include "SMode/ModeService.h"
#include "SMode/ModeClient.h"
#include "ModeService_Private.h"
#include "ModeMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UQueryLayer::UQueryLayer()
	: d(new UQueryLayer::Private())
{
}

UQueryLayer::~UQueryLayer()
{
	delete d;
}

void UQueryLayer::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("QueryLayer"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to QueryLayer: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = mode::QueryLayer::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UQueryLayer::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UQueryLayerClient* UQueryLayer::MakeClient()
{
	auto client = UGrpcService::MakeClient<UQueryLayerClient>();
	return client;
}

void UQueryLayer::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UQueryLayer::CallGetState(const FGrpcModeStateRequest& Request, FGetStateResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UQueryLayerGetStateLambdaWrapper* lambdaWrapper = NewObject<UQueryLayerGetStateLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetState();
	InnerClient->OnGetStateResponse.AddUniqueDynamic(lambdaWrapper, &UQueryLayerGetStateLambdaWrapper::OnResponse);
	InnerClient->GetState(lambdaWrapper->Handle, Request);
}

void UQueryLayer::CallStreamState(const FGrpcModeStateRequest& Request, FStreamStateResponseLambda ResponseLambda, FStreamStateFinishLambda FinishLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UQueryLayerStreamStateLambdaWrapper* lambdaWrapper = NewObject<UQueryLayerStreamStateLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->FinishLambda = FinishLambda;
	lambdaWrapper->Handle = InnerClient->InitStreamState();
	InnerClient->OnStreamStateResponse.AddUniqueDynamic(lambdaWrapper, &UQueryLayerStreamStateLambdaWrapper::OnResponse);
	InnerClient->OnContextStateChange.AddUniqueDynamic(lambdaWrapper, &UQueryLayerStreamStateLambdaWrapper::OnContextStateChanged);
	InnerClient->StreamState(lambdaWrapper->Handle, Request);
}

void UQueryLayer::CallSingle__GetState(const FGrpcModeSingle__StateRequest& Request, FSingle__GetStateResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UQueryLayerSingle__GetStateLambdaWrapper* lambdaWrapper = NewObject<UQueryLayerSingle__GetStateLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitSingle__GetState();
	InnerClient->OnSingle__GetStateResponse.AddUniqueDynamic(lambdaWrapper, &UQueryLayerSingle__GetStateLambdaWrapper::OnResponse);
	InnerClient->Single__GetState(lambdaWrapper->Handle, Request);
}

void UQueryLayer::CallSingle__StreamState(const FGrpcModeSingle__StateRequest& Request, FSingle__StreamStateResponseLambda ResponseLambda, FSingle__StreamStateFinishLambda FinishLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UQueryLayerSingle__StreamStateLambdaWrapper* lambdaWrapper = NewObject<UQueryLayerSingle__StreamStateLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->FinishLambda = FinishLambda;
	lambdaWrapper->Handle = InnerClient->InitSingle__StreamState();
	InnerClient->OnSingle__StreamStateResponse.AddUniqueDynamic(lambdaWrapper, &UQueryLayerSingle__StreamStateLambdaWrapper::OnResponse);
	InnerClient->OnContextStateChange.AddUniqueDynamic(lambdaWrapper, &UQueryLayerSingle__StreamStateLambdaWrapper::OnContextStateChanged);
	InnerClient->Single__StreamState(lambdaWrapper->Handle, Request);
}
