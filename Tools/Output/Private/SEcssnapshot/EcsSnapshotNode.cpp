//Generated by TurboLink CodeGenerator, do not edit!
#include "SEcssnapshot/EcsSnapshotNode.h"
#include "SEcssnapshot/EcsSnapshotService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Launch/Resources/Version.h"

UCallECSStateSnapshotServiceGetStateLatest* UCallECSStateSnapshotServiceGetStateLatest::GetStateLatest(UObject* WorldContextObject, const FGrpcEcssnapshotECSStateRequestLatest& Request)
{
	UCallECSStateSnapshotServiceGetStateLatest* node = NewObject<UCallECSStateSnapshotServiceGetStateLatest>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ECSStateSnapshotService = Cast<UECSStateSnapshotService>(turboLinkManager->MakeService("ECSStateSnapshotService"));
	if (node->ECSStateSnapshotService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->ECSStateSnapshotService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallECSStateSnapshotServiceGetStateLatest::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->ECSStateSnapshotService->Connect();
	}));
	return node;
}

void UCallECSStateSnapshotServiceGetStateLatest::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcEcssnapshotECSStateReply response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ECSStateSnapshotServiceClient = ECSStateSnapshotService->MakeClient();
		ECSStateSnapshotServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallECSStateSnapshotServiceGetStateLatest::OnContextStateChange);
		ECSStateSnapshotServiceClient->OnGetStateLatestResponse.AddUniqueDynamic(this, &UCallECSStateSnapshotServiceGetStateLatest::OnResponse);

		Context = ECSStateSnapshotServiceClient->InitGetStateLatest();
		ECSStateSnapshotServiceClient->GetStateLatest(Context, Request);
	}
}

void UCallECSStateSnapshotServiceGetStateLatest::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallECSStateSnapshotServiceGetStateLatest::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcEcssnapshotECSStateReply& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallECSStateSnapshotServiceGetStateLatest::Shutdown()
{
	ECSStateSnapshotService->OnServiceStateChanged.RemoveDynamic(this, &UCallECSStateSnapshotServiceGetStateLatest::OnServiceStateChanged);
	if (ECSStateSnapshotServiceClient != nullptr)
	{
		ECSStateSnapshotService->RemoveClient(ECSStateSnapshotServiceClient);
		ECSStateSnapshotServiceClient->Shutdown();
		ECSStateSnapshotServiceClient = nullptr;
	}

	if (ECSStateSnapshotService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ECSStateSnapshotService);
		ECSStateSnapshotService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallECSStateSnapshotServiceGetStateBlockLatest* UCallECSStateSnapshotServiceGetStateBlockLatest::GetStateBlockLatest(UObject* WorldContextObject, const FGrpcEcssnapshotECSStateBlockRequestLatest& Request)
{
	UCallECSStateSnapshotServiceGetStateBlockLatest* node = NewObject<UCallECSStateSnapshotServiceGetStateBlockLatest>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ECSStateSnapshotService = Cast<UECSStateSnapshotService>(turboLinkManager->MakeService("ECSStateSnapshotService"));
	if (node->ECSStateSnapshotService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->ECSStateSnapshotService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallECSStateSnapshotServiceGetStateBlockLatest::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->ECSStateSnapshotService->Connect();
	}));
	return node;
}

void UCallECSStateSnapshotServiceGetStateBlockLatest::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcEcssnapshotECSStateBlockReply response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ECSStateSnapshotServiceClient = ECSStateSnapshotService->MakeClient();
		ECSStateSnapshotServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallECSStateSnapshotServiceGetStateBlockLatest::OnContextStateChange);
		ECSStateSnapshotServiceClient->OnGetStateBlockLatestResponse.AddUniqueDynamic(this, &UCallECSStateSnapshotServiceGetStateBlockLatest::OnResponse);

		Context = ECSStateSnapshotServiceClient->InitGetStateBlockLatest();
		ECSStateSnapshotServiceClient->GetStateBlockLatest(Context, Request);
	}
}

void UCallECSStateSnapshotServiceGetStateBlockLatest::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallECSStateSnapshotServiceGetStateBlockLatest::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcEcssnapshotECSStateBlockReply& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallECSStateSnapshotServiceGetStateBlockLatest::Shutdown()
{
	ECSStateSnapshotService->OnServiceStateChanged.RemoveDynamic(this, &UCallECSStateSnapshotServiceGetStateBlockLatest::OnServiceStateChanged);
	if (ECSStateSnapshotServiceClient != nullptr)
	{
		ECSStateSnapshotService->RemoveClient(ECSStateSnapshotServiceClient);
		ECSStateSnapshotServiceClient->Shutdown();
		ECSStateSnapshotServiceClient = nullptr;
	}

	if (ECSStateSnapshotService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ECSStateSnapshotService);
		ECSStateSnapshotService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallECSStateSnapshotServiceGetStateAtBlock* UCallECSStateSnapshotServiceGetStateAtBlock::GetStateAtBlock(UObject* WorldContextObject, const FGrpcEcssnapshotECSStateRequestAtBlock& Request)
{
	UCallECSStateSnapshotServiceGetStateAtBlock* node = NewObject<UCallECSStateSnapshotServiceGetStateAtBlock>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ECSStateSnapshotService = Cast<UECSStateSnapshotService>(turboLinkManager->MakeService("ECSStateSnapshotService"));
	if (node->ECSStateSnapshotService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->ECSStateSnapshotService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallECSStateSnapshotServiceGetStateAtBlock::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->ECSStateSnapshotService->Connect();
	}));
	return node;
}

void UCallECSStateSnapshotServiceGetStateAtBlock::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcEcssnapshotECSStateReply response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ECSStateSnapshotServiceClient = ECSStateSnapshotService->MakeClient();
		ECSStateSnapshotServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallECSStateSnapshotServiceGetStateAtBlock::OnContextStateChange);
		ECSStateSnapshotServiceClient->OnGetStateAtBlockResponse.AddUniqueDynamic(this, &UCallECSStateSnapshotServiceGetStateAtBlock::OnResponse);

		Context = ECSStateSnapshotServiceClient->InitGetStateAtBlock();
		ECSStateSnapshotServiceClient->GetStateAtBlock(Context, Request);
	}
}

void UCallECSStateSnapshotServiceGetStateAtBlock::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallECSStateSnapshotServiceGetStateAtBlock::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcEcssnapshotECSStateReply& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallECSStateSnapshotServiceGetStateAtBlock::Shutdown()
{
	ECSStateSnapshotService->OnServiceStateChanged.RemoveDynamic(this, &UCallECSStateSnapshotServiceGetStateAtBlock::OnServiceStateChanged);
	if (ECSStateSnapshotServiceClient != nullptr)
	{
		ECSStateSnapshotService->RemoveClient(ECSStateSnapshotServiceClient);
		ECSStateSnapshotServiceClient->Shutdown();
		ECSStateSnapshotServiceClient = nullptr;
	}

	if (ECSStateSnapshotService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ECSStateSnapshotService);
		ECSStateSnapshotService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallECSStateSnapshotServiceGetWorlds* UCallECSStateSnapshotServiceGetWorlds::GetWorlds(UObject* WorldContextObject, const FGrpcEcssnapshotWorldsRequest& Request)
{
	UCallECSStateSnapshotServiceGetWorlds* node = NewObject<UCallECSStateSnapshotServiceGetWorlds>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ECSStateSnapshotService = Cast<UECSStateSnapshotService>(turboLinkManager->MakeService("ECSStateSnapshotService"));
	if (node->ECSStateSnapshotService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;

	node->ECSStateSnapshotService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallECSStateSnapshotServiceGetWorlds::OnServiceStateChanged);
	WorldContextObject->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateLambda([node]() {
		node->ECSStateSnapshotService->Connect();
	}));
	return node;
}

void UCallECSStateSnapshotServiceGetWorlds::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcEcssnapshotWorlds response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ECSStateSnapshotServiceClient = ECSStateSnapshotService->MakeClient();
		ECSStateSnapshotServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallECSStateSnapshotServiceGetWorlds::OnContextStateChange);
		ECSStateSnapshotServiceClient->OnGetWorldsResponse.AddUniqueDynamic(this, &UCallECSStateSnapshotServiceGetWorlds::OnResponse);

		Context = ECSStateSnapshotServiceClient->InitGetWorlds();
		ECSStateSnapshotServiceClient->GetWorlds(Context, Request);
	}
}

void UCallECSStateSnapshotServiceGetWorlds::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallECSStateSnapshotServiceGetWorlds::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcEcssnapshotWorlds& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSuccess.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallECSStateSnapshotServiceGetWorlds::Shutdown()
{
	ECSStateSnapshotService->OnServiceStateChanged.RemoveDynamic(this, &UCallECSStateSnapshotServiceGetWorlds::OnServiceStateChanged);
	if (ECSStateSnapshotServiceClient != nullptr)
	{
		ECSStateSnapshotService->RemoveClient(ECSStateSnapshotServiceClient);
		ECSStateSnapshotServiceClient->Shutdown();
		ECSStateSnapshotServiceClient = nullptr;
	}

	if (ECSStateSnapshotService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ECSStateSnapshotService);
		ECSStateSnapshotService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
