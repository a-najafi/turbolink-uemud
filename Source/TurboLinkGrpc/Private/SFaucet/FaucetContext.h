//Generated by TurboLink CodeGenerator, do not edit!
#pragma once
#include "TurboLinkGrpcContext.h"
#include "SFaucet/FaucetMessage.h"
#include "SFaucet/FaucetMarshaling.h"
class GrpcContext_FaucetService_Drip : public GrpcContext_Ping_Pong<FaucetService_Drip_ReaderWriter, ::faucet::DripResponse>
{
	friend class UFaucetServiceClient;
	typedef GrpcContext_Ping_Pong<FaucetService_Drip_ReaderWriter, ::faucet::DripResponse> Super;

private:
	void Call(const FGrpcFaucetDripRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_FaucetService_Drip(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_FaucetService_DripDev : public GrpcContext_Ping_Pong<FaucetService_DripDev_ReaderWriter, ::faucet::DripResponse>
{
	friend class UFaucetServiceClient;
	typedef GrpcContext_Ping_Pong<FaucetService_DripDev_ReaderWriter, ::faucet::DripResponse> Super;

private:
	void Call(const FGrpcFaucetDripDevRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_FaucetService_DripDev(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_FaucetService_DripVerifyTweet : public GrpcContext_Ping_Pong<FaucetService_DripVerifyTweet_ReaderWriter, ::faucet::DripResponse>
{
	friend class UFaucetServiceClient;
	typedef GrpcContext_Ping_Pong<FaucetService_DripVerifyTweet_ReaderWriter, ::faucet::DripResponse> Super;

private:
	void Call(const FGrpcFaucetDripRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_FaucetService_DripVerifyTweet(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_FaucetService_TimeUntilDrip : public GrpcContext_Ping_Pong<FaucetService_TimeUntilDrip_ReaderWriter, ::faucet::TimeUntilDripResponse>
{
	friend class UFaucetServiceClient;
	typedef GrpcContext_Ping_Pong<FaucetService_TimeUntilDrip_ReaderWriter, ::faucet::TimeUntilDripResponse> Super;

private:
	void Call(const FGrpcFaucetDripRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_FaucetService_TimeUntilDrip(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_FaucetService_GetLinkedTwitters : public GrpcContext_Ping_Pong<FaucetService_GetLinkedTwitters_ReaderWriter, ::faucet::GetLinkedTwittersResponse>
{
	friend class UFaucetServiceClient;
	typedef GrpcContext_Ping_Pong<FaucetService_GetLinkedTwitters_ReaderWriter, ::faucet::GetLinkedTwittersResponse> Super;

private:
	void Call(const FGrpcFaucetGetLinkedTwittersRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_FaucetService_GetLinkedTwitters(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_FaucetService_GetLinkedTwitterForAddress : public GrpcContext_Ping_Pong<FaucetService_GetLinkedTwitterForAddress_ReaderWriter, ::faucet::LinkedTwitterForAddressResponse>
{
	friend class UFaucetServiceClient;
	typedef GrpcContext_Ping_Pong<FaucetService_GetLinkedTwitterForAddress_ReaderWriter, ::faucet::LinkedTwitterForAddressResponse> Super;

private:
	void Call(const FGrpcFaucetLinkedTwitterForAddressRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_FaucetService_GetLinkedTwitterForAddress(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_FaucetService_GetLinkedAddressForTwitter : public GrpcContext_Ping_Pong<FaucetService_GetLinkedAddressForTwitter_ReaderWriter, ::faucet::LinkedAddressForTwitterResponse>
{
	friend class UFaucetServiceClient;
	typedef GrpcContext_Ping_Pong<FaucetService_GetLinkedAddressForTwitter_ReaderWriter, ::faucet::LinkedAddressForTwitterResponse> Super;

private:
	void Call(const FGrpcFaucetLinkedAddressForTwitterRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_FaucetService_GetLinkedAddressForTwitter(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

class GrpcContext_FaucetService_SetLinkedTwitter : public GrpcContext_Ping_Pong<FaucetService_SetLinkedTwitter_ReaderWriter, ::faucet::SetLinkedTwitterResponse>
{
	friend class UFaucetServiceClient;
	typedef GrpcContext_Ping_Pong<FaucetService_SetLinkedTwitter_ReaderWriter, ::faucet::SetLinkedTwitterResponse> Super;

private:
	void Call(const FGrpcFaucetSetLinkedTwitterRequest& Request);
	virtual void OnRpcEvent(bool Ok, const void* EventTag) override;

public:
	GrpcContext_FaucetService_SetLinkedTwitter(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client);
};

