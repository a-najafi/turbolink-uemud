//Generated by TurboLink CodeGenerator, do not edit!
#include "ModeMarshaling.h"

void GRPC_TO_TURBOLINK(const ::mode::Row* in, FGrpcModeRow* out)
{
    out->Values.Empty();
    for (int i=0; i<in->values_size(); ++i) {
        out->Values.Add(FBytes((const uint8*)in->values(i).c_str(), in->values(i).length()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcModeRow* in, ::mode::Row* out)
{
    for(const auto& value : in->Values) {
        out->add_values(std::string((const char*)(value.Value.GetData()), (size_t)value.Value.Num()));
    } 
}

void GRPC_TO_TURBOLINK(const ::mode::GenericTable* in, FGrpcModeGenericTable* out)
{
    out->Cols.Empty();
    for (int i=0; i<in->cols_size(); ++i) {
        out->Cols.Add(UTF8_TO_TCHAR(in->cols(i).c_str()));
    }
    out->Rows.Empty();
    for (int i=0; i<in->rows_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->rows(i)), &(out->Rows.AddZeroed_GetRef()));
    }
    out->Types.Empty();
    for (int i=0; i<in->types_size(); ++i) {
        out->Types.Add(UTF8_TO_TCHAR(in->types(i).c_str()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcModeGenericTable* in, ::mode::GenericTable* out)
{
    for(const auto& value : in->Cols) {
        out->add_cols(TCHAR_TO_UTF8(*(value)));
    } 
    for(const auto& value : in->Rows) {
        TURBOLINK_TO_GRPC(&value, out->add_rows());
    } 
    for(const auto& value : in->Types) {
        out->add_types(TCHAR_TO_UTF8(*(value)));
    } 
}

void GRPC_TO_TURBOLINK(const ::mode::QueryLayerResponse* in, FGrpcModeQueryLayerResponse* out)
{
    out->Tables.Empty();
    for (const auto& item : in->tables()) {
        auto& value = out->Tables.Add(UTF8_TO_TCHAR(item.first.c_str()));
        GRPC_TO_TURBOLINK(&item.second, &value);
    }
}

void TURBOLINK_TO_GRPC(const FGrpcModeQueryLayerResponse* in, ::mode::QueryLayerResponse* out)
{
    for (const auto& item : in->Tables) {
        ::mode::GenericTable value;
        TURBOLINK_TO_GRPC(&item.Value, &value);
        (*(out->mutable_tables()))[TCHAR_TO_UTF8(*(item.Key))] = value;
    }
}

void GRPC_TO_TURBOLINK(const ::mode::QueryLayerStateResponse* in, FGrpcModeQueryLayerStateResponse* out)
{
    out->ChainTables.Empty();
    for (const auto& item : in->chaintables()) {
        auto& value = out->ChainTables.Add(UTF8_TO_TCHAR(item.first.c_str()));
        GRPC_TO_TURBOLINK(&item.second, &value);
    }
    out->WorldTables.Empty();
    for (const auto& item : in->worldtables()) {
        auto& value = out->WorldTables.Add(UTF8_TO_TCHAR(item.first.c_str()));
        GRPC_TO_TURBOLINK(&item.second, &value);
    }
}

void TURBOLINK_TO_GRPC(const FGrpcModeQueryLayerStateResponse* in, ::mode::QueryLayerStateResponse* out)
{
    for (const auto& item : in->ChainTables) {
        ::mode::GenericTable value;
        TURBOLINK_TO_GRPC(&item.Value, &value);
        (*(out->mutable_chaintables()))[TCHAR_TO_UTF8(*(item.Key))] = value;
    }
    for (const auto& item : in->WorldTables) {
        ::mode::GenericTable value;
        TURBOLINK_TO_GRPC(&item.Value, &value);
        (*(out->mutable_worldtables()))[TCHAR_TO_UTF8(*(item.Key))] = value;
    }
}

void GRPC_TO_TURBOLINK(const ::mode::QueryLayerStateStreamResponse* in, FGrpcModeQueryLayerStateStreamResponse* out)
{
    GRPC_TO_TURBOLINK(&(in->inserted()), &(out->Inserted));
    GRPC_TO_TURBOLINK(&(in->updated()), &(out->Updated));
    GRPC_TO_TURBOLINK(&(in->deleted()), &(out->Deleted));
}

void TURBOLINK_TO_GRPC(const FGrpcModeQueryLayerStateStreamResponse* in, ::mode::QueryLayerStateStreamResponse* out)
{
    TURBOLINK_TO_GRPC(&(in->Inserted), out->mutable_inserted());
    TURBOLINK_TO_GRPC(&(in->Updated), out->mutable_updated());
    TURBOLINK_TO_GRPC(&(in->Deleted), out->mutable_deleted());
}

void GRPC_TO_TURBOLINK(const ::mode::Namespace* in, FGrpcModeNamespace* out)
{
    out->ChainId=UTF8_TO_TCHAR(in->chainid().c_str());
    out->WorldAddress=UTF8_TO_TCHAR(in->worldaddress().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcModeNamespace* in, ::mode::Namespace* out)
{
    out->set_chainid(TCHAR_TO_UTF8(*(in->ChainId)));
    out->set_worldaddress(TCHAR_TO_UTF8(*(in->WorldAddress)));
}

void GRPC_TO_TURBOLINK(const ::mode::StateRequest* in, FGrpcModeStateRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->namespace_()), &(out->Namespace));
    out->WorldTables.Empty();
    for (int i=0; i<in->worldtables_size(); ++i) {
        out->WorldTables.Add(UTF8_TO_TCHAR(in->worldtables(i).c_str()));
    }
    out->ChainTables.Empty();
    for (int i=0; i<in->chaintables_size(); ++i) {
        out->ChainTables.Add(UTF8_TO_TCHAR(in->chaintables(i).c_str()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcModeStateRequest* in, ::mode::StateRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Namespace), out->mutable_namespace_());
    for(const auto& value : in->WorldTables) {
        out->add_worldtables(TCHAR_TO_UTF8(*(value)));
    } 
    for(const auto& value : in->ChainTables) {
        out->add_chaintables(TCHAR_TO_UTF8(*(value)));
    } 
}

void GRPC_TO_TURBOLINK(const ::mode::Single__StateRequest* in, FGrpcModeSingle__StateRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->namespace_()), &(out->Namespace));
    out->Table=UTF8_TO_TCHAR(in->table().c_str());
    out->Filter.Empty();
    for (int i=0; i<in->filter_size(); ++i) {
        FGrpcModeFilter field;
        GRPC_TO_TURBOLINK(&(in->filter(i)), &field);
        out->Filter.Add(MakeShareable(new FGrpcModeFilter(field)));
    }
    out->Project.Empty();
    for (int i=0; i<in->project_size(); ++i) {
        FGrpcModeProjectedField field;
        GRPC_TO_TURBOLINK(&(in->project(i)), &field);
        out->Project.Add(MakeShareable(new FGrpcModeProjectedField(field)));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcModeSingle__StateRequest* in, ::mode::Single__StateRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Namespace), out->mutable_namespace_());
    out->set_table(TCHAR_TO_UTF8(*(in->Table)));
    for(const auto& value : in->Filter) {
        TURBOLINK_TO_GRPC(value.Get(), out->add_filter());
    } 
    for(const auto& value : in->Project) {
        TURBOLINK_TO_GRPC(value.Get(), out->add_project());
    } 
}

void GRPC_TO_TURBOLINK(const ::mode::FindRequest* in, FGrpcModeFindRequest* out)
{
    out->From=UTF8_TO_TCHAR(in->from().c_str());
    out->Filter.Empty();
    for (int i=0; i<in->filter_size(); ++i) {
        FGrpcModeFilter field;
        GRPC_TO_TURBOLINK(&(in->filter(i)), &field);
        out->Filter.Add(MakeShareable(new FGrpcModeFilter(field)));
    }
    out->Project.Empty();
    for (int i=0; i<in->project_size(); ++i) {
        FGrpcModeProjectedField field;
        GRPC_TO_TURBOLINK(&(in->project(i)), &field);
        out->Project.Add(MakeShareable(new FGrpcModeProjectedField(field)));
    }
    GRPC_TO_TURBOLINK(&(in->namespace_()), &(out->Namespace));
    {
        FGrpcModeFindRequestOptions field;
        GRPC_TO_TURBOLINK(&(in->options()), &field);
        out->Options = MakeShareable(new FGrpcModeFindRequestOptions(field));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcModeFindRequest* in, ::mode::FindRequest* out)
{
    out->set_from(TCHAR_TO_UTF8(*(in->From)));
    for(const auto& value : in->Filter) {
        TURBOLINK_TO_GRPC(value.Get(), out->add_filter());
    } 
    for(const auto& value : in->Project) {
        TURBOLINK_TO_GRPC(value.Get(), out->add_project());
    } 
    TURBOLINK_TO_GRPC(&(in->Namespace), out->mutable_namespace_());
    TURBOLINK_TO_GRPC(in->Options.Get(), out->mutable_options());
}

void GRPC_TO_TURBOLINK(const ::mode::FindAllRequest* in, FGrpcModeFindAllRequest* out)
{
    out->Tables.Empty();
    for (int i=0; i<in->tables_size(); ++i) {
        out->Tables.Add(UTF8_TO_TCHAR(in->tables(i).c_str()));
    }
    GRPC_TO_TURBOLINK(&(in->namespace_()), &(out->Namespace));
    {
        FGrpcModeFindRequestOptions field;
        GRPC_TO_TURBOLINK(&(in->options()), &field);
        out->Options = MakeShareable(new FGrpcModeFindRequestOptions(field));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcModeFindAllRequest* in, ::mode::FindAllRequest* out)
{
    for(const auto& value : in->Tables) {
        out->add_tables(TCHAR_TO_UTF8(*(value)));
    } 
    TURBOLINK_TO_GRPC(&(in->Namespace), out->mutable_namespace_());
    TURBOLINK_TO_GRPC(in->Options.Get(), out->mutable_options());
}

void GRPC_TO_TURBOLINK(const ::mode::JoinRequest* in, FGrpcModeJoinRequest* out)
{
    {
        FGrpcModeFieldPair field;
        GRPC_TO_TURBOLINK(&(in->on()), &field);
        out->On = MakeShareable(new FGrpcModeFieldPair(field));
    }
    out->Children.Empty();
    for (int i=0; i<in->children_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->children(i)), &(out->Children.AddZeroed_GetRef()));
    }
    GRPC_TO_TURBOLINK(&(in->namespace_()), &(out->Namespace));
}

void TURBOLINK_TO_GRPC(const FGrpcModeJoinRequest* in, ::mode::JoinRequest* out)
{
    TURBOLINK_TO_GRPC(in->On.Get(), out->mutable_on());
    for(const auto& value : in->Children) {
        TURBOLINK_TO_GRPC(&value, out->add_children());
    } 
    TURBOLINK_TO_GRPC(&(in->Namespace), out->mutable_namespace_());
}

void GRPC_TO_TURBOLINK(const ::mode::DeleteRequest* in, FGrpcModeDeleteRequest* out)
{
    out->From=UTF8_TO_TCHAR(in->from().c_str());
    out->Filter.Empty();
    for (int i=0; i<in->filter_size(); ++i) {
        FGrpcModeFilter field;
        GRPC_TO_TURBOLINK(&(in->filter(i)), &field);
        out->Filter.Add(MakeShareable(new FGrpcModeFilter(field)));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcModeDeleteRequest* in, ::mode::DeleteRequest* out)
{
    out->set_from(TCHAR_TO_UTF8(*(in->From)));
    for(const auto& value : in->Filter) {
        TURBOLINK_TO_GRPC(value.Get(), out->add_filter());
    } 
}

void GRPC_TO_TURBOLINK(const ::mode::UpdateRequest* in, FGrpcModeUpdateRequest* out)
{
    out->Target=UTF8_TO_TCHAR(in->target().c_str());
    out->Filter.Empty();
    for (int i=0; i<in->filter_size(); ++i) {
        FGrpcModeFilter field;
        GRPC_TO_TURBOLINK(&(in->filter(i)), &field);
        out->Filter.Add(MakeShareable(new FGrpcModeFilter(field)));
    }
    out->Row.Empty();
    for (const auto& item : in->row()) {
        auto& value = out->Row.Add(UTF8_TO_TCHAR(item.first.c_str()));
        value = UTF8_TO_TCHAR(item.second.c_str());
    }
}

void TURBOLINK_TO_GRPC(const FGrpcModeUpdateRequest* in, ::mode::UpdateRequest* out)
{
    out->set_target(TCHAR_TO_UTF8(*(in->Target)));
    for(const auto& value : in->Filter) {
        TURBOLINK_TO_GRPC(value.Get(), out->add_filter());
    } 
    for (const auto& item : in->Row) {
        (*(out->mutable_row()))[TCHAR_TO_UTF8(*(item.Key))] = TCHAR_TO_UTF8(*(item.Value));
    }
}

void GRPC_TO_TURBOLINK(const ::mode::InsertRequest* in, FGrpcModeInsertRequest* out)
{
    out->Into=UTF8_TO_TCHAR(in->into().c_str());
    out->Row.Empty();
    for (const auto& item : in->row()) {
        auto& value = out->Row.Add(UTF8_TO_TCHAR(item.first.c_str()));
        value = UTF8_TO_TCHAR(item.second.c_str());
    }
}

void TURBOLINK_TO_GRPC(const FGrpcModeInsertRequest* in, ::mode::InsertRequest* out)
{
    out->set_into(TCHAR_TO_UTF8(*(in->Into)));
    for (const auto& item : in->Row) {
        (*(out->mutable_row()))[TCHAR_TO_UTF8(*(item.Key))] = TCHAR_TO_UTF8(*(item.Value));
    }
}

void GRPC_TO_TURBOLINK(const ::mode::CreateRequest* in, FGrpcModeCreateRequest* out)
{
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcModeCreateRequest* in, ::mode::CreateRequest* out)
{
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
}

void GRPC_TO_TURBOLINK(const ::mode::FindRequestOptions* in, FGrpcModeFindRequestOptions* out)
{
    out->Compressed=in->compressed();
    out->Group=in->group();
    out->Negate=in->negate();
}

void TURBOLINK_TO_GRPC(const FGrpcModeFindRequestOptions* in, ::mode::FindRequestOptions* out)
{
    out->set_compressed(in->Compressed);
    out->set_group(in->Group);
    out->set_negate(in->Negate);
}

void GRPC_TO_TURBOLINK(const ::mode::Field* in, FGrpcModeField* out)
{
    out->TableName=UTF8_TO_TCHAR(in->table_name().c_str());
    out->TableField=UTF8_TO_TCHAR(in->table_field().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcModeField* in, ::mode::Field* out)
{
    out->set_table_name(TCHAR_TO_UTF8(*(in->TableName)));
    out->set_table_field(TCHAR_TO_UTF8(*(in->TableField)));
}

void GRPC_TO_TURBOLINK(const ::mode::FieldPair* in, FGrpcModeFieldPair* out)
{
    GRPC_TO_TURBOLINK(&(in->field1()), &(out->Field1));
    GRPC_TO_TURBOLINK(&(in->field2()), &(out->Field2));
}

void TURBOLINK_TO_GRPC(const FGrpcModeFieldPair* in, ::mode::FieldPair* out)
{
    TURBOLINK_TO_GRPC(&(in->Field1), out->mutable_field1());
    TURBOLINK_TO_GRPC(&(in->Field2), out->mutable_field2());
}

void GRPC_TO_TURBOLINK(const ::mode::ProjectedField* in, FGrpcModeProjectedField* out)
{
    GRPC_TO_TURBOLINK(&(in->field()), &(out->Field));
    switch(in->_rename_case())
    {
    case ::mode::ProjectedField::kRename:
        out->_rename.Rename=UTF8_TO_TCHAR(in->rename().c_str());
        out->_rename._renameCase = EGrpcModeProjectedField_rename::Rename;
        break;
    }
}

void TURBOLINK_TO_GRPC(const FGrpcModeProjectedField* in, ::mode::ProjectedField* out)
{
    TURBOLINK_TO_GRPC(&(in->Field), out->mutable_field());
    switch (in->_rename._renameCase)
    {
    case EGrpcModeProjectedField_rename::Rename:
        out->set_rename(TCHAR_TO_UTF8(*(in->_rename.Rename)));
        break;
    }
}

void GRPC_TO_TURBOLINK(const ::mode::Filter* in, FGrpcModeFilter* out)
{
    GRPC_TO_TURBOLINK(&(in->field()), &(out->Field));
    out->Operator=UTF8_TO_TCHAR(in->operator_().c_str());
    out->Value=UTF8_TO_TCHAR(in->value().c_str());
    out->Function=UTF8_TO_TCHAR(in->function().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcModeFilter* in, ::mode::Filter* out)
{
    TURBOLINK_TO_GRPC(&(in->Field), out->mutable_field());
    out->set_operator_(TCHAR_TO_UTF8(*(in->Operator)));
    out->set_value(TCHAR_TO_UTF8(*(in->Value)));
    out->set_function(TCHAR_TO_UTF8(*(in->Function)));
}

