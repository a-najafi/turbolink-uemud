#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ecs_snapshot.proto

#include "ecs_snapshot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ecssnapshot {
constexpr ECSState::ECSState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , component_id_idx_(0u)
  , entity_id_idx_(0u){}
struct ECSStateDefaultTypeInternal {
  constexpr ECSStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECSStateDefaultTypeInternal() {}
  union {
    ECSState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECSStateDefaultTypeInternal _ECSState_default_instance_;
constexpr ECSStateSnapshot::ECSStateSnapshot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_()
  , statecomponents_()
  , stateentities_()
  , statehash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , worldaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , startblocknumber_(0u)
  , endblocknumber_(0u){}
struct ECSStateSnapshotDefaultTypeInternal {
  constexpr ECSStateSnapshotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECSStateSnapshotDefaultTypeInternal() {}
  union {
    ECSStateSnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECSStateSnapshotDefaultTypeInternal _ECSStateSnapshot_default_instance_;
constexpr Worlds::Worlds(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldaddress_(){}
struct WorldsDefaultTypeInternal {
  constexpr WorldsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorldsDefaultTypeInternal() {}
  union {
    Worlds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorldsDefaultTypeInternal _Worlds_default_instance_;
constexpr ECSStateRequestLatest::ECSStateRequestLatest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ECSStateRequestLatestDefaultTypeInternal {
  constexpr ECSStateRequestLatestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECSStateRequestLatestDefaultTypeInternal() {}
  union {
    ECSStateRequestLatest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECSStateRequestLatestDefaultTypeInternal _ECSStateRequestLatest_default_instance_;
constexpr ECSStateRequestLatestStreamPruned::ECSStateRequestLatestStreamPruned(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pruneaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , prunecomponentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chunkpercentage_(0u){}
struct ECSStateRequestLatestStreamPrunedDefaultTypeInternal {
  constexpr ECSStateRequestLatestStreamPrunedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECSStateRequestLatestStreamPrunedDefaultTypeInternal() {}
  union {
    ECSStateRequestLatestStreamPruned _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECSStateRequestLatestStreamPrunedDefaultTypeInternal _ECSStateRequestLatestStreamPruned_default_instance_;
constexpr ECSStateRequestLatestStream::ECSStateRequestLatestStream(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chunkpercentage_(0u){}
struct ECSStateRequestLatestStreamDefaultTypeInternal {
  constexpr ECSStateRequestLatestStreamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECSStateRequestLatestStreamDefaultTypeInternal() {}
  union {
    ECSStateRequestLatestStream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECSStateRequestLatestStreamDefaultTypeInternal _ECSStateRequestLatestStream_default_instance_;
constexpr ECSStateBlockRequestLatest::ECSStateBlockRequestLatest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ECSStateBlockRequestLatestDefaultTypeInternal {
  constexpr ECSStateBlockRequestLatestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECSStateBlockRequestLatestDefaultTypeInternal() {}
  union {
    ECSStateBlockRequestLatest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECSStateBlockRequestLatestDefaultTypeInternal _ECSStateBlockRequestLatest_default_instance_;
constexpr ECSStateRequestAtBlock::ECSStateRequestAtBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blocknumber_(uint64_t{0u}){}
struct ECSStateRequestAtBlockDefaultTypeInternal {
  constexpr ECSStateRequestAtBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECSStateRequestAtBlockDefaultTypeInternal() {}
  union {
    ECSStateRequestAtBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECSStateRequestAtBlockDefaultTypeInternal _ECSStateRequestAtBlock_default_instance_;
constexpr WorldsRequest::WorldsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WorldsRequestDefaultTypeInternal {
  constexpr WorldsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorldsRequestDefaultTypeInternal() {}
  union {
    WorldsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorldsRequestDefaultTypeInternal _WorldsRequest_default_instance_;
constexpr ECSStateReply::ECSStateReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_()
  , statecomponents_()
  , stateentities_()
  , statehash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , blocknumber_(0u){}
struct ECSStateReplyDefaultTypeInternal {
  constexpr ECSStateReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECSStateReplyDefaultTypeInternal() {}
  union {
    ECSStateReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECSStateReplyDefaultTypeInternal _ECSStateReply_default_instance_;
constexpr ECSStateReplyV2::ECSStateReplyV2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_()
  , statecomponents_()
  , stateentities_()
  , statehash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , blocknumber_(0u){}
struct ECSStateReplyV2DefaultTypeInternal {
  constexpr ECSStateReplyV2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECSStateReplyV2DefaultTypeInternal() {}
  union {
    ECSStateReplyV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECSStateReplyV2DefaultTypeInternal _ECSStateReplyV2_default_instance_;
constexpr ECSStateBlockReply::ECSStateBlockReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blocknumber_(0u){}
struct ECSStateBlockReplyDefaultTypeInternal {
  constexpr ECSStateBlockReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ECSStateBlockReplyDefaultTypeInternal() {}
  union {
    ECSStateBlockReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ECSStateBlockReplyDefaultTypeInternal _ECSStateBlockReply_default_instance_;
}  // namespace ecssnapshot
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ecs_5fsnapshot_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ecs_5fsnapshot_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ecs_5fsnapshot_2eproto = nullptr;

const uint32_t TableStruct_ecs_5fsnapshot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSState, component_id_idx_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSState, entity_id_idx_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSState, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateSnapshot, state_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateSnapshot, statecomponents_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateSnapshot, stateentities_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateSnapshot, statehash_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateSnapshot, startblocknumber_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateSnapshot, endblocknumber_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateSnapshot, worldaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::Worlds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::Worlds, worldaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateRequestLatest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateRequestLatest, worldaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateRequestLatestStreamPruned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateRequestLatestStreamPruned, worldaddress_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateRequestLatestStreamPruned, pruneaddress_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateRequestLatestStreamPruned, prunecomponentid_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateRequestLatestStreamPruned, chunkpercentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateRequestLatestStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateRequestLatestStream, worldaddress_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateRequestLatestStream, chunkpercentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateBlockRequestLatest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateBlockRequestLatest, worldaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateRequestAtBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateRequestAtBlock, blocknumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::WorldsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateReply, state_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateReply, statecomponents_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateReply, stateentities_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateReply, statehash_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateReply, blocknumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateReplyV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateReplyV2, state_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateReplyV2, statecomponents_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateReplyV2, stateentities_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateReplyV2, statehash_),
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateReplyV2, blocknumber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateBlockReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ecssnapshot::ECSStateBlockReply, blocknumber_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ecssnapshot::ECSState)},
  { 9, -1, -1, sizeof(::ecssnapshot::ECSStateSnapshot)},
  { 22, -1, -1, sizeof(::ecssnapshot::Worlds)},
  { 29, -1, -1, sizeof(::ecssnapshot::ECSStateRequestLatest)},
  { 36, -1, -1, sizeof(::ecssnapshot::ECSStateRequestLatestStreamPruned)},
  { 46, -1, -1, sizeof(::ecssnapshot::ECSStateRequestLatestStream)},
  { 54, -1, -1, sizeof(::ecssnapshot::ECSStateBlockRequestLatest)},
  { 61, -1, -1, sizeof(::ecssnapshot::ECSStateRequestAtBlock)},
  { 68, -1, -1, sizeof(::ecssnapshot::WorldsRequest)},
  { 74, -1, -1, sizeof(::ecssnapshot::ECSStateReply)},
  { 85, -1, -1, sizeof(::ecssnapshot::ECSStateReplyV2)},
  { 96, -1, -1, sizeof(::ecssnapshot::ECSStateBlockReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecssnapshot::_ECSState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecssnapshot::_ECSStateSnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecssnapshot::_Worlds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecssnapshot::_ECSStateRequestLatest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecssnapshot::_ECSStateRequestLatestStreamPruned_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecssnapshot::_ECSStateRequestLatestStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecssnapshot::_ECSStateBlockRequestLatest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecssnapshot::_ECSStateRequestAtBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecssnapshot::_WorldsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecssnapshot::_ECSStateReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecssnapshot::_ECSStateReplyV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ecssnapshot::_ECSStateBlockReply_default_instance_),
};

const char descriptor_table_protodef_ecs_5fsnapshot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022ecs_snapshot.proto\022\013ecssnapshot\"J\n\010ECS"
  "State\022\030\n\020component_id_idx\030\001 \001(\r\022\025\n\rentit"
  "y_id_idx\030\002 \001(\r\022\r\n\005value\030\003 \001(\014\"\303\001\n\020ECSSta"
  "teSnapshot\022$\n\005state\030\001 \003(\0132\025.ecssnapshot."
  "ECSState\022\027\n\017stateComponents\030\002 \003(\t\022\025\n\rsta"
  "teEntities\030\003 \003(\t\022\021\n\tstateHash\030\004 \001(\t\022\030\n\020s"
  "tartBlockNumber\030\005 \001(\r\022\026\n\016endBlockNumber\030"
  "\006 \001(\r\022\024\n\014worldAddress\030\007 \001(\t\"\036\n\006Worlds\022\024\n"
  "\014worldAddress\030\001 \003(\t\"-\n\025ECSStateRequestLa"
  "test\022\024\n\014worldAddress\030\001 \001(\t\"\202\001\n!ECSStateR"
  "equestLatestStreamPruned\022\024\n\014worldAddress"
  "\030\001 \001(\t\022\024\n\014pruneAddress\030\002 \001(\t\022\030\n\020pruneCom"
  "ponentId\030\003 \001(\t\022\027\n\017chunkPercentage\030\004 \001(\r\""
  "L\n\033ECSStateRequestLatestStream\022\024\n\014worldA"
  "ddress\030\001 \001(\t\022\027\n\017chunkPercentage\030\002 \001(\r\"2\n"
  "\032ECSStateBlockRequestLatest\022\024\n\014worldAddr"
  "ess\030\001 \001(\t\"-\n\026ECSStateRequestAtBlock\022\023\n\013b"
  "lockNumber\030\001 \001(\004\"\017\n\rWorldsRequest\"\215\001\n\rEC"
  "SStateReply\022$\n\005state\030\001 \003(\0132\025.ecssnapshot"
  ".ECSState\022\027\n\017stateComponents\030\002 \003(\t\022\025\n\rst"
  "ateEntities\030\003 \003(\t\022\021\n\tstateHash\030\004 \001(\t\022\023\n\013"
  "blockNumber\030\005 \001(\r\"\217\001\n\017ECSStateReplyV2\022$\n"
  "\005state\030\001 \003(\0132\025.ecssnapshot.ECSState\022\027\n\017s"
  "tateComponents\030\002 \003(\t\022\025\n\rstateEntities\030\003 "
  "\003(\014\022\021\n\tstateHash\030\004 \001(\t\022\023\n\013blockNumber\030\005 "
  "\001(\r\")\n\022ECSStateBlockReply\022\023\n\013blockNumber"
  "\030\001 \001(\r2\216\006\n\027ECSStateSnapshotService\022R\n\016Ge"
  "tStateLatest\022\".ecssnapshot.ECSStateReque"
  "stLatest\032\032.ecssnapshot.ECSStateReply\"\000\022`"
  "\n\024GetStateLatestStream\022(.ecssnapshot.ECS"
  "StateRequestLatestStream\032\032.ecssnapshot.E"
  "CSStateReply\"\0000\001\022d\n\026GetStateLatestStream"
  "V2\022(.ecssnapshot.ECSStateRequestLatestSt"
  "ream\032\034.ecssnapshot.ECSStateReplyV2\"\0000\001\022l"
  "\n\032GetStateLatestStreamPruned\022..ecssnapsh"
  "ot.ECSStateRequestLatestStreamPruned\032\032.e"
  "cssnapshot.ECSStateReply\"\0000\001\022p\n\034GetState"
  "LatestStreamPrunedV2\022..ecssnapshot.ECSSt"
  "ateRequestLatestStreamPruned\032\034.ecssnapsh"
  "ot.ECSStateReplyV2\"\0000\001\022a\n\023GetStateBlockL"
  "atest\022\'.ecssnapshot.ECSStateBlockRequest"
  "Latest\032\037.ecssnapshot.ECSStateBlockReply\""
  "\000\022T\n\017GetStateAtBlock\022#.ecssnapshot.ECSSt"
  "ateRequestAtBlock\032\032.ecssnapshot.ECSState"
  "Reply\"\000\022>\n\tGetWorlds\022\032.ecssnapshot.World"
  "sRequest\032\023.ecssnapshot.Worlds\"\000B\032Z\030proto"
  "buf/go/ecs-snapshotb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ecs_5fsnapshot_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ecs_5fsnapshot_2eproto = {
  false, false, 1867, descriptor_table_protodef_ecs_5fsnapshot_2eproto, "ecs_snapshot.proto", 
  &descriptor_table_ecs_5fsnapshot_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_ecs_5fsnapshot_2eproto::offsets,
  file_level_metadata_ecs_5fsnapshot_2eproto, file_level_enum_descriptors_ecs_5fsnapshot_2eproto, file_level_service_descriptors_ecs_5fsnapshot_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ecs_5fsnapshot_2eproto_getter() {
  return &descriptor_table_ecs_5fsnapshot_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ecs_5fsnapshot_2eproto(&descriptor_table_ecs_5fsnapshot_2eproto);
namespace ecssnapshot {

// ===================================================================

class ECSState::_Internal {
 public:
};

ECSState::ECSState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecssnapshot.ECSState)
}
ECSState::ECSState(const ECSState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&component_id_idx_, &from.component_id_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&entity_id_idx_) -
    reinterpret_cast<char*>(&component_id_idx_)) + sizeof(entity_id_idx_));
  // @@protoc_insertion_point(copy_constructor:ecssnapshot.ECSState)
}

inline void ECSState::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_id_idx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_id_idx_) -
    reinterpret_cast<char*>(&component_id_idx_)) + sizeof(entity_id_idx_));
}

ECSState::~ECSState() {
  // @@protoc_insertion_point(destructor:ecssnapshot.ECSState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECSState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ECSState::ArenaDtor(void* object) {
  ECSState* _this = reinterpret_cast< ECSState* >(object);
  (void)_this;
}
void ECSState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECSState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECSState::Clear() {
// @@protoc_insertion_point(message_clear_start:ecssnapshot.ECSState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  ::memset(&component_id_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_id_idx_) -
      reinterpret_cast<char*>(&component_id_idx_)) + sizeof(entity_id_idx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECSState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 component_id_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          component_id_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 entity_id_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          entity_id_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECSState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecssnapshot.ECSState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component_id_idx = 1;
  if (this->_internal_component_id_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_component_id_idx(), target);
  }

  // uint32 entity_id_idx = 2;
  if (this->_internal_entity_id_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_id_idx(), target);
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecssnapshot.ECSState)
  return target;
}

size_t ECSState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecssnapshot.ECSState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // uint32 component_id_idx = 1;
  if (this->_internal_component_id_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_component_id_idx());
  }

  // uint32 entity_id_idx = 2;
  if (this->_internal_entity_id_idx() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECSState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECSState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECSState::GetClassData() const { return &_class_data_; }

void ECSState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECSState *>(to)->MergeFrom(
      static_cast<const ECSState &>(from));
}


void ECSState::MergeFrom(const ECSState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecssnapshot.ECSState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_component_id_idx() != 0) {
    _internal_set_component_id_idx(from._internal_component_id_idx());
  }
  if (from._internal_entity_id_idx() != 0) {
    _internal_set_entity_id_idx(from._internal_entity_id_idx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECSState::CopyFrom(const ECSState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecssnapshot.ECSState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECSState::IsInitialized() const {
  return true;
}

void ECSState::InternalSwap(ECSState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ECSState, entity_id_idx_)
      + sizeof(ECSState::entity_id_idx_)
      - PROTOBUF_FIELD_OFFSET(ECSState, component_id_idx_)>(
          reinterpret_cast<char*>(&component_id_idx_),
          reinterpret_cast<char*>(&other->component_id_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ECSState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fsnapshot_2eproto_getter, &descriptor_table_ecs_5fsnapshot_2eproto_once,
      file_level_metadata_ecs_5fsnapshot_2eproto[0]);
}

// ===================================================================

class ECSStateSnapshot::_Internal {
 public:
};

ECSStateSnapshot::ECSStateSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  state_(arena),
  statecomponents_(arena),
  stateentities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecssnapshot.ECSStateSnapshot)
}
ECSStateSnapshot::ECSStateSnapshot(const ECSStateSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      state_(from.state_),
      statecomponents_(from.statecomponents_),
      stateentities_(from.stateentities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  statehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    statehash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_statehash().empty()) {
    statehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_statehash(), 
      GetArenaForAllocation());
  }
  worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worldaddress().empty()) {
    worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worldaddress(), 
      GetArenaForAllocation());
  }
  ::memcpy(&startblocknumber_, &from.startblocknumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&endblocknumber_) -
    reinterpret_cast<char*>(&startblocknumber_)) + sizeof(endblocknumber_));
  // @@protoc_insertion_point(copy_constructor:ecssnapshot.ECSStateSnapshot)
}

inline void ECSStateSnapshot::SharedCtor() {
statehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  statehash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&startblocknumber_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endblocknumber_) -
    reinterpret_cast<char*>(&startblocknumber_)) + sizeof(endblocknumber_));
}

ECSStateSnapshot::~ECSStateSnapshot() {
  // @@protoc_insertion_point(destructor:ecssnapshot.ECSStateSnapshot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECSStateSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  statehash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  worldaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ECSStateSnapshot::ArenaDtor(void* object) {
  ECSStateSnapshot* _this = reinterpret_cast< ECSStateSnapshot* >(object);
  (void)_this;
}
void ECSStateSnapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECSStateSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECSStateSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:ecssnapshot.ECSStateSnapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  statecomponents_.Clear();
  stateentities_.Clear();
  statehash_.ClearToEmpty();
  worldaddress_.ClearToEmpty();
  ::memset(&startblocknumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endblocknumber_) -
      reinterpret_cast<char*>(&startblocknumber_)) + sizeof(endblocknumber_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECSStateSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ecssnapshot.ECSState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string stateComponents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_statecomponents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateSnapshot.stateComponents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string stateEntities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stateentities();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateSnapshot.stateEntities"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string stateHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_statehash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateSnapshot.stateHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 startBlockNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          startblocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 endBlockNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          endblocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string worldAddress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_worldaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateSnapshot.worldAddress"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECSStateSnapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecssnapshot.ECSStateSnapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ecssnapshot.ECSState state = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_state(i), target, stream);
  }

  // repeated string stateComponents = 2;
  for (int i = 0, n = this->_internal_statecomponents_size(); i < n; i++) {
    const auto& s = this->_internal_statecomponents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateSnapshot.stateComponents");
    target = stream->WriteString(2, s, target);
  }

  // repeated string stateEntities = 3;
  for (int i = 0, n = this->_internal_stateentities_size(); i < n; i++) {
    const auto& s = this->_internal_stateentities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateSnapshot.stateEntities");
    target = stream->WriteString(3, s, target);
  }

  // string stateHash = 4;
  if (!this->_internal_statehash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statehash().data(), static_cast<int>(this->_internal_statehash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateSnapshot.stateHash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_statehash(), target);
  }

  // uint32 startBlockNumber = 5;
  if (this->_internal_startblocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_startblocknumber(), target);
  }

  // uint32 endBlockNumber = 6;
  if (this->_internal_endblocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_endblocknumber(), target);
  }

  // string worldAddress = 7;
  if (!this->_internal_worldaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worldaddress().data(), static_cast<int>(this->_internal_worldaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateSnapshot.worldAddress");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_worldaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecssnapshot.ECSStateSnapshot)
  return target;
}

size_t ECSStateSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecssnapshot.ECSStateSnapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ecssnapshot.ECSState state = 1;
  total_size += 1UL * this->_internal_state_size();
  for (const auto& msg : this->state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string stateComponents = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(statecomponents_.size());
  for (int i = 0, n = statecomponents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      statecomponents_.Get(i));
  }

  // repeated string stateEntities = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stateentities_.size());
  for (int i = 0, n = stateentities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stateentities_.Get(i));
  }

  // string stateHash = 4;
  if (!this->_internal_statehash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statehash());
  }

  // string worldAddress = 7;
  if (!this->_internal_worldaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worldaddress());
  }

  // uint32 startBlockNumber = 5;
  if (this->_internal_startblocknumber() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_startblocknumber());
  }

  // uint32 endBlockNumber = 6;
  if (this->_internal_endblocknumber() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_endblocknumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECSStateSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECSStateSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECSStateSnapshot::GetClassData() const { return &_class_data_; }

void ECSStateSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECSStateSnapshot *>(to)->MergeFrom(
      static_cast<const ECSStateSnapshot &>(from));
}


void ECSStateSnapshot::MergeFrom(const ECSStateSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecssnapshot.ECSStateSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
  statecomponents_.MergeFrom(from.statecomponents_);
  stateentities_.MergeFrom(from.stateentities_);
  if (!from._internal_statehash().empty()) {
    _internal_set_statehash(from._internal_statehash());
  }
  if (!from._internal_worldaddress().empty()) {
    _internal_set_worldaddress(from._internal_worldaddress());
  }
  if (from._internal_startblocknumber() != 0) {
    _internal_set_startblocknumber(from._internal_startblocknumber());
  }
  if (from._internal_endblocknumber() != 0) {
    _internal_set_endblocknumber(from._internal_endblocknumber());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECSStateSnapshot::CopyFrom(const ECSStateSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecssnapshot.ECSStateSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECSStateSnapshot::IsInitialized() const {
  return true;
}

void ECSStateSnapshot::InternalSwap(ECSStateSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  state_.InternalSwap(&other->state_);
  statecomponents_.InternalSwap(&other->statecomponents_);
  stateentities_.InternalSwap(&other->stateentities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &statehash_, lhs_arena,
      &other->statehash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &worldaddress_, lhs_arena,
      &other->worldaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ECSStateSnapshot, endblocknumber_)
      + sizeof(ECSStateSnapshot::endblocknumber_)
      - PROTOBUF_FIELD_OFFSET(ECSStateSnapshot, startblocknumber_)>(
          reinterpret_cast<char*>(&startblocknumber_),
          reinterpret_cast<char*>(&other->startblocknumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ECSStateSnapshot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fsnapshot_2eproto_getter, &descriptor_table_ecs_5fsnapshot_2eproto_once,
      file_level_metadata_ecs_5fsnapshot_2eproto[1]);
}

// ===================================================================

class Worlds::_Internal {
 public:
};

Worlds::Worlds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  worldaddress_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecssnapshot.Worlds)
}
Worlds::Worlds(const Worlds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      worldaddress_(from.worldaddress_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ecssnapshot.Worlds)
}

inline void Worlds::SharedCtor() {
}

Worlds::~Worlds() {
  // @@protoc_insertion_point(destructor:ecssnapshot.Worlds)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Worlds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Worlds::ArenaDtor(void* object) {
  Worlds* _this = reinterpret_cast< Worlds* >(object);
  (void)_this;
}
void Worlds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Worlds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Worlds::Clear() {
// @@protoc_insertion_point(message_clear_start:ecssnapshot.Worlds)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldaddress_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Worlds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string worldAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_worldaddress();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.Worlds.worldAddress"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Worlds::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecssnapshot.Worlds)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string worldAddress = 1;
  for (int i = 0, n = this->_internal_worldaddress_size(); i < n; i++) {
    const auto& s = this->_internal_worldaddress(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.Worlds.worldAddress");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecssnapshot.Worlds)
  return target;
}

size_t Worlds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecssnapshot.Worlds)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string worldAddress = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(worldaddress_.size());
  for (int i = 0, n = worldaddress_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      worldaddress_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Worlds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Worlds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Worlds::GetClassData() const { return &_class_data_; }

void Worlds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Worlds *>(to)->MergeFrom(
      static_cast<const Worlds &>(from));
}


void Worlds::MergeFrom(const Worlds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecssnapshot.Worlds)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  worldaddress_.MergeFrom(from.worldaddress_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Worlds::CopyFrom(const Worlds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecssnapshot.Worlds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Worlds::IsInitialized() const {
  return true;
}

void Worlds::InternalSwap(Worlds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  worldaddress_.InternalSwap(&other->worldaddress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Worlds::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fsnapshot_2eproto_getter, &descriptor_table_ecs_5fsnapshot_2eproto_once,
      file_level_metadata_ecs_5fsnapshot_2eproto[2]);
}

// ===================================================================

class ECSStateRequestLatest::_Internal {
 public:
};

ECSStateRequestLatest::ECSStateRequestLatest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecssnapshot.ECSStateRequestLatest)
}
ECSStateRequestLatest::ECSStateRequestLatest(const ECSStateRequestLatest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worldaddress().empty()) {
    worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worldaddress(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ecssnapshot.ECSStateRequestLatest)
}

inline void ECSStateRequestLatest::SharedCtor() {
worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ECSStateRequestLatest::~ECSStateRequestLatest() {
  // @@protoc_insertion_point(destructor:ecssnapshot.ECSStateRequestLatest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECSStateRequestLatest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  worldaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ECSStateRequestLatest::ArenaDtor(void* object) {
  ECSStateRequestLatest* _this = reinterpret_cast< ECSStateRequestLatest* >(object);
  (void)_this;
}
void ECSStateRequestLatest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECSStateRequestLatest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECSStateRequestLatest::Clear() {
// @@protoc_insertion_point(message_clear_start:ecssnapshot.ECSStateRequestLatest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldaddress_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECSStateRequestLatest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string worldAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_worldaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateRequestLatest.worldAddress"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECSStateRequestLatest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecssnapshot.ECSStateRequestLatest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string worldAddress = 1;
  if (!this->_internal_worldaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worldaddress().data(), static_cast<int>(this->_internal_worldaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateRequestLatest.worldAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worldaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecssnapshot.ECSStateRequestLatest)
  return target;
}

size_t ECSStateRequestLatest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecssnapshot.ECSStateRequestLatest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string worldAddress = 1;
  if (!this->_internal_worldaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worldaddress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECSStateRequestLatest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECSStateRequestLatest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECSStateRequestLatest::GetClassData() const { return &_class_data_; }

void ECSStateRequestLatest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECSStateRequestLatest *>(to)->MergeFrom(
      static_cast<const ECSStateRequestLatest &>(from));
}


void ECSStateRequestLatest::MergeFrom(const ECSStateRequestLatest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecssnapshot.ECSStateRequestLatest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_worldaddress().empty()) {
    _internal_set_worldaddress(from._internal_worldaddress());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECSStateRequestLatest::CopyFrom(const ECSStateRequestLatest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecssnapshot.ECSStateRequestLatest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECSStateRequestLatest::IsInitialized() const {
  return true;
}

void ECSStateRequestLatest::InternalSwap(ECSStateRequestLatest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &worldaddress_, lhs_arena,
      &other->worldaddress_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ECSStateRequestLatest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fsnapshot_2eproto_getter, &descriptor_table_ecs_5fsnapshot_2eproto_once,
      file_level_metadata_ecs_5fsnapshot_2eproto[3]);
}

// ===================================================================

class ECSStateRequestLatestStreamPruned::_Internal {
 public:
};

ECSStateRequestLatestStreamPruned::ECSStateRequestLatestStreamPruned(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecssnapshot.ECSStateRequestLatestStreamPruned)
}
ECSStateRequestLatestStreamPruned::ECSStateRequestLatestStreamPruned(const ECSStateRequestLatestStreamPruned& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worldaddress().empty()) {
    worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worldaddress(), 
      GetArenaForAllocation());
  }
  pruneaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pruneaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pruneaddress().empty()) {
    pruneaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pruneaddress(), 
      GetArenaForAllocation());
  }
  prunecomponentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    prunecomponentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prunecomponentid().empty()) {
    prunecomponentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_prunecomponentid(), 
      GetArenaForAllocation());
  }
  chunkpercentage_ = from.chunkpercentage_;
  // @@protoc_insertion_point(copy_constructor:ecssnapshot.ECSStateRequestLatestStreamPruned)
}

inline void ECSStateRequestLatestStreamPruned::SharedCtor() {
worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pruneaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pruneaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
prunecomponentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  prunecomponentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chunkpercentage_ = 0u;
}

ECSStateRequestLatestStreamPruned::~ECSStateRequestLatestStreamPruned() {
  // @@protoc_insertion_point(destructor:ecssnapshot.ECSStateRequestLatestStreamPruned)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECSStateRequestLatestStreamPruned::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  worldaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pruneaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prunecomponentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ECSStateRequestLatestStreamPruned::ArenaDtor(void* object) {
  ECSStateRequestLatestStreamPruned* _this = reinterpret_cast< ECSStateRequestLatestStreamPruned* >(object);
  (void)_this;
}
void ECSStateRequestLatestStreamPruned::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECSStateRequestLatestStreamPruned::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECSStateRequestLatestStreamPruned::Clear() {
// @@protoc_insertion_point(message_clear_start:ecssnapshot.ECSStateRequestLatestStreamPruned)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldaddress_.ClearToEmpty();
  pruneaddress_.ClearToEmpty();
  prunecomponentid_.ClearToEmpty();
  chunkpercentage_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECSStateRequestLatestStreamPruned::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string worldAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_worldaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateRequestLatestStreamPruned.worldAddress"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pruneAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pruneaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateRequestLatestStreamPruned.pruneAddress"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pruneComponentId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_prunecomponentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateRequestLatestStreamPruned.pruneComponentId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chunkPercentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          chunkpercentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECSStateRequestLatestStreamPruned::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecssnapshot.ECSStateRequestLatestStreamPruned)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string worldAddress = 1;
  if (!this->_internal_worldaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worldaddress().data(), static_cast<int>(this->_internal_worldaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateRequestLatestStreamPruned.worldAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worldaddress(), target);
  }

  // string pruneAddress = 2;
  if (!this->_internal_pruneaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pruneaddress().data(), static_cast<int>(this->_internal_pruneaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateRequestLatestStreamPruned.pruneAddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pruneaddress(), target);
  }

  // string pruneComponentId = 3;
  if (!this->_internal_prunecomponentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prunecomponentid().data(), static_cast<int>(this->_internal_prunecomponentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateRequestLatestStreamPruned.pruneComponentId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prunecomponentid(), target);
  }

  // uint32 chunkPercentage = 4;
  if (this->_internal_chunkpercentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_chunkpercentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecssnapshot.ECSStateRequestLatestStreamPruned)
  return target;
}

size_t ECSStateRequestLatestStreamPruned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecssnapshot.ECSStateRequestLatestStreamPruned)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string worldAddress = 1;
  if (!this->_internal_worldaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worldaddress());
  }

  // string pruneAddress = 2;
  if (!this->_internal_pruneaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pruneaddress());
  }

  // string pruneComponentId = 3;
  if (!this->_internal_prunecomponentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prunecomponentid());
  }

  // uint32 chunkPercentage = 4;
  if (this->_internal_chunkpercentage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_chunkpercentage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECSStateRequestLatestStreamPruned::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECSStateRequestLatestStreamPruned::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECSStateRequestLatestStreamPruned::GetClassData() const { return &_class_data_; }

void ECSStateRequestLatestStreamPruned::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECSStateRequestLatestStreamPruned *>(to)->MergeFrom(
      static_cast<const ECSStateRequestLatestStreamPruned &>(from));
}


void ECSStateRequestLatestStreamPruned::MergeFrom(const ECSStateRequestLatestStreamPruned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecssnapshot.ECSStateRequestLatestStreamPruned)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_worldaddress().empty()) {
    _internal_set_worldaddress(from._internal_worldaddress());
  }
  if (!from._internal_pruneaddress().empty()) {
    _internal_set_pruneaddress(from._internal_pruneaddress());
  }
  if (!from._internal_prunecomponentid().empty()) {
    _internal_set_prunecomponentid(from._internal_prunecomponentid());
  }
  if (from._internal_chunkpercentage() != 0) {
    _internal_set_chunkpercentage(from._internal_chunkpercentage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECSStateRequestLatestStreamPruned::CopyFrom(const ECSStateRequestLatestStreamPruned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecssnapshot.ECSStateRequestLatestStreamPruned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECSStateRequestLatestStreamPruned::IsInitialized() const {
  return true;
}

void ECSStateRequestLatestStreamPruned::InternalSwap(ECSStateRequestLatestStreamPruned* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &worldaddress_, lhs_arena,
      &other->worldaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pruneaddress_, lhs_arena,
      &other->pruneaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &prunecomponentid_, lhs_arena,
      &other->prunecomponentid_, rhs_arena
  );
  swap(chunkpercentage_, other->chunkpercentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ECSStateRequestLatestStreamPruned::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fsnapshot_2eproto_getter, &descriptor_table_ecs_5fsnapshot_2eproto_once,
      file_level_metadata_ecs_5fsnapshot_2eproto[4]);
}

// ===================================================================

class ECSStateRequestLatestStream::_Internal {
 public:
};

ECSStateRequestLatestStream::ECSStateRequestLatestStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecssnapshot.ECSStateRequestLatestStream)
}
ECSStateRequestLatestStream::ECSStateRequestLatestStream(const ECSStateRequestLatestStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worldaddress().empty()) {
    worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worldaddress(), 
      GetArenaForAllocation());
  }
  chunkpercentage_ = from.chunkpercentage_;
  // @@protoc_insertion_point(copy_constructor:ecssnapshot.ECSStateRequestLatestStream)
}

inline void ECSStateRequestLatestStream::SharedCtor() {
worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chunkpercentage_ = 0u;
}

ECSStateRequestLatestStream::~ECSStateRequestLatestStream() {
  // @@protoc_insertion_point(destructor:ecssnapshot.ECSStateRequestLatestStream)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECSStateRequestLatestStream::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  worldaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ECSStateRequestLatestStream::ArenaDtor(void* object) {
  ECSStateRequestLatestStream* _this = reinterpret_cast< ECSStateRequestLatestStream* >(object);
  (void)_this;
}
void ECSStateRequestLatestStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECSStateRequestLatestStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECSStateRequestLatestStream::Clear() {
// @@protoc_insertion_point(message_clear_start:ecssnapshot.ECSStateRequestLatestStream)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldaddress_.ClearToEmpty();
  chunkpercentage_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECSStateRequestLatestStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string worldAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_worldaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateRequestLatestStream.worldAddress"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chunkPercentage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          chunkpercentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECSStateRequestLatestStream::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecssnapshot.ECSStateRequestLatestStream)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string worldAddress = 1;
  if (!this->_internal_worldaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worldaddress().data(), static_cast<int>(this->_internal_worldaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateRequestLatestStream.worldAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worldaddress(), target);
  }

  // uint32 chunkPercentage = 2;
  if (this->_internal_chunkpercentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_chunkpercentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecssnapshot.ECSStateRequestLatestStream)
  return target;
}

size_t ECSStateRequestLatestStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecssnapshot.ECSStateRequestLatestStream)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string worldAddress = 1;
  if (!this->_internal_worldaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worldaddress());
  }

  // uint32 chunkPercentage = 2;
  if (this->_internal_chunkpercentage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_chunkpercentage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECSStateRequestLatestStream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECSStateRequestLatestStream::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECSStateRequestLatestStream::GetClassData() const { return &_class_data_; }

void ECSStateRequestLatestStream::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECSStateRequestLatestStream *>(to)->MergeFrom(
      static_cast<const ECSStateRequestLatestStream &>(from));
}


void ECSStateRequestLatestStream::MergeFrom(const ECSStateRequestLatestStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecssnapshot.ECSStateRequestLatestStream)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_worldaddress().empty()) {
    _internal_set_worldaddress(from._internal_worldaddress());
  }
  if (from._internal_chunkpercentage() != 0) {
    _internal_set_chunkpercentage(from._internal_chunkpercentage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECSStateRequestLatestStream::CopyFrom(const ECSStateRequestLatestStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecssnapshot.ECSStateRequestLatestStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECSStateRequestLatestStream::IsInitialized() const {
  return true;
}

void ECSStateRequestLatestStream::InternalSwap(ECSStateRequestLatestStream* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &worldaddress_, lhs_arena,
      &other->worldaddress_, rhs_arena
  );
  swap(chunkpercentage_, other->chunkpercentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ECSStateRequestLatestStream::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fsnapshot_2eproto_getter, &descriptor_table_ecs_5fsnapshot_2eproto_once,
      file_level_metadata_ecs_5fsnapshot_2eproto[5]);
}

// ===================================================================

class ECSStateBlockRequestLatest::_Internal {
 public:
};

ECSStateBlockRequestLatest::ECSStateBlockRequestLatest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecssnapshot.ECSStateBlockRequestLatest)
}
ECSStateBlockRequestLatest::ECSStateBlockRequestLatest(const ECSStateBlockRequestLatest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worldaddress().empty()) {
    worldaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_worldaddress(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ecssnapshot.ECSStateBlockRequestLatest)
}

inline void ECSStateBlockRequestLatest::SharedCtor() {
worldaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  worldaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ECSStateBlockRequestLatest::~ECSStateBlockRequestLatest() {
  // @@protoc_insertion_point(destructor:ecssnapshot.ECSStateBlockRequestLatest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECSStateBlockRequestLatest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  worldaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ECSStateBlockRequestLatest::ArenaDtor(void* object) {
  ECSStateBlockRequestLatest* _this = reinterpret_cast< ECSStateBlockRequestLatest* >(object);
  (void)_this;
}
void ECSStateBlockRequestLatest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECSStateBlockRequestLatest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECSStateBlockRequestLatest::Clear() {
// @@protoc_insertion_point(message_clear_start:ecssnapshot.ECSStateBlockRequestLatest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldaddress_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECSStateBlockRequestLatest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string worldAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_worldaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateBlockRequestLatest.worldAddress"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECSStateBlockRequestLatest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecssnapshot.ECSStateBlockRequestLatest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string worldAddress = 1;
  if (!this->_internal_worldaddress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worldaddress().data(), static_cast<int>(this->_internal_worldaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateBlockRequestLatest.worldAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worldaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecssnapshot.ECSStateBlockRequestLatest)
  return target;
}

size_t ECSStateBlockRequestLatest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecssnapshot.ECSStateBlockRequestLatest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string worldAddress = 1;
  if (!this->_internal_worldaddress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worldaddress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECSStateBlockRequestLatest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECSStateBlockRequestLatest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECSStateBlockRequestLatest::GetClassData() const { return &_class_data_; }

void ECSStateBlockRequestLatest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECSStateBlockRequestLatest *>(to)->MergeFrom(
      static_cast<const ECSStateBlockRequestLatest &>(from));
}


void ECSStateBlockRequestLatest::MergeFrom(const ECSStateBlockRequestLatest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecssnapshot.ECSStateBlockRequestLatest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_worldaddress().empty()) {
    _internal_set_worldaddress(from._internal_worldaddress());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECSStateBlockRequestLatest::CopyFrom(const ECSStateBlockRequestLatest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecssnapshot.ECSStateBlockRequestLatest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECSStateBlockRequestLatest::IsInitialized() const {
  return true;
}

void ECSStateBlockRequestLatest::InternalSwap(ECSStateBlockRequestLatest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &worldaddress_, lhs_arena,
      &other->worldaddress_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ECSStateBlockRequestLatest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fsnapshot_2eproto_getter, &descriptor_table_ecs_5fsnapshot_2eproto_once,
      file_level_metadata_ecs_5fsnapshot_2eproto[6]);
}

// ===================================================================

class ECSStateRequestAtBlock::_Internal {
 public:
};

ECSStateRequestAtBlock::ECSStateRequestAtBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecssnapshot.ECSStateRequestAtBlock)
}
ECSStateRequestAtBlock::ECSStateRequestAtBlock(const ECSStateRequestAtBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blocknumber_ = from.blocknumber_;
  // @@protoc_insertion_point(copy_constructor:ecssnapshot.ECSStateRequestAtBlock)
}

inline void ECSStateRequestAtBlock::SharedCtor() {
blocknumber_ = uint64_t{0u};
}

ECSStateRequestAtBlock::~ECSStateRequestAtBlock() {
  // @@protoc_insertion_point(destructor:ecssnapshot.ECSStateRequestAtBlock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECSStateRequestAtBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ECSStateRequestAtBlock::ArenaDtor(void* object) {
  ECSStateRequestAtBlock* _this = reinterpret_cast< ECSStateRequestAtBlock* >(object);
  (void)_this;
}
void ECSStateRequestAtBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECSStateRequestAtBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECSStateRequestAtBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:ecssnapshot.ECSStateRequestAtBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocknumber_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECSStateRequestAtBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 blockNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECSStateRequestAtBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecssnapshot.ECSStateRequestAtBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blockNumber = 1;
  if (this->_internal_blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_blocknumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecssnapshot.ECSStateRequestAtBlock)
  return target;
}

size_t ECSStateRequestAtBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecssnapshot.ECSStateRequestAtBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 blockNumber = 1;
  if (this->_internal_blocknumber() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_blocknumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECSStateRequestAtBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECSStateRequestAtBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECSStateRequestAtBlock::GetClassData() const { return &_class_data_; }

void ECSStateRequestAtBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECSStateRequestAtBlock *>(to)->MergeFrom(
      static_cast<const ECSStateRequestAtBlock &>(from));
}


void ECSStateRequestAtBlock::MergeFrom(const ECSStateRequestAtBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecssnapshot.ECSStateRequestAtBlock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_blocknumber() != 0) {
    _internal_set_blocknumber(from._internal_blocknumber());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECSStateRequestAtBlock::CopyFrom(const ECSStateRequestAtBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecssnapshot.ECSStateRequestAtBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECSStateRequestAtBlock::IsInitialized() const {
  return true;
}

void ECSStateRequestAtBlock::InternalSwap(ECSStateRequestAtBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(blocknumber_, other->blocknumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ECSStateRequestAtBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fsnapshot_2eproto_getter, &descriptor_table_ecs_5fsnapshot_2eproto_once,
      file_level_metadata_ecs_5fsnapshot_2eproto[7]);
}

// ===================================================================

class WorldsRequest::_Internal {
 public:
};

WorldsRequest::WorldsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:ecssnapshot.WorldsRequest)
}
WorldsRequest::WorldsRequest(const WorldsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ecssnapshot.WorldsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorldsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorldsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata WorldsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fsnapshot_2eproto_getter, &descriptor_table_ecs_5fsnapshot_2eproto_once,
      file_level_metadata_ecs_5fsnapshot_2eproto[8]);
}

// ===================================================================

class ECSStateReply::_Internal {
 public:
};

ECSStateReply::ECSStateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  state_(arena),
  statecomponents_(arena),
  stateentities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecssnapshot.ECSStateReply)
}
ECSStateReply::ECSStateReply(const ECSStateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      state_(from.state_),
      statecomponents_(from.statecomponents_),
      stateentities_(from.stateentities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  statehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    statehash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_statehash().empty()) {
    statehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_statehash(), 
      GetArenaForAllocation());
  }
  blocknumber_ = from.blocknumber_;
  // @@protoc_insertion_point(copy_constructor:ecssnapshot.ECSStateReply)
}

inline void ECSStateReply::SharedCtor() {
statehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  statehash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
blocknumber_ = 0u;
}

ECSStateReply::~ECSStateReply() {
  // @@protoc_insertion_point(destructor:ecssnapshot.ECSStateReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECSStateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  statehash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ECSStateReply::ArenaDtor(void* object) {
  ECSStateReply* _this = reinterpret_cast< ECSStateReply* >(object);
  (void)_this;
}
void ECSStateReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECSStateReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECSStateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ecssnapshot.ECSStateReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  statecomponents_.Clear();
  stateentities_.Clear();
  statehash_.ClearToEmpty();
  blocknumber_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECSStateReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ecssnapshot.ECSState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string stateComponents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_statecomponents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateReply.stateComponents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string stateEntities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stateentities();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateReply.stateEntities"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string stateHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_statehash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateReply.stateHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 blockNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECSStateReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecssnapshot.ECSStateReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ecssnapshot.ECSState state = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_state(i), target, stream);
  }

  // repeated string stateComponents = 2;
  for (int i = 0, n = this->_internal_statecomponents_size(); i < n; i++) {
    const auto& s = this->_internal_statecomponents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateReply.stateComponents");
    target = stream->WriteString(2, s, target);
  }

  // repeated string stateEntities = 3;
  for (int i = 0, n = this->_internal_stateentities_size(); i < n; i++) {
    const auto& s = this->_internal_stateentities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateReply.stateEntities");
    target = stream->WriteString(3, s, target);
  }

  // string stateHash = 4;
  if (!this->_internal_statehash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statehash().data(), static_cast<int>(this->_internal_statehash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateReply.stateHash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_statehash(), target);
  }

  // uint32 blockNumber = 5;
  if (this->_internal_blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_blocknumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecssnapshot.ECSStateReply)
  return target;
}

size_t ECSStateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecssnapshot.ECSStateReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ecssnapshot.ECSState state = 1;
  total_size += 1UL * this->_internal_state_size();
  for (const auto& msg : this->state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string stateComponents = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(statecomponents_.size());
  for (int i = 0, n = statecomponents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      statecomponents_.Get(i));
  }

  // repeated string stateEntities = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stateentities_.size());
  for (int i = 0, n = stateentities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stateentities_.Get(i));
  }

  // string stateHash = 4;
  if (!this->_internal_statehash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statehash());
  }

  // uint32 blockNumber = 5;
  if (this->_internal_blocknumber() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_blocknumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECSStateReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECSStateReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECSStateReply::GetClassData() const { return &_class_data_; }

void ECSStateReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECSStateReply *>(to)->MergeFrom(
      static_cast<const ECSStateReply &>(from));
}


void ECSStateReply::MergeFrom(const ECSStateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecssnapshot.ECSStateReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
  statecomponents_.MergeFrom(from.statecomponents_);
  stateentities_.MergeFrom(from.stateentities_);
  if (!from._internal_statehash().empty()) {
    _internal_set_statehash(from._internal_statehash());
  }
  if (from._internal_blocknumber() != 0) {
    _internal_set_blocknumber(from._internal_blocknumber());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECSStateReply::CopyFrom(const ECSStateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecssnapshot.ECSStateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECSStateReply::IsInitialized() const {
  return true;
}

void ECSStateReply::InternalSwap(ECSStateReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  state_.InternalSwap(&other->state_);
  statecomponents_.InternalSwap(&other->statecomponents_);
  stateentities_.InternalSwap(&other->stateentities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &statehash_, lhs_arena,
      &other->statehash_, rhs_arena
  );
  swap(blocknumber_, other->blocknumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ECSStateReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fsnapshot_2eproto_getter, &descriptor_table_ecs_5fsnapshot_2eproto_once,
      file_level_metadata_ecs_5fsnapshot_2eproto[9]);
}

// ===================================================================

class ECSStateReplyV2::_Internal {
 public:
};

ECSStateReplyV2::ECSStateReplyV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  state_(arena),
  statecomponents_(arena),
  stateentities_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecssnapshot.ECSStateReplyV2)
}
ECSStateReplyV2::ECSStateReplyV2(const ECSStateReplyV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      state_(from.state_),
      statecomponents_(from.statecomponents_),
      stateentities_(from.stateentities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  statehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    statehash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_statehash().empty()) {
    statehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_statehash(), 
      GetArenaForAllocation());
  }
  blocknumber_ = from.blocknumber_;
  // @@protoc_insertion_point(copy_constructor:ecssnapshot.ECSStateReplyV2)
}

inline void ECSStateReplyV2::SharedCtor() {
statehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  statehash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
blocknumber_ = 0u;
}

ECSStateReplyV2::~ECSStateReplyV2() {
  // @@protoc_insertion_point(destructor:ecssnapshot.ECSStateReplyV2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECSStateReplyV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  statehash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ECSStateReplyV2::ArenaDtor(void* object) {
  ECSStateReplyV2* _this = reinterpret_cast< ECSStateReplyV2* >(object);
  (void)_this;
}
void ECSStateReplyV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECSStateReplyV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECSStateReplyV2::Clear() {
// @@protoc_insertion_point(message_clear_start:ecssnapshot.ECSStateReplyV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  statecomponents_.Clear();
  stateentities_.Clear();
  statehash_.ClearToEmpty();
  blocknumber_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECSStateReplyV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ecssnapshot.ECSState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string stateComponents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_statecomponents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateReplyV2.stateComponents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes stateEntities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stateentities();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string stateHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_statehash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ecssnapshot.ECSStateReplyV2.stateHash"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 blockNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECSStateReplyV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecssnapshot.ECSStateReplyV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ecssnapshot.ECSState state = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_state(i), target, stream);
  }

  // repeated string stateComponents = 2;
  for (int i = 0, n = this->_internal_statecomponents_size(); i < n; i++) {
    const auto& s = this->_internal_statecomponents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateReplyV2.stateComponents");
    target = stream->WriteString(2, s, target);
  }

  // repeated bytes stateEntities = 3;
  for (int i = 0, n = this->_internal_stateentities_size(); i < n; i++) {
    const auto& s = this->_internal_stateentities(i);
    target = stream->WriteBytes(3, s, target);
  }

  // string stateHash = 4;
  if (!this->_internal_statehash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statehash().data(), static_cast<int>(this->_internal_statehash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ecssnapshot.ECSStateReplyV2.stateHash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_statehash(), target);
  }

  // uint32 blockNumber = 5;
  if (this->_internal_blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_blocknumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecssnapshot.ECSStateReplyV2)
  return target;
}

size_t ECSStateReplyV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecssnapshot.ECSStateReplyV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ecssnapshot.ECSState state = 1;
  total_size += 1UL * this->_internal_state_size();
  for (const auto& msg : this->state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string stateComponents = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(statecomponents_.size());
  for (int i = 0, n = statecomponents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      statecomponents_.Get(i));
  }

  // repeated bytes stateEntities = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stateentities_.size());
  for (int i = 0, n = stateentities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      stateentities_.Get(i));
  }

  // string stateHash = 4;
  if (!this->_internal_statehash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statehash());
  }

  // uint32 blockNumber = 5;
  if (this->_internal_blocknumber() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_blocknumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECSStateReplyV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECSStateReplyV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECSStateReplyV2::GetClassData() const { return &_class_data_; }

void ECSStateReplyV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECSStateReplyV2 *>(to)->MergeFrom(
      static_cast<const ECSStateReplyV2 &>(from));
}


void ECSStateReplyV2::MergeFrom(const ECSStateReplyV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecssnapshot.ECSStateReplyV2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
  statecomponents_.MergeFrom(from.statecomponents_);
  stateentities_.MergeFrom(from.stateentities_);
  if (!from._internal_statehash().empty()) {
    _internal_set_statehash(from._internal_statehash());
  }
  if (from._internal_blocknumber() != 0) {
    _internal_set_blocknumber(from._internal_blocknumber());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECSStateReplyV2::CopyFrom(const ECSStateReplyV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecssnapshot.ECSStateReplyV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECSStateReplyV2::IsInitialized() const {
  return true;
}

void ECSStateReplyV2::InternalSwap(ECSStateReplyV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  state_.InternalSwap(&other->state_);
  statecomponents_.InternalSwap(&other->statecomponents_);
  stateentities_.InternalSwap(&other->stateentities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &statehash_, lhs_arena,
      &other->statehash_, rhs_arena
  );
  swap(blocknumber_, other->blocknumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ECSStateReplyV2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fsnapshot_2eproto_getter, &descriptor_table_ecs_5fsnapshot_2eproto_once,
      file_level_metadata_ecs_5fsnapshot_2eproto[10]);
}

// ===================================================================

class ECSStateBlockReply::_Internal {
 public:
};

ECSStateBlockReply::ECSStateBlockReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ecssnapshot.ECSStateBlockReply)
}
ECSStateBlockReply::ECSStateBlockReply(const ECSStateBlockReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blocknumber_ = from.blocknumber_;
  // @@protoc_insertion_point(copy_constructor:ecssnapshot.ECSStateBlockReply)
}

inline void ECSStateBlockReply::SharedCtor() {
blocknumber_ = 0u;
}

ECSStateBlockReply::~ECSStateBlockReply() {
  // @@protoc_insertion_point(destructor:ecssnapshot.ECSStateBlockReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ECSStateBlockReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ECSStateBlockReply::ArenaDtor(void* object) {
  ECSStateBlockReply* _this = reinterpret_cast< ECSStateBlockReply* >(object);
  (void)_this;
}
void ECSStateBlockReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ECSStateBlockReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ECSStateBlockReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ecssnapshot.ECSStateBlockReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocknumber_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECSStateBlockReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 blockNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECSStateBlockReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecssnapshot.ECSStateBlockReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 blockNumber = 1;
  if (this->_internal_blocknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_blocknumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecssnapshot.ECSStateBlockReply)
  return target;
}

size_t ECSStateBlockReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecssnapshot.ECSStateBlockReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 blockNumber = 1;
  if (this->_internal_blocknumber() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_blocknumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECSStateBlockReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ECSStateBlockReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECSStateBlockReply::GetClassData() const { return &_class_data_; }

void ECSStateBlockReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ECSStateBlockReply *>(to)->MergeFrom(
      static_cast<const ECSStateBlockReply &>(from));
}


void ECSStateBlockReply::MergeFrom(const ECSStateBlockReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecssnapshot.ECSStateBlockReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_blocknumber() != 0) {
    _internal_set_blocknumber(from._internal_blocknumber());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECSStateBlockReply::CopyFrom(const ECSStateBlockReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecssnapshot.ECSStateBlockReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECSStateBlockReply::IsInitialized() const {
  return true;
}

void ECSStateBlockReply::InternalSwap(ECSStateBlockReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(blocknumber_, other->blocknumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ECSStateBlockReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ecs_5fsnapshot_2eproto_getter, &descriptor_table_ecs_5fsnapshot_2eproto_once,
      file_level_metadata_ecs_5fsnapshot_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ecssnapshot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ecssnapshot::ECSState* Arena::CreateMaybeMessage< ::ecssnapshot::ECSState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecssnapshot::ECSState >(arena);
}
template<> PROTOBUF_NOINLINE ::ecssnapshot::ECSStateSnapshot* Arena::CreateMaybeMessage< ::ecssnapshot::ECSStateSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecssnapshot::ECSStateSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::ecssnapshot::Worlds* Arena::CreateMaybeMessage< ::ecssnapshot::Worlds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecssnapshot::Worlds >(arena);
}
template<> PROTOBUF_NOINLINE ::ecssnapshot::ECSStateRequestLatest* Arena::CreateMaybeMessage< ::ecssnapshot::ECSStateRequestLatest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecssnapshot::ECSStateRequestLatest >(arena);
}
template<> PROTOBUF_NOINLINE ::ecssnapshot::ECSStateRequestLatestStreamPruned* Arena::CreateMaybeMessage< ::ecssnapshot::ECSStateRequestLatestStreamPruned >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecssnapshot::ECSStateRequestLatestStreamPruned >(arena);
}
template<> PROTOBUF_NOINLINE ::ecssnapshot::ECSStateRequestLatestStream* Arena::CreateMaybeMessage< ::ecssnapshot::ECSStateRequestLatestStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecssnapshot::ECSStateRequestLatestStream >(arena);
}
template<> PROTOBUF_NOINLINE ::ecssnapshot::ECSStateBlockRequestLatest* Arena::CreateMaybeMessage< ::ecssnapshot::ECSStateBlockRequestLatest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecssnapshot::ECSStateBlockRequestLatest >(arena);
}
template<> PROTOBUF_NOINLINE ::ecssnapshot::ECSStateRequestAtBlock* Arena::CreateMaybeMessage< ::ecssnapshot::ECSStateRequestAtBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecssnapshot::ECSStateRequestAtBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::ecssnapshot::WorldsRequest* Arena::CreateMaybeMessage< ::ecssnapshot::WorldsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecssnapshot::WorldsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ecssnapshot::ECSStateReply* Arena::CreateMaybeMessage< ::ecssnapshot::ECSStateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecssnapshot::ECSStateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::ecssnapshot::ECSStateReplyV2* Arena::CreateMaybeMessage< ::ecssnapshot::ECSStateReplyV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecssnapshot::ECSStateReplyV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::ecssnapshot::ECSStateBlockReply* Arena::CreateMaybeMessage< ::ecssnapshot::ECSStateBlockReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecssnapshot::ECSStateBlockReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
